import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { fieldInputPropTypes, fieldMetaPropTypes } from 'redux-form';
import RadioGroup from '../RadioGroup';

var RadioGroupField =
/*#__PURE__*/
function (_Component) {
  _inherits(RadioGroupField, _Component);

  function RadioGroupField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, RadioGroupField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroupField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleChange = function (e) {
      var _this$props = _this.props,
          RadioGroupProps = _this$props.RadioGroupProps,
          input = _this$props.input;

      if (RadioGroupProps && RadioGroupProps.onChange) {
        RadioGroupProps.onChange(e, _this.props);
      } else {
        input.onChange(e);
      }
    };

    _this.handleBlur = function (e) {
      var _this$props2 = _this.props,
          RadioGroupProps = _this$props2.RadioGroupProps,
          input = _this$props2.input;

      if (RadioGroupProps && RadioGroupProps.onBlur) {
        RadioGroupProps.onBlur(e, _this.props);
      } else {
        input.onBlur(e);
      }
    };

    _this.handleValue = function () {
      var _this$props3 = _this.props,
          RadioGroupProps = _this$props3.RadioGroupProps,
          input = _this$props3.input;

      if (RadioGroupProps && RadioGroupProps.value) {
        if (typeof RadioGroupProps.value === 'function') {
          return RadioGroupProps.value(input.value);
        }

        return RadioGroupProps.value;
      }

      return input.value;
    };

    return _this;
  }

  _createClass(RadioGroupField, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          input = _this$props4.input,
          _this$props4$meta = _this$props4.meta,
          touched = _this$props4$meta.touched,
          invalid = _this$props4$meta.invalid,
          error = _this$props4$meta.error,
          FormControlProps = _this$props4.FormControlProps,
          RadioGroupProps = _this$props4.RadioGroupProps,
          rest = _objectWithoutProperties(_this$props4, ["input", "meta", "FormControlProps", "RadioGroupProps"]);

      return React.createElement(RadioGroup, _extends({}, rest, {
        FormControlProps: _objectSpread({}, FormControlProps, {
          error: touched && invalid
        }),
        RadioGroupProps: _objectSpread({}, RadioGroupProps, input, {
          value: this.handleValue(),
          onChange: this.handleChange,
          onBlur: this.handleBlur
        }),
        helperText: error,
        showHelperText: touched && invalid
      }));
    }
  }]);

  return RadioGroupField;
}(Component);

RadioGroupField.propTypes = {
  // redux form props
  input: PropTypes.shape(fieldInputPropTypes).isRequired,
  meta: PropTypes.shape(fieldMetaPropTypes).isRequired,
  // customize props
  FormControlProps: PropTypes.object,
  RadioGroupProps: PropTypes.object
};
export { RadioGroupField as default };