import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { fromJS, isImmutable } from 'immutable';
import { fieldInputPropTypes, fieldMetaPropTypes } from 'redux-form';
import CheckboxInputGroup from '../CheckboxInputGroup'; // Code below is refer to https://github.com/erikras/redux-form/issues/1037

var CheckboxInputGroupField =
/*#__PURE__*/
function (_Component) {
  _inherits(CheckboxInputGroupField, _Component);

  function CheckboxInputGroupField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, CheckboxInputGroupField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckboxInputGroupField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this._handleChange = function (e, option) {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        input.onChange(input.value.setIn([option.name, 'checked'], e.target.checked));
      } else {
        input.onChange(fromJS(_defineProperty({}, option.name, {
          checked: e.target.checked
        })));
      }
    };

    _this._handleInputChange = function (e, option) {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        input.onChange(input.value.setIn([option.name, 'text'], e.target.value));
      } else {
        input.onChange(fromJS(_defineProperty({}, option.name, {
          text: e.target.value
        })));
      }
    };

    _this._parseChecked = function (option) {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        return input.value.getIn([option.name, 'checked'], false);
      }

      return false;
    };

    _this._parseText = function (option) {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        // TODO: We can't control more than one Input value while be wrapped in the FormControl.
        // I think that's why I can't controll multiple value in the same time.
        // If I don't control values the component work well but React will show warning about `A component is changing an uncontrolled input of type text to be controlled`.
        return input.value.getIn([option.name, 'text']);
      }

      return '';
    };

    return _this;
  }

  _createClass(CheckboxInputGroupField, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          input = _this$props.input,
          _this$props$meta = _this$props.meta,
          touched = _this$props$meta.touched,
          invalid = _this$props$meta.invalid,
          error = _this$props$meta.error,
          options = _this$props.options,
          errorProp = _this$props.error,
          helperText = _this$props.helperText,
          showHelperText = _this$props.showHelperText,
          other = _objectWithoutProperties(_this$props, ["input", "meta", "options", "error", "helperText", "showHelperText"]);

      return React.createElement(CheckboxInputGroup, _extends({
        options: options.map(function (_ref) {
          var onChange = _ref.onChange,
              checked = _ref.checked,
              MUIInputProps = _ref.MUIInputProps,
              otherOption = _objectWithoutProperties(_ref, ["onChange", "checked", "MUIInputProps"]);

          var _ref2 = MUIInputProps || {},
              onChangeProp = _ref2.onChange,
              valueProp = _ref2.value,
              otherMUIInputProps = _objectWithoutProperties(_ref2, ["onChange", "value"]);

          return _objectSpread({
            onChange: function onChange(e) {
              return _this2._handleChange(e, otherOption);
            },
            checked: _this2._parseChecked(otherOption),
            MUIInputProps: _objectSpread({
              onChange: function onChange(e) {
                return _this2._handleInputChange(e, otherOption);
              },
              value: _this2._parseText(otherOption)
            }, otherMUIInputProps)
          }, otherOption);
        }),
        error: touched && invalid,
        helperText: error,
        showHelperText: touched && invalid
      }, other));
    }
  }]);

  return CheckboxInputGroupField;
}(Component);

CheckboxInputGroupField.propTypes = {
  // redux form props
  input: PropTypes.shape(fieldInputPropTypes).isRequired,
  meta: PropTypes.shape(fieldMetaPropTypes).isRequired
};
export { CheckboxInputGroupField as default };