import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Select, { components } from 'react-select';
import withStyles from '@material-ui/core/styles/withStyles';
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Paper from '@material-ui/core/Paper';
import Chip from '@material-ui/core/Chip';
import MenuItem from '@material-ui/core/MenuItem';
import CancelIcon from '@material-ui/icons/Cancel';
import styles from './styles';

function NoOptionsMessage(props) {
  return React.createElement(Typography, _extends({
    color: "textSecondary",
    className: props.selectProps.classes.noOptionsMessage
  }, props.innerProps), props.children);
}

function inputComponent(_ref) {
  var inputRef = _ref.inputRef,
      props = _objectWithoutProperties(_ref, ["inputRef"]);

  return React.createElement("div", _extends({
    ref: inputRef
  }, props));
}

function Control(props) {
  var _ref2 = props.selectProps.TextFieldProps || {},
      InputLabelProps = _ref2.InputLabelProps,
      InputProps = _ref2.InputProps,
      other = _objectWithoutProperties(_ref2, ["InputLabelProps", "InputProps"]);

  return React.createElement(TextField, _extends({
    InputLabelProps: _objectSpread({
      shrink: props.isFocused || props.hasValue
    }, InputLabelProps),
    InputProps: _objectSpread({
      inputComponent: inputComponent,
      inputProps: _objectSpread({
        className: classNames(props.selectProps.classes.input, _defineProperty({}, props.selectProps.classes.singleInput, !props.isMulti)),
        inputRef: props.innerRef,
        children: props.children
      }, props.innerProps)
    }, InputProps)
  }, other));
}

function Option(props) {
  return React.createElement(MenuItem, _extends({
    buttonRef: props.innerRef,
    selected: props.isFocused,
    component: "div",
    style: {
      fontWeight: props.isSelected ? 500 : 400
    }
  }, props.innerProps), props.children);
}

function Placeholder(props) {
  if (props.children === 'Select...') return null;
  if (props.selectProps.TextFieldProps && props.selectProps.TextFieldProps.label) return null;
  return React.createElement(Typography, _extends({
    color: "textSecondary",
    className: props.selectProps.classes.placeholder
  }, props.innerProps), props.children);
}

function ValueContainer(props) {
  return React.createElement("div", {
    className: props.selectProps.classes.valueContainer
  }, props.children);
}

function SingleValue(props) {
  return React.createElement(Typography, _extends({
    className: props.selectProps.classes.singleValue
  }, props.innerProps), props.children);
}

function MultiValue(props) {
  return React.createElement(Chip, _extends({}, props.selectProps.ChipProps, {
    tabIndex: -1,
    label: props.children,
    className: classNames(props.selectProps.classes.chip, _defineProperty({}, props.selectProps.classes.chipFocused, props.isFocused)),
    onDelete: props.removeProps.onClick,
    deleteIcon: React.createElement(CancelIcon, _extends({
      fontSize: "small"
    }, props.removeProps))
  }));
}

function Menu(props) {
  return React.createElement(Paper, _extends({
    square: true,
    className: props.selectProps.classes.paper
  }, props.innerProps), props.children);
}

var ClearIndicator = function ClearIndicator(props) {
  return components.DropdownIndicator && React.createElement(components.ClearIndicator, _extends({
    className: props.selectProps.classes.indicator
  }, props));
};

var DropdownIndicator = function DropdownIndicator(props) {
  return components.DropdownIndicator && React.createElement(components.DropdownIndicator, _extends({
    className: props.selectProps.classes.indicator
  }, props));
};

var IndicatorSeparator = function IndicatorSeparator(_ref3) {
  var innerProps = _ref3.innerProps,
      getStyles = _ref3.getStyles;
  return React.createElement("span", _extends({
    style: {
      alignSelf: 'stretch',
      backgroundColor: 'hsl(0,0%,80%)',
      marginBottom: 4,
      marginTop: 4,
      width: 1
    }
  }, innerProps));
};

var AutoComplete =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AutoComplete, _React$Component);

  function AutoComplete() {
    _classCallCheck(this, AutoComplete);

    return _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).apply(this, arguments));
  }

  _createClass(AutoComplete, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          classes = _this$props.classes,
          theme = _this$props.theme,
          components = _this$props.components,
          other = _objectWithoutProperties(_this$props, ["classes", "theme", "components"]);

      var selectStyles = {
        input: function input(base) {
          return _objectSpread({}, base, {
            color: theme.palette.text.primary,
            '& input': {
              font: 'inherit'
            }
          });
        }
      };
      return React.createElement(Select, _extends({
        classes: classes,
        styles: selectStyles,
        components: _objectSpread({
          Control: Control,
          ClearIndicator: ClearIndicator,
          DropdownIndicator: DropdownIndicator,
          IndicatorSeparator: IndicatorSeparator,
          Menu: Menu,
          NoOptionsMessage: NoOptionsMessage,
          Option: Option,
          Placeholder: Placeholder,
          ValueContainer: ValueContainer,
          SingleValue: SingleValue,
          MultiValue: MultiValue
        }, components)
      }, other));
    }
  }]);

  return AutoComplete;
}(React.Component);

AutoComplete.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object.isRequired,

  /**
   * It includes all theming settings.
   */
  theme: PropTypes.object.isRequired,

  /**
   * react-select props to customize components
   */
  components: PropTypes.object
};
export default withStyles(styles, {
  withTheme: true
})(AutoComplete);