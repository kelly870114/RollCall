import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { fieldInputPropTypes } from 'redux-form';
import AutoComplete from '../AutoComplete';

var AutoCompleteField =
/*#__PURE__*/
function (_Component) {
  _inherits(AutoCompleteField, _Component);

  function AutoCompleteField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AutoCompleteField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoCompleteField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleChange = function (option) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          input = _this$props.input;

      if (onChange) {
        onChange(option, _this.props);
      } else {
        input.onChange(option);
      }
    };

    return _this;
  }

  _createClass(AutoCompleteField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          input = _this$props2.input,
          label = _this$props2.label,
          rest = _objectWithoutProperties(_this$props2, ["input", "label"]);

      return React.createElement(AutoComplete, _extends({
        onChange: this.handleChange,
        value: input.value
      }, rest));
    }
  }]);

  return AutoCompleteField;
}(Component);

AutoCompleteField.propTypes = {
  // redux form props
  input: PropTypes.shape(fieldInputPropTypes),

  /** Callback function that triggers when the search text value has changed.
   * function(option: object) => void */
  onChange: PropTypes.func
};
export { AutoCompleteField as default };