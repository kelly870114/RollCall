import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import withStyles from '@material-ui/core/styles/withStyles';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Collapse from '@material-ui/core/Collapse';
import ExpandLess from '@material-ui/icons/ExpandLess';
import ExpandMore from '@material-ui/icons/ExpandMore';
import styles from './styles';

var SideMenuItem =
/*#__PURE__*/
function (_Component) {
  _inherits(SideMenuItem, _Component);

  function SideMenuItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SideMenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SideMenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      open: false
    };

    _this.handleClick = function () {
      _this.setState(function (state) {
        return {
          open: !state.open
        };
      });
    };

    return _this;
  }

  _createClass(SideMenuItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          classes = _this$props.classes,
          icon = _this$props.icon,
          items = _this$props.items,
          ListItemProps = _this$props.ListItemProps,
          ListItemIconProps = _this$props.ListItemIconProps,
          ListItemTextProps = _this$props.ListItemTextProps;

      if (items) {
        return React.createElement(React.Fragment, null, React.createElement(ListItem, _extends({
          onClick: this.handleClick
        }, ListItemProps), icon && React.createElement(ListItemIcon, ListItemIconProps, icon), React.createElement(ListItemText, ListItemTextProps), this.state.open ? React.createElement(ExpandLess, null) : React.createElement(ExpandMore, null)), React.createElement(Collapse, {
          in: this.state.open,
          timeout: "auto",
          unmountOnExit: true
        }, React.createElement(List, {
          disablePadding: true
        }, items.map(function (item, index) {
          return React.createElement(ListItem, _extends({
            key: index,
            className: classes.nested
          }, item.ListItemProps), React.createElement(ListItemText, item.ListItemTextProps));
        }))));
      }

      return React.createElement(ListItem, ListItemProps, icon && React.createElement(ListItemIcon, ListItemIconProps, icon), React.createElement(ListItemText, ListItemTextProps));
    }
  }]);

  return SideMenuItem;
}(Component);

SideMenuItem.propTypes = {
  // react-material props
  classes: PropTypes.object.isRequired,
  // customized props
  ListItemProps: PropTypes.object,
  ListItemIconProps: PropTypes.object,
  ListItemTextProps: PropTypes.object.isRequired,
  icon: PropTypes.node,
  items: ImmutablePropTypes.list
};
export default withStyles(styles)(SideMenuItem);