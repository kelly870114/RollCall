import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { fieldInputPropTypes, fieldMetaPropTypes } from 'redux-form';
import TextField from '@material-ui/core/TextField';
import MenuItem from '@material-ui/core/MenuItem';

var SelectField =
/*#__PURE__*/
function (_Component) {
  _inherits(SelectField, _Component);

  function SelectField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SelectField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleChange = function (e) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          input = _this$props.input;

      if (onChange) {
        onChange(e, _this.props);
      } else {
        input.onChange(e.target.value);
      }
    };

    return _this;
  }

  _createClass(SelectField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          input = _this$props2.input,
          _this$props2$meta = _this$props2.meta,
          touched = _this$props2$meta.touched,
          error = _this$props2$meta.error,
          invalid = _this$props2$meta.invalid,
          options = _this$props2.options,
          SelectProps = _this$props2.SelectProps,
          rest = _objectWithoutProperties(_this$props2, ["input", "meta", "options", "SelectProps"]);

      return React.createElement(TextField, _extends({
        error: touched && invalid,
        helperText: touched && error,
        select: true
      }, input, rest), options.map(function (_ref, i) {
        var text = _ref.text,
            rest = _objectWithoutProperties(_ref, ["text"]);

        return React.createElement(MenuItem, _extends({
          key: i
        }, rest), text);
      }));
    }
  }]);

  return SelectField;
}(Component);

SelectField.propTypes = {
  // redux form props
  input: PropTypes.shape(fieldInputPropTypes).isRequired,
  meta: PropTypes.shape(fieldMetaPropTypes).isRequired,
  // customize props
  options: PropTypes.array.isRequired,
  onChange: PropTypes.func
};
export { SelectField as default };