import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { IntlProvider } from 'react-intl';
import parseToIntlLang from './parseToIntlLang';
export var IntlControlContext = React.createContext();

var IntlControlProvider =
/*#__PURE__*/
function (_Component) {
  _inherits(IntlControlProvider, _Component);

  function IntlControlProvider(props) {
    var _this;

    _classCallCheck(this, IntlControlProvider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(IntlControlProvider).call(this, props));

    _this.setLocale = function (locale) {
      return _this.setState({
        locale: locale
      });
    };

    _this.setMessages = function (messages) {
      return _this.setState({
        messages: messages
      });
    };

    _this.state = {
      locale: navigator.language.toLowerCase(),
      messages: props.messages
    };
    return _this;
  }

  _createClass(IntlControlProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var locale = this.state.locale;
      var onMount = this.props.onMount;

      if (onMount) {
        onMount(locale);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var locale = this.state.locale;
      var onUpdateLocale = this.props.onUpdateLocale;

      if (prevState.locale !== locale) {
        if (onUpdateLocale) {
          onUpdateLocale(locale, this.setMessages);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          locale = _this$state.locale,
          messages = _this$state.messages;
      return React.createElement(IntlControlContext.Provider, {
        value: {
          setLocale: this.setLocale,
          setMessages: this.setMessages,
          locale: locale
        }
      }, React.createElement(IntlProvider, {
        locale: parseToIntlLang(locale),
        key: locale,
        messages: messages
      }, this.props.children));
    }
  }]);

  return IntlControlProvider;
}(Component);

IntlControlProvider.contextType = IntlControlContext;
IntlControlProvider.propTypes = {
  /** Callback function that triggers when component mount and
   * usually use to load third part library locale e.g., moment.
   * function(locale: string) => void */
  onMount: PropTypes.func,

  /** Callback function that triggers when locale changed.
   * function(locale: string) => void */
  onUpdateLocale: PropTypes.func,

  /**
   * Initialize IntlProvider with messages.
   */
  messages: PropTypes.object
};
export { IntlControlProvider as default };