import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { fieldInputPropTypes, fieldMetaPropTypes } from 'redux-form';
import MUITextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CircularProgress from '@material-ui/core/CircularProgress';

var TextField =
/*#__PURE__*/
function (_Component) {
  _inherits(TextField, _Component);

  function TextField() {
    _classCallCheck(this, TextField);

    return _possibleConstructorReturn(this, _getPrototypeOf(TextField).apply(this, arguments));
  }

  _createClass(TextField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          input = _this$props.input,
          _this$props$meta = _this$props.meta,
          touched = _this$props$meta.touched,
          error = _this$props$meta.error,
          invalid = _this$props$meta.invalid,
          asyncValidating = _this$props$meta.asyncValidating,
          rest = _objectWithoutProperties(_this$props, ["input", "meta"]); // return loading progress


      if (asyncValidating) {
        return React.createElement(MUITextField, _extends({
          error: touched && invalid,
          helperText: touched && error
        }, input, {
          InputProps: _objectSpread({
            endAdornment: React.createElement(InputAdornment, {
              position: "end"
            }, React.createElement(CircularProgress, {
              size: 20
            }))
          }, rest.InputProps)
        }, rest));
      }

      return React.createElement(MUITextField, _extends({
        error: touched && invalid,
        helperText: touched && error
      }, input, rest));
    }
  }]);

  return TextField;
}(Component);

TextField.propTypes = {
  // redux form props
  input: PropTypes.shape(fieldInputPropTypes).isRequired,
  meta: PropTypes.shape(fieldMetaPropTypes).isRequired
};
export { TextField as default };