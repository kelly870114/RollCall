import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { fromJS, isImmutable } from 'immutable';
import { fieldInputPropTypes, fieldMetaPropTypes } from 'redux-form';
import CheckboxInput from '../CheckboxInput';
/**
 * A component with Input Field when it checked
 */

var CheckboxInputField =
/*#__PURE__*/
function (_Component) {
  _inherits(CheckboxInputField, _Component);

  function CheckboxInputField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, CheckboxInputField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckboxInputField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this._handleChange = function (e) {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        input.onChange(input.value.set('checked', e.target.checked));
      } else {
        input.onChange(fromJS({
          checked: e.target.checked
        }));
      }
    };

    _this._handleInputChange = function (e) {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        input.onChange(input.value.set('text', e.target.value));
      } else {
        input.onChange(fromJS({
          text: e.target.value
        }));
      }
    };

    _this._parseChecked = function () {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        return input.value.get('checked');
      }

      return false;
    };

    _this._parseText = function () {
      var input = _this.props.input;

      if (isImmutable(input.value)) {
        return input.value.get('text');
      }

      return '';
    };

    return _this;
  }

  _createClass(CheckboxInputField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          input = _this$props.input,
          meta = _this$props.meta,
          onChange = _this$props.onChange,
          checked = _this$props.checked,
          MUIInputProps = _this$props.MUIInputProps,
          other = _objectWithoutProperties(_this$props, ["input", "meta", "onChange", "checked", "MUIInputProps"]);

      var _ref = MUIInputProps || {},
          onChangeProp = _ref.onChange,
          valueProp = _ref.value,
          otherMUIInputProps = _objectWithoutProperties(_ref, ["onChange", "value"]);

      return React.createElement(CheckboxInput, _extends({
        onChange: this._handleChange,
        checked: this._parseChecked(),
        MUIInputProps: _objectSpread({
          onChange: this._handleInputChange,
          value: this._parseText()
        }, otherMUIInputProps)
      }, other));
    }
  }]);

  return CheckboxInputField;
}(Component);

CheckboxInputField.propTypes = {
  // redux form props
  input: PropTypes.shape(fieldInputPropTypes).isRequired,
  meta: PropTypes.shape(fieldMetaPropTypes).isRequired,
  // customize props
  MUIInputProps: PropTypes.object
};
export { CheckboxInputField as default };