import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import withStyles from '@material-ui/core/styles/withStyles';
import Input from '@material-ui/core/Input';
import Checkbox from '../Checkbox';
import styles from './styles';
export var CheckboxInputComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(CheckboxInputComponent, _Component);

  function CheckboxInputComponent(props) {
    var _this;

    _classCallCheck(this, CheckboxInputComponent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxInputComponent).call(this));

    _this._handleCheckboxChange = function (e) {
      _this.setState({
        _checked: e.target.checked
      });
    };

    _this.isControlled = props.checked !== undefined;
    _this.state = {};

    if (!_this.isControlled) {
      // not controlled, use internal state
      _this.state._checked = props.defaultChecked !== undefined ? props.defaultChecked : false;
    }

    return _this;
  }

  _createClass(CheckboxInputComponent, [{
    key: "render",
    value: function render() {
      var _checked = this.state._checked;

      var _this$props = this.props,
          classes = _this$props.classes,
          checkedProp = _this$props.checked,
          onChangeProp = _this$props.onChange,
          MUIInputProps = _this$props.MUIInputProps,
          toggleInput = _this$props.toggleInput,
          other = _objectWithoutProperties(_this$props, ["classes", "checked", "onChange", "MUIInputProps", "toggleInput"]);

      var _ref = MUIInputProps || {},
          InputClassName = _ref.className,
          otherMUIInputProps = _objectWithoutProperties(_ref, ["className"]);

      var onChange = this.isControlled ? onChangeProp : this._handleCheckboxChange;
      var checked = this.isControlled ? checkedProp : _checked;
      return React.createElement(React.Fragment, null, React.createElement(Checkbox, _extends({
        checked: checked,
        onChange: onChange
      }, other)), toggleInput && checked && React.createElement(Input, _extends({
        className: classNames(classes.inputRoot, InputClassName)
      }, otherMUIInputProps)));
    }
  }]);

  return CheckboxInputComponent;
}(Component);
CheckboxInputComponent.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object.isRequired,

  /**
   * If checked is not null component will be controlled external.
   */
  checked: PropTypes.bool,

  /**
   * If not controlled, use internal state.
   */
  onChange: PropTypes.func,

  /**
   * MUI Input Props
   */
  MUIInputProps: PropTypes.object,

  /**
   * @ignore
   */
  defaultChecked: PropTypes.bool,

  /**
   * Enable show/hide input if checked/unchecked.
   */
  toggleInput: PropTypes.bool
};
var CheckboxInput = withStyles(styles)(CheckboxInputComponent);
CheckboxInput.displayName = 'CheckboxInput';
export default CheckboxInput;