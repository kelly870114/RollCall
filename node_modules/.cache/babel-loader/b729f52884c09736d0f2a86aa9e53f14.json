{"ast":null,"code":"'use strict';\n\nvar isPlainObject = require('lodash/isPlainObject');\n\nvar assign = require('lodash/assign');\n\nvar forEach = require('lodash/forEach');\n\nvar map = require('lodash/map');\n\nvar assert = require('assert');\n\nvar AirtableError = require('./airtable_error');\n\nvar Class = require('./class');\n\nvar deprecate = require('./deprecate');\n\nvar Query = require('./query');\n\nvar Record = require('./record');\n\nvar callbackToPromise = require('./callback_to_promise');\n\nvar Table = Class.extend({\n  init: function init(base, tableId, tableName) {\n    this._base = base;\n    assert(tableId || tableName, 'Table name or table ID is required');\n    this.id = tableId;\n    this.name = tableName; // Public API\n\n    this.find = callbackToPromise(this._findRecordById, this);\n    this.select = this._selectRecords.bind(this);\n    this.create = callbackToPromise(this._createRecord, this);\n    this.update = callbackToPromise(this._updateRecord, this);\n    this.destroy = callbackToPromise(this._destroyRecord, this);\n    this.replace = callbackToPromise(this._replaceRecord, this); // Deprecated API\n\n    this.list = deprecate(this._listRecords.bind(this), 'table.list', 'Airtable: `list()` is deprecated. Use `select()` instead.');\n    this.forEach = deprecate(this._forEachRecord.bind(this), 'table.forEach', 'Airtable: `forEach()` is deprecated. Use `select()` instead.');\n  },\n  _findRecordById: function _findRecordById(recordId, done) {\n    var record = new Record(this, recordId);\n    record.fetch(done);\n  },\n  _selectRecords: function _selectRecords(params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (arguments.length > 1) {\n      console.warn('Airtable: `select` takes only one parameter, but it was given ' + arguments.length + ' parameters. ' + 'Use `eachPage` or `firstPage` to fetch records.');\n    }\n\n    if (isPlainObject(params)) {\n      var validationResults = Query.validateParams(params);\n\n      if (validationResults.errors.length) {\n        var formattedErrors = map(validationResults.errors, function (error) {\n          return '  * ' + error;\n        });\n        assert(false, 'Airtable: invalid parameters for `select`:\\n' + formattedErrors.join('\\n'));\n      }\n\n      if (validationResults.ignoredKeys.length) {\n        console.warn('Airtable: the following parameters to `select` will be ignored: ' + validationResults.ignoredKeys.join(', '));\n      }\n\n      return new Query(this, validationResults.validParams);\n    } else {\n      assert(false, 'Airtable: the parameter for `select` should be a plain object or undefined.');\n    }\n  },\n  _urlEncodedNameOrId: function _urlEncodedNameOrId() {\n    return this.id || encodeURIComponent(this.name);\n  },\n  _createRecord: function _createRecord(recordData, optionalParameters, done) {\n    var that = this;\n\n    if (!done) {\n      done = optionalParameters;\n      optionalParameters = {};\n    }\n\n    var requestData = assign({\n      fields: recordData\n    }, optionalParameters);\n\n    this._base.runAction('post', '/' + that._urlEncodedNameOrId() + '/', {}, requestData, function (err, resp, body) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var record = new Record(that, body.id, body);\n      done(null, record);\n    });\n  },\n  _updateRecord: function _updateRecord(recordId, recordData, opts, done) {\n    var record = new Record(this, recordId);\n\n    if (!done) {\n      done = opts;\n      record.patchUpdate(recordData, done);\n    } else {\n      record.patchUpdate(recordData, opts, done);\n    }\n  },\n  _replaceRecord: function _replaceRecord(recordId, recordData, opts, done) {\n    var record = new Record(this, recordId);\n\n    if (!done) {\n      done = opts;\n      record.putUpdate(recordData, done);\n    } else {\n      record.putUpdate(recordData, opts, done);\n    }\n  },\n  _destroyRecord: function _destroyRecord(recordId, done) {\n    var record = new Record(this, recordId);\n    record.destroy(done);\n  },\n  _listRecords: function _listRecords(limit, offset, opts, done) {\n    var that = this;\n\n    if (!done) {\n      done = opts;\n      opts = {};\n    }\n\n    var listRecordsParameters = assign({\n      limit: limit,\n      offset: offset\n    }, opts);\n\n    this._base.runAction('get', '/' + this._urlEncodedNameOrId() + '/', listRecordsParameters, null, function (err, response, results) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var records = map(results.records, function (recordJson) {\n        return new Record(that, null, recordJson);\n      });\n      done(null, records, results.offset);\n    });\n  },\n  _forEachRecord: function _forEachRecord(opts, callback, done) {\n    if (arguments.length === 2) {\n      done = callback;\n      callback = opts;\n      opts = {};\n    }\n\n    var that = this;\n    var limit = Table.__recordsPerPageForIteration || 100;\n    var offset = null;\n\n    var nextPage = function nextPage() {\n      that._listRecords(limit, offset, opts, function (err, page, newOffset) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        forEach(page, callback);\n\n        if (newOffset) {\n          offset = newOffset;\n          nextPage();\n        } else {\n          done();\n        }\n      });\n    };\n\n    nextPage();\n  }\n});\nmodule.exports = Table;","map":null,"metadata":{},"sourceType":"script"}