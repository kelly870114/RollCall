{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\src\\\\components\\\\Classpage\\\\Progresspage.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Upload from '@material-ui/icons/CreateNewFolderRounded';\nimport { withStyles } from '@material-ui/core/styles'; // import { fromJS, List, Map } from 'immutable'\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport XLSX from 'xlsx';\n\nvar styles = function styles(theme) {\n  return {\n    button: {\n      backgroundColor: '#111B24',\n      color: 'white'\n    },\n    UploadIcon: {\n      margin: '0 auto'\n    },\n    input: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      left: 0,\n      outline: 'none',\n      opacity: 0\n    },\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n      overflowX: 'auto',\n      backgroundColor: '#212832',\n      border: 'white 1px solid'\n    },\n    head: {\n      fontSize: '14pt',\n      color: '#FFBF5F'\n    },\n    content: {\n      fontSize: '14pt'\n    },\n    editButton: {\n      border: '#FFBF5F 1px solid',\n      float: 'right',\n      marginLeft: theme.spacing.unit * 2\n    }\n  };\n};\n\nvar id = 0;\n\nfunction createData(date, origin, real) {\n  id += 1;\n  return {\n    id: id,\n    date: date,\n    origin: origin,\n    real: real\n  };\n}\n\nvar Progresspage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Progresspage, _Component);\n\n  function Progresspage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Progresspage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Progresspage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      rows: []\n    };\n\n    _this.onImportExcel = function (file) {\n      var files = file.target.files;\n      var fileReader = new FileReader();\n\n      fileReader.onload = function (event) {\n        try {\n          var result = event.target.result;\n          var workbook = XLSX.read(result, {\n            type: 'binary'\n          });\n          var data = [];\n\n          for (var sheet in workbook.Sheets) {\n            if (workbook.Sheets.hasOwnProperty(sheet)) {\n              data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet])); // break;\n            }\n          }\n\n          _this.setState({\n            data: data\n          });\n\n          var progress_date = _this.state.data.map(function (data, index) {\n            return data['progress_date'];\n          });\n\n          var progress_origin = _this.state.data.map(function (data, index) {\n            return data['progress_origin'];\n          });\n\n          var progress_real = _this.state.data.map(function (data, index) {\n            return data['progress_real'];\n          });\n\n          for (var index = 0; index < id; index++) {\n            data.push(createData(progress_date[index], progress_origin[index], progress_real[index]));\n          }\n\n          _this.setState({\n            rows: data\n          });\n\n          console.log(data);\n          console.log(data[0]);\n          console.log(data[0].date);\n          console.log(data[0].origin);\n        } catch (e) {// message.error('文件類型不正确！');\n        }\n      };\n\n      fileReader.readAsBinaryString(files[0]);\n    };\n\n    return _this;\n  }\n\n  _createClass(Progresspage, [{\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      var rows = this.state.rows;\n      return React.createElement(\"div\", {\n        style: {\n          borderColor: '#FFBF5F'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: classes.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Upload, {\n        type: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: classes.input,\n        type: \"file\",\n        accept: \".xlsx, .xls\",\n        onChange: this.onImportExcel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"\\u532F\\u5165\\u6559\\u5B78\\u9032\\u5EA6\")), React.createElement(Button, {\n        className: classes.editButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"\\u5132\\u5B58\"), React.createElement(Button, {\n        className: classes.editButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"\\u7DE8\\u8F2F\"), React.createElement(Paper, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"\\u65E5\\u671F\"), React.createElement(TableCell, {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"\\u9810\\u5148\\u6392\\u5B9A\\u9032\\u5EA6\"), React.createElement(TableCell, {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"\\u5BE6\\u969B\\u6559\\u6388\\u9032\\u5EA6\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, rows.map(function (row) {\n        return React.createElement(TableRow, {\n          key: row.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          className: classes.content,\n          style: {\n            width: '20%'\n          },\n          component: \"th\",\n          scope: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, row.date), React.createElement(TableCell, {\n          className: classes.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, row.origin), React.createElement(TableCell, {\n          className: classes.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, row.real));\n      })))));\n    }\n  }]);\n\n  return Progresspage;\n}(Component);\n\nexport default withStyles(styles)(Progresspage);\n{\n  /* {\r\n                     data.length ?\r\n                         <ul>\r\n                             {data.map((el, index) => (\r\n                                 <li key={index}>{el.name}</li>\r\n                             ))}\r\n                         </ul> :\r\n                         <div>\r\n                             <input\r\n                                 accept=\"image/*\"\r\n                                 className={classes.input}\r\n                                 id=\"contained-button-file\"\r\n                                 multiple\r\n                                 type=\"file\"\r\n                             />\r\n                             <label htmlFor=\"contained-button-file\">\r\n                                 <Button variant=\"contained\" component=\"span\" className={classes.button}>\r\n                                     <Upload className={classes.UploadIcon} />\r\n                                     匯入學生資料\r\n                         </Button>\r\n                             </label>\r\n                         </div>\r\n                 } */\n}","map":{"version":3,"sources":["C:\\Users\\耍廢社\\Desktop\\MyProject\\src\\components\\Classpage\\Progresspage.js"],"names":["React","Component","Button","Upload","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","XLSX","styles","theme","button","backgroundColor","color","UploadIcon","margin","input","position","width","height","top","left","outline","opacity","root","marginTop","spacing","unit","overflowX","border","head","fontSize","content","editButton","float","marginLeft","id","createData","date","origin","real","Progresspage","state","rows","onImportExcel","file","files","target","fileReader","FileReader","onload","event","result","workbook","read","type","data","sheet","Sheets","hasOwnProperty","concat","utils","sheet_to_json","setState","progress_date","map","index","progress_origin","progress_real","push","console","log","e","readAsBinaryString","classes","props","borderColor","table","row"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,MAAM,EAAE;AACJC,MAAAA,eAAe,EAAE,SADb;AAEJC,MAAAA,KAAK,EAAE;AAFH,KADa;AAKrBC,IAAAA,UAAU,EAAE;AACRC,MAAAA,MAAM,EAAE;AADA,KALS;AAQrBC,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAE,UADP;AAEHC,MAAAA,KAAK,EAAE,MAFJ;AAGHC,MAAAA,MAAM,EAAE,MAHL;AAIHC,MAAAA,GAAG,EAAE,CAJF;AAKHC,MAAAA,IAAI,EAAE,CALH;AAMHC,MAAAA,OAAO,EAAE,MANN;AAOHC,MAAAA,OAAO,EAAE;AAPN,KARc;AAiBrBC,IAAAA,IAAI,EAAE;AACFN,MAAAA,KAAK,EAAE,MADL;AAEFO,MAAAA,SAAS,EAAEf,KAAK,CAACgB,OAAN,CAAcC,IAAd,GAAqB,CAF9B;AAGFC,MAAAA,SAAS,EAAE,MAHT;AAIFhB,MAAAA,eAAe,EAAC,SAJd;AAKFiB,MAAAA,MAAM,EAAC;AALL,KAjBe;AAwBrBC,IAAAA,IAAI,EAAC;AACDC,MAAAA,QAAQ,EAAC,MADR;AAEDlB,MAAAA,KAAK,EAAC;AAFL,KAxBgB;AA4BrBmB,IAAAA,OAAO,EAAE;AACLD,MAAAA,QAAQ,EAAE;AADL,KA5BY;AA+BrBE,IAAAA,UAAU,EAAC;AACPJ,MAAAA,MAAM,EAAC,mBADA;AAEPK,MAAAA,KAAK,EAAC,OAFC;AAGPC,MAAAA,UAAU,EAAEzB,KAAK,CAACgB,OAAN,CAAcC,IAAd,GAAqB;AAH1B;AA/BU,GAAL;AAAA,CAApB;;AAsCA,IAAIS,EAAE,GAAG,CAAT;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACpCJ,EAAAA,EAAE,IAAI,CAAN;AACA,SAAO;AAAEA,IAAAA,EAAE,EAAFA,EAAF;AAAME,IAAAA,IAAI,EAAJA,IAAN;AAAYC,IAAAA,MAAM,EAANA,MAAZ;AAAoBC,IAAAA,IAAI,EAAJA;AAApB,GAAP;AACH;;IAEKC,Y;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAE;AADF,K;;UAIRC,a,GAAgB,UAAAC,IAAI,EAAI;AAAA,UACZC,KADY,GACFD,IAAI,CAACE,MADH,CACZD,KADY;AAEpB,UAAME,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,MAAAA,UAAU,CAACE,MAAX,GAAoB,UAAAC,KAAK,EAAI;AACzB,YAAI;AAAA,cACQC,MADR,GACmBD,KAAK,CAACJ,MADzB,CACQK,MADR;AAEA,cAAMC,QAAQ,GAAG7C,IAAI,CAAC8C,IAAL,CAAUF,MAAV,EAAkB;AAAEG,YAAAA,IAAI,EAAE;AAAR,WAAlB,CAAjB;AACA,cAAIC,IAAI,GAAG,EAAX;;AACA,eAAK,IAAMC,KAAX,IAAoBJ,QAAQ,CAACK,MAA7B,EAAqC;AACjC,gBAAIL,QAAQ,CAACK,MAAT,CAAgBC,cAAhB,CAA+BF,KAA/B,CAAJ,EAA2C;AACvCD,cAAAA,IAAI,GAAGA,IAAI,CAACI,MAAL,CAAYpD,IAAI,CAACqD,KAAL,CAAWC,aAAX,CAAyBT,QAAQ,CAACK,MAAT,CAAgBD,KAAhB,CAAzB,CAAZ,CAAP,CADuC,CAEvC;AACH;AACJ;;AACD,gBAAKM,QAAL,CAAc;AAAEP,YAAAA,IAAI,EAAJA;AAAF,WAAd;;AACA,cAAMQ,aAAa,GAAG,MAAKtB,KAAL,CAAWc,IAAX,CAAgBS,GAAhB,CAAoB,UAACT,IAAD,EAAOU,KAAP;AAAA,mBAAiBV,IAAI,CAAC,eAAD,CAArB;AAAA,WAApB,CAAtB;;AACA,cAAMW,eAAe,GAAG,MAAKzB,KAAL,CAAWc,IAAX,CAAgBS,GAAhB,CAAoB,UAACT,IAAD,EAAOU,KAAP;AAAA,mBAAiBV,IAAI,CAAC,iBAAD,CAArB;AAAA,WAApB,CAAxB;;AACA,cAAMY,aAAa,GAAG,MAAK1B,KAAL,CAAWc,IAAX,CAAgBS,GAAhB,CAAoB,UAACT,IAAD,EAAOU,KAAP;AAAA,mBAAiBV,IAAI,CAAC,eAAD,CAArB;AAAA,WAApB,CAAtB;;AACA,eAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG9B,EAA5B,EAAgC8B,KAAK,EAArC,EAAyC;AACrCV,YAAAA,IAAI,CAACa,IAAL,CAAUhC,UAAU,CAAC2B,aAAa,CAACE,KAAD,CAAd,EAAuBC,eAAe,CAACD,KAAD,CAAtC,EAA+CE,aAAa,CAACF,KAAD,CAA5D,CAApB;AAEH;;AAED,gBAAKH,QAAL,CAAc;AAAEpB,YAAAA,IAAI,EAAEa;AAAR,WAAd;;AACAc,UAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACAc,UAAAA,OAAO,CAACC,GAAR,CAAYf,IAAI,CAAC,CAAD,CAAhB;AACAc,UAAAA,OAAO,CAACC,GAAR,CAAYf,IAAI,CAAC,CAAD,CAAJ,CAAQlB,IAApB;AACAgC,UAAAA,OAAO,CAACC,GAAR,CAAYf,IAAI,CAAC,CAAD,CAAJ,CAAQjB,MAApB;AACH,SAxBD,CAwBE,OAAOiC,CAAP,EAAU,CACR;AACH;AACJ,OA5BD;;AA6BAxB,MAAAA,UAAU,CAACyB,kBAAX,CAA8B3B,KAAK,CAAC,CAAD,CAAnC;AACH,K;;;;;;;6BACQ;AAAA,UAEG4B,OAFH,GAEe,KAAKC,KAFpB,CAEGD,OAFH;AAAA,UAGG/B,IAHH,GAGY,KAAKD,KAHjB,CAGGC,IAHH;AAKL,aACI;AAAK,QAAA,KAAK,EAAE;AAAEiC,UAAAA,WAAW,EAAE;AAAf,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAEF,OAAO,CAAC/D,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,SAAS,EAAE+D,OAAO,CAAC1D,KAA1B;AAAiC,QAAA,IAAI,EAAC,MAAtC;AAA6C,QAAA,MAAM,EAAC,aAApD;AAAkE,QAAA,QAAQ,EAAE,KAAK4B,aAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAHJ,CADJ,EAMI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE8B,OAAO,CAACzC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,EASI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAEyC,OAAO,CAACzC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATJ,EAYI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEyC,OAAO,CAAClD,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEkD,OAAO,CAACG,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAEH,OAAO,CAAC5C,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE4C,OAAO,CAAC5C,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAFJ,EAGI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE4C,OAAO,CAAC5C,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAHJ,CADJ,CADJ,EAQI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKa,IAAI,CAACsB,GAAL,CAAS,UAAAa,GAAG;AAAA,eACT,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,GAAG,CAAC1C,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAEsC,OAAO,CAAC1C,OAA9B;AAAuC,UAAA,KAAK,EAAE;AAAEd,YAAAA,KAAK,EAAE;AAAT,WAA9C;AAAgE,UAAA,SAAS,EAAC,IAA1E;AAA+E,UAAA,KAAK,EAAC,KAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4F4D,GAAG,CAACxC,IAAhG,CADJ,EAEI,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAEoC,OAAO,CAAC1C,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwC8C,GAAG,CAACvC,MAA5C,CAFJ,EAGI,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAEmC,OAAO,CAAC1C,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwC8C,GAAG,CAACtC,IAA5C,CAHJ,CADS;AAAA,OAAZ,CADL,CARJ,CADJ,CAZJ,CADJ;AAoCH;;;;EAhFsB1C,S;;AAmF3B,eAAeG,UAAU,CAACQ,MAAD,CAAV,CAAmBgC,YAAnB,CAAf;AAGA;AAAC;;;;;;;;;;;;;;;;;;;;;;;AAsBoB","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Upload from '@material-ui/icons/CreateNewFolderRounded';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { fromJS, List, Map } from 'immutable'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport XLSX from 'xlsx';\r\n\r\nconst styles = theme => ({\r\n    button: {\r\n        backgroundColor: '#111B24',\r\n        color: 'white',\r\n    },\r\n    UploadIcon: {\r\n        margin: '0 auto',\r\n    },\r\n    input: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        top: 0,\r\n        left: 0,\r\n        outline: 'none',\r\n        opacity: 0,\r\n    },\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing.unit * 3,\r\n        overflowX: 'auto',\r\n        backgroundColor:'#212832',\r\n        border:'white 1px solid',\r\n    },\r\n    head:{\r\n        fontSize:'14pt',\r\n        color:'#FFBF5F',\r\n    },\r\n    content: {\r\n        fontSize: '14pt',\r\n    },\r\n    editButton:{\r\n        border:'#FFBF5F 1px solid',\r\n        float:'right',\r\n        marginLeft: theme.spacing.unit * 2,\r\n    }\r\n});\r\n\r\nlet id = 0;\r\nfunction createData(date, origin, real) {\r\n    id += 1;\r\n    return { id, date, origin, real };\r\n}\r\n\r\nclass Progresspage extends Component {\r\n    state = {\r\n        rows: [],\r\n    }\r\n\r\n    onImportExcel = file => {\r\n        const { files } = file.target;\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = event => {\r\n            try {\r\n                const { result } = event.target;\r\n                const workbook = XLSX.read(result, { type: 'binary' });\r\n                let data = [];\r\n                for (const sheet in workbook.Sheets) {\r\n                    if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n                        data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\r\n                        // break;\r\n                    }\r\n                }\r\n                this.setState({ data });\r\n                const progress_date = this.state.data.map((data, index) => data['progress_date']);\r\n                const progress_origin = this.state.data.map((data, index) => data['progress_origin']);\r\n                const progress_real = this.state.data.map((data, index) => data['progress_real']);\r\n                for (var index = 0; index < id; index++) {\r\n                    data.push(createData(progress_date[index], progress_origin[index], progress_real[index]));\r\n\r\n                }\r\n\r\n                this.setState({ rows: data });\r\n                console.log(data);\r\n                console.log(data[0]);\r\n                console.log(data[0].date);\r\n                console.log(data[0].origin);\r\n            } catch (e) {\r\n                // message.error('文件類型不正确！');\r\n            }\r\n        };\r\n        fileReader.readAsBinaryString(files[0]);\r\n    }\r\n    render() {\r\n\r\n        const { classes } = this.props;\r\n        const { rows } = this.state;\r\n\r\n        return (\r\n            <div style={{ borderColor: '#FFBF5F' }}>\r\n                <Button className={classes.button}>\r\n                    <Upload type='upload' />\r\n                    <input className={classes.input} type='file' accept='.xlsx, .xls' onChange={this.onImportExcel} />\r\n                    <span>匯入教學進度</span>\r\n                </Button>\r\n                <Button className={classes.editButton}>\r\n                    儲存\r\n                </Button>\r\n                <Button className={classes.editButton}>\r\n                    編輯\r\n                </Button>\r\n                <Paper className={classes.root}>\r\n                    <Table className={classes.table}>\r\n                        <TableHead >\r\n                            <TableRow>\r\n                                <TableCell className={classes.head}>日期</TableCell>\r\n                                <TableCell className={classes.head} >預先排定進度</TableCell>\r\n                                <TableCell className={classes.head} >實際教授進度</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell className={classes.content} style={{ width: '20%' }} component=\"th\" scope=\"row\">{row.date}</TableCell>\r\n                                    <TableCell className={classes.content}>{row.origin}</TableCell>\r\n                                    <TableCell className={classes.content}>{row.real}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Paper>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Progresspage);\r\n\r\n\r\n{/* {\r\n                    data.length ?\r\n                        <ul>\r\n                            {data.map((el, index) => (\r\n                                <li key={index}>{el.name}</li>\r\n                            ))}\r\n                        </ul> :\r\n                        <div>\r\n                            <input\r\n                                accept=\"image/*\"\r\n                                className={classes.input}\r\n                                id=\"contained-button-file\"\r\n                                multiple\r\n                                type=\"file\"\r\n                            />\r\n                            <label htmlFor=\"contained-button-file\">\r\n                                <Button variant=\"contained\" component=\"span\" className={classes.button}>\r\n                                    <Upload className={classes.UploadIcon} />\r\n                                    匯入學生資料\r\n                        </Button>\r\n                            </label>\r\n                        </div>\r\n                } */}"]},"metadata":{},"sourceType":"module"}