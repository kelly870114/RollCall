{"ast":null,"code":"/* xlsx.js (C) 2013-2015 SheetJS -- http://sheetjs.com */\n\n/* vim: set ts=2: */\n\n/*jshint -W041 */\n\n/*jshint funcscope:true, eqnull:true */\nvar XLSX = {};\n\n(function make_xlsx(XLSX) {\n  XLSX.version = '0.8.20';\n  var current_codepage = 1200,\n      current_cptable;\n\n  if (typeof module !== \"undefined\" && typeof require !== 'undefined') {\n    if (typeof cptable === 'undefined') cptable = require('./dist/cpexcel');\n    current_cptable = cptable[current_codepage];\n  }\n\n  function reset_cp() {\n    set_cp(1200);\n  }\n\n  var set_cp = function set_cp(cp) {\n    current_codepage = cp;\n  };\n\n  function char_codes(data) {\n    var o = [];\n\n    for (var i = 0, len = data.length; i < len; ++i) {\n      o[i] = data.charCodeAt(i);\n    }\n\n    return o;\n  }\n\n  var debom_xml = function debom_xml(data) {\n    return data;\n  };\n\n  var _getchar = function _gc1(x) {\n    return String.fromCharCode(x);\n  };\n\n  if (typeof cptable !== 'undefined') {\n    set_cp = function set_cp(cp) {\n      current_codepage = cp;\n      current_cptable = cptable[cp];\n    };\n\n    debom_xml = function debom_xml(data) {\n      if (data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) {\n        return cptable.utils.decode(1200, char_codes(data.substr(2)));\n      }\n\n      return data;\n    };\n\n    _getchar = function _gc2(x) {\n      if (current_codepage === 1200) return String.fromCharCode(x);\n      return cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0];\n    };\n  }\n\n  var Base64 = function make_b64() {\n    var map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    return {\n      encode: function encode(input, utf8) {\n        var o = \"\";\n        var c1, c2, c3, e1, e2, e3, e4;\n\n        for (var i = 0; i < input.length;) {\n          c1 = input.charCodeAt(i++);\n          c2 = input.charCodeAt(i++);\n          c3 = input.charCodeAt(i++);\n          e1 = c1 >> 2;\n          e2 = (c1 & 3) << 4 | c2 >> 4;\n          e3 = (c2 & 15) << 2 | c3 >> 6;\n          e4 = c3 & 63;\n\n          if (isNaN(c2)) {\n            e3 = e4 = 64;\n          } else if (isNaN(c3)) {\n            e4 = 64;\n          }\n\n          o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);\n        }\n\n        return o;\n      },\n      decode: function b64_decode(input, utf8) {\n        var o = \"\";\n        var c1, c2, c3;\n        var e1, e2, e3, e4;\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        for (var i = 0; i < input.length;) {\n          e1 = map.indexOf(input.charAt(i++));\n          e2 = map.indexOf(input.charAt(i++));\n          e3 = map.indexOf(input.charAt(i++));\n          e4 = map.indexOf(input.charAt(i++));\n          c1 = e1 << 2 | e2 >> 4;\n          c2 = (e2 & 15) << 4 | e3 >> 2;\n          c3 = (e3 & 3) << 6 | e4;\n          o += String.fromCharCode(c1);\n\n          if (e3 != 64) {\n            o += String.fromCharCode(c2);\n          }\n\n          if (e4 != 64) {\n            o += String.fromCharCode(c3);\n          }\n        }\n\n        return o;\n      }\n    };\n  }();\n\n  var has_buf = typeof Buffer !== 'undefined';\n\n  function new_raw_buf(len) {\n    /* jshint -W056 */\n    return new (has_buf ? Buffer : Array)(len);\n    /* jshint +W056 */\n  }\n\n  function s2a(s) {\n    if (has_buf) return new Buffer(s, \"binary\");\n    return s.split(\"\").map(function (x) {\n      return x.charCodeAt(0) & 0xff;\n    });\n  }\n\n  var bconcat = function bconcat(bufs) {\n    return [].concat.apply([], bufs);\n  };\n\n  var chr0 = /\\u0000/g,\n      chr1 = /[\\u0001-\\u0006]/;\n  /* ssf.js (C) 2013-2014 SheetJS -- http://sheetjs.com */\n\n  /*jshint -W041 */\n\n  var SSF = {};\n\n  var make_ssf = function make_ssf(SSF) {\n    SSF.version = '0.8.1';\n\n    function _strrev(x) {\n      var o = \"\",\n          i = x.length - 1;\n\n      while (i >= 0) {\n        o += x.charAt(i--);\n      }\n\n      return o;\n    }\n\n    function fill(c, l) {\n      var o = \"\";\n\n      while (o.length < l) {\n        o += c;\n      }\n\n      return o;\n    }\n\n    function pad0(v, d) {\n      var t = \"\" + v;\n      return t.length >= d ? t : fill('0', d - t.length) + t;\n    }\n\n    function pad_(v, d) {\n      var t = \"\" + v;\n      return t.length >= d ? t : fill(' ', d - t.length) + t;\n    }\n\n    function rpad_(v, d) {\n      var t = \"\" + v;\n      return t.length >= d ? t : t + fill(' ', d - t.length);\n    }\n\n    function pad0r1(v, d) {\n      var t = \"\" + Math.round(v);\n      return t.length >= d ? t : fill('0', d - t.length) + t;\n    }\n\n    function pad0r2(v, d) {\n      var t = \"\" + v;\n      return t.length >= d ? t : fill('0', d - t.length) + t;\n    }\n\n    var p2_32 = Math.pow(2, 32);\n\n    function pad0r(v, d) {\n      if (v > p2_32 || v < -p2_32) return pad0r1(v, d);\n      var i = Math.round(v);\n      return pad0r2(i, d);\n    }\n\n    function isgeneral(s, i) {\n      return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;\n    }\n    /* Options */\n\n\n    var opts_fmt = [[\"date1904\", 0], [\"output\", \"\"], [\"WTF\", false]];\n\n    function fixopts(o) {\n      for (var y = 0; y != opts_fmt.length; ++y) {\n        if (o[opts_fmt[y][0]] === undefined) o[opts_fmt[y][0]] = opts_fmt[y][1];\n      }\n    }\n\n    SSF.opts = opts_fmt;\n    var table_fmt = {\n      0: 'General',\n      1: '0',\n      2: '0.00',\n      3: '#,##0',\n      4: '#,##0.00',\n      9: '0%',\n      10: '0.00%',\n      11: '0.00E+00',\n      12: '# ?/?',\n      13: '# ??/??',\n      14: 'm/d/yy',\n      15: 'd-mmm-yy',\n      16: 'd-mmm',\n      17: 'mmm-yy',\n      18: 'h:mm AM/PM',\n      19: 'h:mm:ss AM/PM',\n      20: 'h:mm',\n      21: 'h:mm:ss',\n      22: 'm/d/yy h:mm',\n      37: '#,##0 ;(#,##0)',\n      38: '#,##0 ;[Red](#,##0)',\n      39: '#,##0.00;(#,##0.00)',\n      40: '#,##0.00;[Red](#,##0.00)',\n      45: 'mm:ss',\n      46: '[h]:mm:ss',\n      47: 'mmss.0',\n      48: '##0.0E+0',\n      49: '@',\n      56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"',\n      65535: 'General'\n    };\n    var days = [['Sun', 'Sunday'], ['Mon', 'Monday'], ['Tue', 'Tuesday'], ['Wed', 'Wednesday'], ['Thu', 'Thursday'], ['Fri', 'Friday'], ['Sat', 'Saturday']];\n    var months = [['J', 'Jan', 'January'], ['F', 'Feb', 'February'], ['M', 'Mar', 'March'], ['A', 'Apr', 'April'], ['M', 'May', 'May'], ['J', 'Jun', 'June'], ['J', 'Jul', 'July'], ['A', 'Aug', 'August'], ['S', 'Sep', 'September'], ['O', 'Oct', 'October'], ['N', 'Nov', 'November'], ['D', 'Dec', 'December']];\n\n    function frac(x, D, mixed) {\n      var sgn = x < 0 ? -1 : 1;\n      var B = x * sgn;\n      var P_2 = 0,\n          P_1 = 1,\n          P = 0;\n      var Q_2 = 1,\n          Q_1 = 0,\n          Q = 0;\n      var A = Math.floor(B);\n\n      while (Q_1 < D) {\n        A = Math.floor(B);\n        P = A * P_1 + P_2;\n        Q = A * Q_1 + Q_2;\n        if (B - A < 0.0000000005) break;\n        B = 1 / (B - A);\n        P_2 = P_1;\n        P_1 = P;\n        Q_2 = Q_1;\n        Q_1 = Q;\n      }\n\n      if (Q > D) {\n        Q = Q_1;\n        P = P_1;\n      }\n\n      if (Q > D) {\n        Q = Q_2;\n        P = P_2;\n      }\n\n      if (!mixed) return [0, sgn * P, Q];\n      if (Q === 0) throw \"Unexpected state: \" + P + \" \" + P_1 + \" \" + P_2 + \" \" + Q + \" \" + Q_1 + \" \" + Q_2;\n      var q = Math.floor(sgn * P / Q);\n      return [q, sgn * P - q * Q, Q];\n    }\n\n    function general_fmt_int(v, opts) {\n      return \"\" + v;\n    }\n\n    SSF._general_int = general_fmt_int;\n\n    var general_fmt_num = function make_general_fmt_num() {\n      var gnr1 = /\\.(\\d*[1-9])0+$/,\n          gnr2 = /\\.0*$/,\n          gnr4 = /\\.(\\d*[1-9])0+/,\n          gnr5 = /\\.0*[Ee]/,\n          gnr6 = /(E[+-])(\\d)$/;\n\n      function gfn2(v) {\n        var w = v < 0 ? 12 : 11;\n        var o = gfn5(v.toFixed(12));\n        if (o.length <= w) return o;\n        o = v.toPrecision(10);\n        if (o.length <= w) return o;\n        return v.toExponential(5);\n      }\n\n      function gfn3(v) {\n        var o = v.toFixed(11).replace(gnr1, \".$1\");\n        if (o.length > (v < 0 ? 12 : 11)) o = v.toPrecision(6);\n        return o;\n      }\n\n      function gfn4(o) {\n        for (var i = 0; i != o.length; ++i) {\n          if ((o.charCodeAt(i) | 0x20) === 101) return o.replace(gnr4, \".$1\").replace(gnr5, \"E\").replace(\"e\", \"E\").replace(gnr6, \"$10$2\");\n        }\n\n        return o;\n      }\n\n      function gfn5(o) {\n        //for(var i = 0; i != o.length; ++i) if(o.charCodeAt(i) === 46) return o.replace(gnr2,\"\").replace(gnr1,\".$1\");\n        //return o;\n        return o.indexOf(\".\") > -1 ? o.replace(gnr2, \"\").replace(gnr1, \".$1\") : o;\n      }\n\n      return function general_fmt_num(v, opts) {\n        var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E),\n            o;\n        if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);else if (Math.abs(V) <= 9) o = gfn2(v);else if (V === 10) o = v.toFixed(10).substr(0, 12);else o = gfn3(v);\n        return gfn5(gfn4(o));\n      };\n    }();\n\n    SSF._general_num = general_fmt_num;\n\n    function general_fmt(v, opts) {\n      switch (typeof v) {\n        case 'string':\n          return v;\n\n        case 'boolean':\n          return v ? \"TRUE\" : \"FALSE\";\n\n        case 'number':\n          return (v | 0) === v ? general_fmt_int(v, opts) : general_fmt_num(v, opts);\n      }\n\n      throw new Error(\"unsupported value in General format: \" + v);\n    }\n\n    SSF._general = general_fmt;\n\n    function fix_hijri(date, o) {\n      return 0;\n    }\n\n    function parse_date_code(v, opts, b2) {\n      if (v > 2958465 || v < 0) return null;\n      var date = v | 0,\n          time = Math.floor(86400 * (v - date)),\n          dow = 0;\n      var dout = [];\n      var out = {\n        D: date,\n        T: time,\n        u: 86400 * (v - date) - time,\n        y: 0,\n        m: 0,\n        d: 0,\n        H: 0,\n        M: 0,\n        S: 0,\n        q: 0\n      };\n      if (Math.abs(out.u) < 1e-6) out.u = 0;\n      fixopts(opts != null ? opts : opts = []);\n      if (opts.date1904) date += 1462;\n\n      if (out.u > 0.999) {\n        out.u = 0;\n\n        if (++time == 86400) {\n          time = 0;\n          ++date;\n        }\n      }\n\n      if (date === 60) {\n        dout = b2 ? [1317, 10, 29] : [1900, 2, 29];\n        dow = 3;\n      } else if (date === 0) {\n        dout = b2 ? [1317, 8, 29] : [1900, 1, 0];\n        dow = 6;\n      } else {\n        if (date > 60) --date;\n        /* 1 = Jan 1 1900 */\n\n        var d = new Date(1900, 0, 1);\n        d.setDate(d.getDate() + date - 1);\n        dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];\n        dow = d.getDay();\n        if (date < 60) dow = (dow + 6) % 7;\n        if (b2) dow = fix_hijri(d, dout);\n      }\n\n      out.y = dout[0];\n      out.m = dout[1];\n      out.d = dout[2];\n      out.S = time % 60;\n      time = Math.floor(time / 60);\n      out.M = time % 60;\n      time = Math.floor(time / 60);\n      out.H = time;\n      out.q = dow;\n      return out;\n    }\n\n    SSF.parse_date_code = parse_date_code;\n    /*jshint -W086 */\n\n    function write_date(type, fmt, val, ss0) {\n      var o = \"\",\n          ss = 0,\n          tt = 0,\n          y = val.y,\n          out,\n          outl = 0;\n\n      switch (type) {\n        case 98:\n          /* 'b' buddhist year */\n          y = val.y + 543;\n\n        /* falls through */\n\n        case 121:\n          /* 'y' year */\n          switch (fmt.length) {\n            case 1:\n            case 2:\n              out = y % 100;\n              outl = 2;\n              break;\n\n            default:\n              out = y % 10000;\n              outl = 4;\n              break;\n          }\n\n          break;\n\n        case 109:\n          /* 'm' month */\n          switch (fmt.length) {\n            case 1:\n            case 2:\n              out = val.m;\n              outl = fmt.length;\n              break;\n\n            case 3:\n              return months[val.m - 1][1];\n\n            case 5:\n              return months[val.m - 1][0];\n\n            default:\n              return months[val.m - 1][2];\n          }\n\n          break;\n\n        case 100:\n          /* 'd' day */\n          switch (fmt.length) {\n            case 1:\n            case 2:\n              out = val.d;\n              outl = fmt.length;\n              break;\n\n            case 3:\n              return days[val.q][0];\n\n            default:\n              return days[val.q][1];\n          }\n\n          break;\n\n        case 104:\n          /* 'h' 12-hour */\n          switch (fmt.length) {\n            case 1:\n            case 2:\n              out = 1 + (val.H + 11) % 12;\n              outl = fmt.length;\n              break;\n\n            default:\n              throw 'bad hour format: ' + fmt;\n          }\n\n          break;\n\n        case 72:\n          /* 'H' 24-hour */\n          switch (fmt.length) {\n            case 1:\n            case 2:\n              out = val.H;\n              outl = fmt.length;\n              break;\n\n            default:\n              throw 'bad hour format: ' + fmt;\n          }\n\n          break;\n\n        case 77:\n          /* 'M' minutes */\n          switch (fmt.length) {\n            case 1:\n            case 2:\n              out = val.M;\n              outl = fmt.length;\n              break;\n\n            default:\n              throw 'bad minute format: ' + fmt;\n          }\n\n          break;\n\n        case 115:\n          /* 's' seconds */\n          if (val.u === 0) switch (fmt) {\n            case 's':\n            case 'ss':\n              return pad0(val.S, fmt.length);\n\n            case '.0':\n            case '.00':\n            case '.000':\n          }\n\n          switch (fmt) {\n            case 's':\n            case 'ss':\n            case '.0':\n            case '.00':\n            case '.000':\n              if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;else tt = ss0 === 1 ? 10 : 1;\n              ss = Math.round(tt * (val.S + val.u));\n              if (ss >= 60 * tt) ss = 0;\n              if (fmt === 's') return ss === 0 ? \"0\" : \"\" + ss / tt;\n              o = pad0(ss, 2 + ss0);\n              if (fmt === 'ss') return o.substr(0, 2);\n              return \".\" + o.substr(2, fmt.length - 1);\n\n            default:\n              throw 'bad second format: ' + fmt;\n          }\n\n        case 90:\n          /* 'Z' absolute time */\n          switch (fmt) {\n            case '[h]':\n            case '[hh]':\n              out = val.D * 24 + val.H;\n              break;\n\n            case '[m]':\n            case '[mm]':\n              out = (val.D * 24 + val.H) * 60 + val.M;\n              break;\n\n            case '[s]':\n            case '[ss]':\n              out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);\n              break;\n\n            default:\n              throw 'bad abstime format: ' + fmt;\n          }\n\n          outl = fmt.length === 3 ? 1 : 2;\n          break;\n\n        case 101:\n          /* 'e' era */\n          out = y;\n          outl = 1;\n      }\n\n      if (outl > 0) return pad0(out, outl);else return \"\";\n    }\n    /*jshint +W086 */\n\n\n    function commaify(s) {\n      if (s.length <= 3) return s;\n      var j = s.length % 3,\n          o = s.substr(0, j);\n\n      for (; j != s.length; j += 3) {\n        o += (o.length > 0 ? \",\" : \"\") + s.substr(j, 3);\n      }\n\n      return o;\n    }\n\n    var write_num = function make_write_num() {\n      var pct1 = /%/g;\n\n      function write_num_pct(type, fmt, val) {\n        var sfmt = fmt.replace(pct1, \"\"),\n            mul = fmt.length - sfmt.length;\n        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill(\"%\", mul);\n      }\n\n      function write_num_cm(type, fmt, val) {\n        var idx = fmt.length - 1;\n\n        while (fmt.charCodeAt(idx - 1) === 44) {\n          --idx;\n        }\n\n        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));\n      }\n\n      function write_num_exp(fmt, val) {\n        var o;\n        var idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\n        if (fmt.match(/^#+0.0E\\+0$/)) {\n          var period = fmt.indexOf(\".\");\n          if (period === -1) period = fmt.indexOf('E');\n          var ee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) % period;\n          if (ee < 0) ee += period;\n          o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);\n\n          if (o.indexOf(\"e\") === -1) {\n            var fakee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E);\n            if (o.indexOf(\".\") === -1) o = o[0] + \".\" + o.substr(1) + \"E+\" + (fakee - o.length + ee);else o += \"E+\" + (fakee - ee);\n\n            while (o.substr(0, 2) === \"0.\") {\n              o = o[0] + o.substr(2, period) + \".\" + o.substr(2 + period);\n              o = o.replace(/^0+([1-9])/, \"$1\").replace(/^0+\\./, \"0.\");\n            }\n\n            o = o.replace(/\\+-/, \"-\");\n          }\n\n          o = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/, function ($$, $1, $2, $3) {\n            return $1 + $2 + $3.substr(0, (period + ee) % period) + \".\" + $3.substr(ee) + \"E\";\n          });\n        } else o = val.toExponential(idx);\n\n        if (fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0, o.length - 1) + \"0\" + o[o.length - 1];\n        if (fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/, \"e\");\n        return o.replace(\"e\", \"E\");\n      }\n\n      var frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\n\n      function write_num_f1(r, aval, sign) {\n        var den = parseInt(r[4]),\n            rr = Math.round(aval * den),\n            base = Math.floor(rr / den);\n        var myn = rr - base * den,\n            myd = den;\n        return sign + (base === 0 ? \"\" : \"\" + base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + \"/\" + r[3] + pad0(myd, r[4].length));\n      }\n\n      function write_num_f2(r, aval, sign) {\n        return sign + (aval === 0 ? \"\" : \"\" + aval) + fill(\" \", r[1].length + 2 + r[4].length);\n      }\n\n      var dec1 = /^#*0*\\.(0+)/;\n      var closeparen = /\\).*[0#]/;\n      var phone = /\\(###\\) ###\\\\?-####/;\n\n      function hashq(str) {\n        var o = \"\",\n            cc;\n\n        for (var i = 0; i != str.length; ++i) {\n          switch (cc = str.charCodeAt(i)) {\n            case 35:\n              break;\n\n            case 63:\n              o += \" \";\n              break;\n\n            case 48:\n              o += \"0\";\n              break;\n\n            default:\n              o += String.fromCharCode(cc);\n          }\n        }\n\n        return o;\n      }\n\n      function rnd(val, d) {\n        var dd = Math.pow(10, d);\n        return \"\" + Math.round(val * dd) / dd;\n      }\n\n      function dec(val, d) {\n        return Math.round((val - Math.floor(val)) * Math.pow(10, d));\n      }\n\n      function flr(val) {\n        if (val < 2147483647 && val > -2147483648) return \"\" + (val >= 0 ? val | 0 : val - 1 | 0);\n        return \"\" + Math.floor(val);\n      }\n\n      function write_num_flt(type, fmt, val) {\n        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n          var ffmt = fmt.replace(/\\( */, \"\").replace(/ \\)/, \"\").replace(/\\)/, \"\");\n          if (val >= 0) return write_num_flt('n', ffmt, val);\n          return '(' + write_num_flt('n', ffmt, -val) + ')';\n        }\n\n        if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n        if (fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);\n        if (fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);\n        if (fmt.charCodeAt(0) === 36) return \"$\" + write_num_flt(type, fmt.substr(fmt[1] == ' ' ? 2 : 1), val);\n        var o, oo;\n        var r,\n            ri,\n            ff,\n            aval = Math.abs(val),\n            sign = val < 0 ? \"-\" : \"\";\n        if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);\n\n        if (fmt.match(/^[#?]+$/)) {\n          o = pad0r(val, 0);\n          if (o === \"0\") o = \"\";\n          return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;\n        }\n\n        if ((r = fmt.match(frac1)) !== null) return write_num_f1(r, aval, sign);\n        if (fmt.match(/^#+0+$/) !== null) return sign + pad0r(aval, fmt.length - fmt.indexOf(\"0\"));\n\n        if ((r = fmt.match(dec1)) !== null) {\n          o = rnd(val, r[1].length).replace(/^([^\\.]+)$/, \"$1.\" + r[1]).replace(/\\.$/, \".\" + r[1]).replace(/\\.(\\d*)$/, function ($$, $1) {\n            return \".\" + $1 + fill(\"0\", r[1].length - $1.length);\n          });\n          return fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./, \".\");\n        }\n\n        fmt = fmt.replace(/^#+([0.])/, \"$1\");\n\n        if ((r = fmt.match(/^(0*)\\.(#*)$/)) !== null) {\n          return sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/, \".$1\").replace(/^(-?\\d*)$/, \"$1.\").replace(/^0\\./, r[1].length ? \"0.\" : \".\");\n        }\n\n        if ((r = fmt.match(/^#,##0(\\.?)$/)) !== null) return sign + commaify(pad0r(aval, 0));\n\n        if ((r = fmt.match(/^#,##0\\.([#0]*0)$/)) !== null) {\n          return val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\" + Math.floor(val)) + \".\" + pad0(dec(val, r[1].length), r[1].length);\n        }\n\n        if ((r = fmt.match(/^#,#*,#0/)) !== null) return write_num_flt(type, fmt.replace(/^#,#*,/, \"\"), val);\n\n        if ((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) !== null) {\n          o = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g, \"\"), val));\n          ri = 0;\n          return _strrev(_strrev(fmt.replace(/\\\\/g, \"\")).replace(/[0#]/g, function (x) {\n            return ri < o.length ? o[ri++] : x === '0' ? '0' : \"\";\n          }));\n        }\n\n        if (fmt.match(phone) !== null) {\n          o = write_num_flt(type, \"##########\", val);\n          return \"(\" + o.substr(0, 3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n        }\n\n        var oa = \"\";\n\n        if ((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n          ri = Math.min(r[4].length, 7);\n          ff = frac(aval, Math.pow(10, ri) - 1, false);\n          o = \"\" + sign;\n          oa = write_num(\"n\", r[1], ff[1]);\n          if (oa[oa.length - 1] == \" \") oa = oa.substr(0, oa.length - 1) + \"0\";\n          o += oa + r[2] + \"/\" + r[3];\n          oa = rpad_(ff[2], ri);\n          if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;\n          o += oa;\n          return o;\n        }\n\n        if ((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n          ri = Math.min(Math.max(r[1].length, r[4].length), 7);\n          ff = frac(aval, Math.pow(10, ri) - 1, true);\n          return sign + (ff[0] || (ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1], ri) + r[2] + \"/\" + r[3] + rpad_(ff[2], ri) : fill(\" \", 2 * ri + 1 + r[2].length + r[3].length));\n        }\n\n        if ((r = fmt.match(/^[#0?]+$/)) !== null) {\n          o = pad0r(val, 0);\n          if (fmt.length <= o.length) return o;\n          return hashq(fmt.substr(0, fmt.length - o.length)) + o;\n        }\n\n        if ((r = fmt.match(/^([#0?]+)\\.([#0]+)$/)) !== null) {\n          o = \"\" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, \"$1\");\n          ri = o.indexOf(\".\");\n          var lres = fmt.indexOf(\".\") - ri,\n              rres = fmt.length - o.length - lres;\n          return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));\n        }\n\n        if ((r = fmt.match(/^00,000\\.([#0]*0)$/)) !== null) {\n          ri = dec(val, r[1].length);\n          return val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/, \"0$&\").replace(/^\\d*$/, function ($$) {\n            return \"00,\" + ($$.length < 3 ? pad0(0, 3 - $$.length) : \"\") + $$;\n          }) + \".\" + pad0(ri, r[1].length);\n        }\n\n        switch (fmt) {\n          case \"#,###\":\n            var x = commaify(pad0r(aval, 0));\n            return x !== \"0\" ? sign + x : \"\";\n\n          default:\n        }\n\n        throw new Error(\"unsupported format |\" + fmt + \"|\");\n      }\n\n      function write_num_cm2(type, fmt, val) {\n        var idx = fmt.length - 1;\n\n        while (fmt.charCodeAt(idx - 1) === 44) {\n          --idx;\n        }\n\n        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));\n      }\n\n      function write_num_pct2(type, fmt, val) {\n        var sfmt = fmt.replace(pct1, \"\"),\n            mul = fmt.length - sfmt.length;\n        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill(\"%\", mul);\n      }\n\n      function write_num_exp2(fmt, val) {\n        var o;\n        var idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\n        if (fmt.match(/^#+0.0E\\+0$/)) {\n          var period = fmt.indexOf(\".\");\n          if (period === -1) period = fmt.indexOf('E');\n          var ee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) % period;\n          if (ee < 0) ee += period;\n          o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);\n\n          if (!o.match(/[Ee]/)) {\n            var fakee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E);\n            if (o.indexOf(\".\") === -1) o = o[0] + \".\" + o.substr(1) + \"E+\" + (fakee - o.length + ee);else o += \"E+\" + (fakee - ee);\n            o = o.replace(/\\+-/, \"-\");\n          }\n\n          o = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/, function ($$, $1, $2, $3) {\n            return $1 + $2 + $3.substr(0, (period + ee) % period) + \".\" + $3.substr(ee) + \"E\";\n          });\n        } else o = val.toExponential(idx);\n\n        if (fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0, o.length - 1) + \"0\" + o[o.length - 1];\n        if (fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/, \"e\");\n        return o.replace(\"e\", \"E\");\n      }\n\n      function write_num_int(type, fmt, val) {\n        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n          var ffmt = fmt.replace(/\\( */, \"\").replace(/ \\)/, \"\").replace(/\\)/, \"\");\n          if (val >= 0) return write_num_int('n', ffmt, val);\n          return '(' + write_num_int('n', ffmt, -val) + ')';\n        }\n\n        if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n        if (fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);\n        if (fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);\n        if (fmt.charCodeAt(0) === 36) return \"$\" + write_num_int(type, fmt.substr(fmt[1] == ' ' ? 2 : 1), val);\n        var o;\n        var r,\n            ri,\n            ff,\n            aval = Math.abs(val),\n            sign = val < 0 ? \"-\" : \"\";\n        if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);\n\n        if (fmt.match(/^[#?]+$/)) {\n          o = \"\" + val;\n          if (val === 0) o = \"\";\n          return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;\n        }\n\n        if ((r = fmt.match(frac1)) !== null) return write_num_f2(r, aval, sign);\n        if (fmt.match(/^#+0+$/) !== null) return sign + pad0(aval, fmt.length - fmt.indexOf(\"0\"));\n\n        if ((r = fmt.match(dec1)) !== null) {\n          o = (\"\" + val).replace(/^([^\\.]+)$/, \"$1.\" + r[1]).replace(/\\.$/, \".\" + r[1]).replace(/\\.(\\d*)$/, function ($$, $1) {\n            return \".\" + $1 + fill(\"0\", r[1].length - $1.length);\n          });\n          return fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./, \".\");\n        }\n\n        fmt = fmt.replace(/^#+([0.])/, \"$1\");\n\n        if ((r = fmt.match(/^(0*)\\.(#*)$/)) !== null) {\n          return sign + (\"\" + aval).replace(/\\.(\\d*[1-9])0*$/, \".$1\").replace(/^(-?\\d*)$/, \"$1.\").replace(/^0\\./, r[1].length ? \"0.\" : \".\");\n        }\n\n        if ((r = fmt.match(/^#,##0(\\.?)$/)) !== null) return sign + commaify(\"\" + aval);\n\n        if ((r = fmt.match(/^#,##0\\.([#0]*0)$/)) !== null) {\n          return val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\" + val) + \".\" + fill('0', r[1].length);\n        }\n\n        if ((r = fmt.match(/^#,#*,#0/)) !== null) return write_num_int(type, fmt.replace(/^#,#*,/, \"\"), val);\n\n        if ((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) !== null) {\n          o = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g, \"\"), val));\n          ri = 0;\n          return _strrev(_strrev(fmt.replace(/\\\\/g, \"\")).replace(/[0#]/g, function (x) {\n            return ri < o.length ? o[ri++] : x === '0' ? '0' : \"\";\n          }));\n        }\n\n        if (fmt.match(phone) !== null) {\n          o = write_num_int(type, \"##########\", val);\n          return \"(\" + o.substr(0, 3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n        }\n\n        var oa = \"\";\n\n        if ((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n          ri = Math.min(r[4].length, 7);\n          ff = frac(aval, Math.pow(10, ri) - 1, false);\n          o = \"\" + sign;\n          oa = write_num(\"n\", r[1], ff[1]);\n          if (oa[oa.length - 1] == \" \") oa = oa.substr(0, oa.length - 1) + \"0\";\n          o += oa + r[2] + \"/\" + r[3];\n          oa = rpad_(ff[2], ri);\n          if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;\n          o += oa;\n          return o;\n        }\n\n        if ((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n          ri = Math.min(Math.max(r[1].length, r[4].length), 7);\n          ff = frac(aval, Math.pow(10, ri) - 1, true);\n          return sign + (ff[0] || (ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1], ri) + r[2] + \"/\" + r[3] + rpad_(ff[2], ri) : fill(\" \", 2 * ri + 1 + r[2].length + r[3].length));\n        }\n\n        if ((r = fmt.match(/^[#0?]+$/)) !== null) {\n          o = \"\" + val;\n          if (fmt.length <= o.length) return o;\n          return hashq(fmt.substr(0, fmt.length - o.length)) + o;\n        }\n\n        if ((r = fmt.match(/^([#0]+)\\.([#0]+)$/)) !== null) {\n          o = \"\" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, \"$1\");\n          ri = o.indexOf(\".\");\n          var lres = fmt.indexOf(\".\") - ri,\n              rres = fmt.length - o.length - lres;\n          return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));\n        }\n\n        if ((r = fmt.match(/^00,000\\.([#0]*0)$/)) !== null) {\n          return val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\" + val).replace(/^\\d,\\d{3}$/, \"0$&\").replace(/^\\d*$/, function ($$) {\n            return \"00,\" + ($$.length < 3 ? pad0(0, 3 - $$.length) : \"\") + $$;\n          }) + \".\" + pad0(0, r[1].length);\n        }\n\n        switch (fmt) {\n          case \"#,###\":\n            var x = commaify(\"\" + aval);\n            return x !== \"0\" ? sign + x : \"\";\n\n          default:\n        }\n\n        throw new Error(\"unsupported format |\" + fmt + \"|\");\n      }\n\n      return function write_num(type, fmt, val) {\n        return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n      };\n    }();\n\n    function split_fmt(fmt) {\n      var out = [];\n      var in_str = false,\n          cc;\n\n      for (var i = 0, j = 0; i < fmt.length; ++i) {\n        switch (cc = fmt.charCodeAt(i)) {\n          case 34:\n            /* '\"' */\n            in_str = !in_str;\n            break;\n\n          case 95:\n          case 42:\n          case 92:\n            /* '_' '*' '\\\\' */\n            ++i;\n            break;\n\n          case 59:\n            /* ';' */\n            out[out.length] = fmt.substr(j, i - j);\n            j = i + 1;\n        }\n      }\n\n      out[out.length] = fmt.substr(j);\n      if (in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n      return out;\n    }\n\n    SSF._split = split_fmt;\n    var abstime = /\\[[HhMmSs]*\\]/;\n\n    function eval_fmt(fmt, v, opts, flen) {\n      var out = [],\n          o = \"\",\n          i = 0,\n          c = \"\",\n          lst = 't',\n          q,\n          dt,\n          j,\n          cc;\n      var hr = 'H';\n      /* Tokenize */\n\n      while (i < fmt.length) {\n        switch (c = fmt[i]) {\n          case 'G':\n            /* General */\n            if (!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n            out[out.length] = {\n              t: 'G',\n              v: 'General'\n            };\n            i += 7;\n            break;\n\n          case '\"':\n            /* Literal text */\n            for (o = \"\"; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) {\n              o += String.fromCharCode(cc);\n            }\n\n            out[out.length] = {\n              t: 't',\n              v: o\n            };\n            ++i;\n            break;\n\n          case '\\\\':\n            var w = fmt[++i],\n                t = w === \"(\" || w === \")\" ? w : 't';\n            out[out.length] = {\n              t: t,\n              v: w\n            };\n            ++i;\n            break;\n\n          case '_':\n            out[out.length] = {\n              t: 't',\n              v: \" \"\n            };\n            i += 2;\n            break;\n\n          case '@':\n            /* Text Placeholder */\n            out[out.length] = {\n              t: 'T',\n              v: v\n            };\n            ++i;\n            break;\n\n          case 'B':\n          case 'b':\n            if (fmt[i + 1] === \"1\" || fmt[i + 1] === \"2\") {\n              if (dt == null) {\n                dt = parse_date_code(v, opts, fmt[i + 1] === \"2\");\n                if (dt == null) return \"\";\n              }\n\n              out[out.length] = {\n                t: 'X',\n                v: fmt.substr(i, 2)\n              };\n              lst = c;\n              i += 2;\n              break;\n            }\n\n          /* falls through */\n\n          case 'M':\n          case 'D':\n          case 'Y':\n          case 'H':\n          case 'S':\n          case 'E':\n            c = c.toLowerCase();\n\n          /* falls through */\n\n          case 'm':\n          case 'd':\n          case 'y':\n          case 'h':\n          case 's':\n          case 'e':\n          case 'g':\n            if (v < 0) return \"\";\n\n            if (dt == null) {\n              dt = parse_date_code(v, opts);\n              if (dt == null) return \"\";\n            }\n\n            o = c;\n\n            while (++i < fmt.length && fmt[i].toLowerCase() === c) {\n              o += c;\n            }\n\n            if (c === 'm' && lst.toLowerCase() === 'h') c = 'M';\n            /* m = minute */\n\n            if (c === 'h') c = hr;\n            out[out.length] = {\n              t: c,\n              v: o\n            };\n            lst = c;\n            break;\n\n          case 'A':\n            q = {\n              t: c,\n              v: \"A\"\n            };\n            if (dt == null) dt = parse_date_code(v, opts);\n\n            if (fmt.substr(i, 3) === \"A/P\") {\n              if (dt != null) q.v = dt.H >= 12 ? \"P\" : \"A\";\n              q.t = 'T';\n              hr = 'h';\n              i += 3;\n            } else if (fmt.substr(i, 5) === \"AM/PM\") {\n              if (dt != null) q.v = dt.H >= 12 ? \"PM\" : \"AM\";\n              q.t = 'T';\n              i += 5;\n              hr = 'h';\n            } else {\n              q.t = \"t\";\n              ++i;\n            }\n\n            if (dt == null && q.t === 'T') return \"\";\n            out[out.length] = q;\n            lst = c;\n            break;\n\n          case '[':\n            o = c;\n\n            while (fmt[i++] !== ']' && i < fmt.length) {\n              o += fmt[i];\n            }\n\n            if (o.substr(-1) !== ']') throw 'unterminated \"[\" block: |' + o + '|';\n\n            if (o.match(abstime)) {\n              if (dt == null) {\n                dt = parse_date_code(v, opts);\n                if (dt == null) return \"\";\n              }\n\n              out[out.length] = {\n                t: 'Z',\n                v: o.toLowerCase()\n              };\n            } else {\n              o = \"\";\n            }\n\n            break;\n\n          /* Numbers */\n\n          case '.':\n            if (dt != null) {\n              o = c;\n\n              while ((c = fmt[++i]) === \"0\") {\n                o += c;\n              }\n\n              out[out.length] = {\n                t: 's',\n                v: o\n              };\n              break;\n            }\n\n          /* falls through */\n\n          case '0':\n          case '#':\n            o = c;\n\n            while (\"0#?.,E+-%\".indexOf(c = fmt[++i]) > -1 || c == '\\\\' && fmt[i + 1] == \"-\" && \"0#\".indexOf(fmt[i + 2]) > -1) {\n              o += c;\n            }\n\n            out[out.length] = {\n              t: 'n',\n              v: o\n            };\n            break;\n\n          case '?':\n            o = c;\n\n            while (fmt[++i] === c) {\n              o += c;\n            }\n\n            q = {\n              t: c,\n              v: o\n            };\n            out[out.length] = q;\n            lst = c;\n            break;\n\n          case '*':\n            ++i;\n            if (fmt[i] == ' ' || fmt[i] == '*') ++i;\n            break;\n          // **\n\n          case '(':\n          case ')':\n            out[out.length] = {\n              t: flen === 1 ? 't' : c,\n              v: c\n            };\n            ++i;\n            break;\n\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n            o = c;\n\n            while (\"0123456789\".indexOf(fmt[++i]) > -1) {\n              o += fmt[i];\n            }\n\n            out[out.length] = {\n              t: 'D',\n              v: o\n            };\n            break;\n\n          case ' ':\n            out[out.length] = {\n              t: c,\n              v: c\n            };\n            ++i;\n            break;\n\n          default:\n            if (\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxz\".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n            out[out.length] = {\n              t: 't',\n              v: c\n            };\n            ++i;\n            break;\n        }\n      }\n\n      var bt = 0,\n          ss0 = 0,\n          ssm;\n\n      for (i = out.length - 1, lst = 't'; i >= 0; --i) {\n        switch (out[i].t) {\n          case 'h':\n          case 'H':\n            out[i].t = hr;\n            lst = 'h';\n            if (bt < 1) bt = 1;\n            break;\n\n          case 's':\n            if (ssm = out[i].v.match(/\\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);\n            if (bt < 3) bt = 3;\n\n          /* falls through */\n\n          case 'd':\n          case 'y':\n          case 'M':\n          case 'e':\n            lst = out[i].t;\n            break;\n\n          case 'm':\n            if (lst === 's') {\n              out[i].t = 'M';\n              if (bt < 2) bt = 2;\n            }\n\n            break;\n\n          case 'X':\n            if (out[i].v === \"B2\") ;\n            break;\n\n          case 'Z':\n            if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n            if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n            if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n        }\n      }\n\n      switch (bt) {\n        case 0:\n          break;\n\n        case 1:\n          if (dt.u >= 0.5) {\n            dt.u = 0;\n            ++dt.S;\n          }\n\n          if (dt.S >= 60) {\n            dt.S = 0;\n            ++dt.M;\n          }\n\n          if (dt.M >= 60) {\n            dt.M = 0;\n            ++dt.H;\n          }\n\n          break;\n\n        case 2:\n          if (dt.u >= 0.5) {\n            dt.u = 0;\n            ++dt.S;\n          }\n\n          if (dt.S >= 60) {\n            dt.S = 0;\n            ++dt.M;\n          }\n\n          break;\n      }\n      /* replace fields */\n\n\n      var nstr = \"\",\n          jj;\n\n      for (i = 0; i < out.length; ++i) {\n        switch (out[i].t) {\n          case 't':\n          case 'T':\n          case ' ':\n          case 'D':\n            break;\n\n          case 'X':\n            out[i] = undefined;\n            break;\n\n          case 'd':\n          case 'm':\n          case 'y':\n          case 'h':\n          case 'H':\n          case 'M':\n          case 's':\n          case 'e':\n          case 'b':\n          case 'Z':\n            out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n            out[i].t = 't';\n            break;\n\n          case 'n':\n          case '(':\n          case '?':\n            jj = i + 1;\n\n            while (out[jj] != null && ((c = out[jj].t) === \"?\" || c === \"D\" || (c === \" \" || c === \"t\") && out[jj + 1] != null && (out[jj + 1].t === '?' || out[jj + 1].t === \"t\" && out[jj + 1].v === '/') || out[i].t === '(' && (c === ' ' || c === 'n' || c === ')') || c === 't' && (out[jj].v === '/' || '$€'.indexOf(out[jj].v) > -1 || out[jj].v === ' ' && out[jj + 1] != null && out[jj + 1].t == '?'))) {\n              out[i].v += out[jj].v;\n              out[jj] = undefined;\n              ++jj;\n            }\n\n            nstr += out[i].v;\n            i = jj - 1;\n            break;\n\n          case 'G':\n            out[i].t = 't';\n            out[i].v = general_fmt(v, opts);\n            break;\n        }\n      }\n\n      var vv = \"\",\n          myv,\n          ostr;\n\n      if (nstr.length > 0) {\n        myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;\n        /* '-' */\n\n        ostr = write_num(nstr.charCodeAt(0) === 40 ? '(' : 'n', nstr, myv);\n        /* '(' */\n\n        jj = ostr.length - 1;\n        var decpt = out.length;\n\n        for (i = 0; i < out.length; ++i) {\n          if (out[i] != null && out[i].v.indexOf(\".\") > -1) {\n            decpt = i;\n            break;\n          }\n        }\n\n        var lasti = out.length;\n\n        if (decpt === out.length && ostr.indexOf(\"E\") === -1) {\n          for (i = out.length - 1; i >= 0; --i) {\n            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;\n\n            if (jj >= out[i].v.length - 1) {\n              jj -= out[i].v.length;\n              out[i].v = ostr.substr(jj + 1, out[i].v.length);\n            } else if (jj < 0) out[i].v = \"\";else {\n              out[i].v = ostr.substr(0, jj + 1);\n              jj = -1;\n            }\n\n            out[i].t = 't';\n            lasti = i;\n          }\n\n          if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;\n        } else if (decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n          jj = ostr.indexOf(\".\") - 1;\n\n          for (i = decpt; i >= 0; --i) {\n            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;\n            j = out[i].v.indexOf(\".\") > -1 && i === decpt ? out[i].v.indexOf(\".\") - 1 : out[i].v.length - 1;\n            vv = out[i].v.substr(j + 1);\n\n            for (; j >= 0; --j) {\n              if (jj >= 0 && (out[i].v[j] === \"0\" || out[i].v[j] === \"#\")) vv = ostr[jj--] + vv;\n            }\n\n            out[i].v = vv;\n            out[i].t = 't';\n            lasti = i;\n          }\n\n          if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;\n          jj = ostr.indexOf(\".\") + 1;\n\n          for (i = decpt; i < out.length; ++i) {\n            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt) continue;\n            j = out[i].v.indexOf(\".\") > -1 && i === decpt ? out[i].v.indexOf(\".\") + 1 : 0;\n            vv = out[i].v.substr(0, j);\n\n            for (; j < out[i].v.length; ++j) {\n              if (jj < ostr.length) vv += ostr[jj++];\n            }\n\n            out[i].v = vv;\n            out[i].t = 't';\n            lasti = i;\n          }\n        }\n      }\n\n      for (i = 0; i < out.length; ++i) {\n        if (out[i] != null && 'n(?'.indexOf(out[i].t) > -1) {\n          myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === \"-\" ? -v : v;\n          out[i].v = write_num(out[i].t, out[i].v, myv);\n          out[i].t = 't';\n        }\n      }\n\n      var retval = \"\";\n\n      for (i = 0; i !== out.length; ++i) {\n        if (out[i] != null) retval += out[i].v;\n      }\n\n      return retval;\n    }\n\n    SSF._eval = eval_fmt;\n    var cfregex = /\\[[=<>]/;\n    var cfregex2 = /\\[([=<>]*)(-?\\d+\\.?\\d*)\\]/;\n\n    function chkcond(v, rr) {\n      if (rr == null) return false;\n      var thresh = parseFloat(rr[2]);\n\n      switch (rr[1]) {\n        case \"=\":\n          if (v == thresh) return true;\n          break;\n\n        case \">\":\n          if (v > thresh) return true;\n          break;\n\n        case \"<\":\n          if (v < thresh) return true;\n          break;\n\n        case \"<>\":\n          if (v != thresh) return true;\n          break;\n\n        case \">=\":\n          if (v >= thresh) return true;\n          break;\n\n        case \"<=\":\n          if (v <= thresh) return true;\n          break;\n      }\n\n      return false;\n    }\n\n    function choose_fmt(f, v) {\n      var fmt = split_fmt(f);\n      var l = fmt.length,\n          lat = fmt[l - 1].indexOf(\"@\");\n      if (l < 4 && lat > -1) --l;\n      if (fmt.length > 4) throw \"cannot find right format for |\" + fmt + \"|\";\n      if (typeof v !== \"number\") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : \"@\"];\n\n      switch (fmt.length) {\n        case 1:\n          fmt = lat > -1 ? [\"General\", \"General\", \"General\", fmt[0]] : [fmt[0], fmt[0], fmt[0], \"@\"];\n          break;\n\n        case 2:\n          fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], \"@\"];\n          break;\n\n        case 3:\n          fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], \"@\"];\n          break;\n\n        case 4:\n          break;\n      }\n\n      var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n      if (fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [l, ff];\n\n      if (fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {\n        var m1 = fmt[0].match(cfregex2);\n        var m2 = fmt[1].match(cfregex2);\n        return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];\n      }\n\n      return [l, ff];\n    }\n\n    function format(fmt, v, o) {\n      fixopts(o != null ? o : o = []);\n      var sfmt = \"\";\n\n      switch (typeof fmt) {\n        case \"string\":\n          sfmt = fmt;\n          break;\n\n        case \"number\":\n          sfmt = (o.table != null ? o.table : table_fmt)[fmt];\n          break;\n      }\n\n      if (isgeneral(sfmt, 0)) return general_fmt(v, o);\n      var f = choose_fmt(sfmt, v);\n      if (isgeneral(f[1])) return general_fmt(v, o);\n      if (v === true) v = \"TRUE\";else if (v === false) v = \"FALSE\";else if (v === \"\" || v == null) return \"\";\n      return eval_fmt(f[1], v, o, f[0]);\n    }\n\n    SSF._table = table_fmt;\n\n    SSF.load = function load_entry(fmt, idx) {\n      table_fmt[idx] = fmt;\n    };\n\n    SSF.format = format;\n\n    SSF.get_table = function get_table() {\n      return table_fmt;\n    };\n\n    SSF.load_table = function load_table(tbl) {\n      for (var i = 0; i != 0x0188; ++i) {\n        if (tbl[i] !== undefined) SSF.load(tbl[i], i);\n      }\n    };\n  };\n\n  make_ssf(SSF);\n  /* map from xlml named formats to SSF TODO: localize */\n\n  var XLMLFormatMap = {\n    \"General Number\": \"General\",\n    \"General Date\": SSF._table[22],\n    \"Long Date\": \"dddd, mmmm dd, yyyy\",\n    \"Medium Date\": SSF._table[15],\n    \"Short Date\": SSF._table[14],\n    \"Long Time\": SSF._table[19],\n    \"Medium Time\": SSF._table[18],\n    \"Short Time\": SSF._table[20],\n    \"Currency\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n    \"Fixed\": SSF._table[2],\n    \"Standard\": SSF._table[4],\n    \"Percent\": SSF._table[10],\n    \"Scientific\": SSF._table[11],\n    \"Yes/No\": '\"Yes\";\"Yes\";\"No\";@',\n    \"True/False\": '\"True\";\"True\";\"False\";@',\n    \"On/Off\": '\"Yes\";\"Yes\";\"No\";@'\n  };\n  var DO_NOT_EXPORT_CFB = true;\n  /* cfb.js (C) 2013-2014 SheetJS -- http://sheetjs.com */\n\n  /* vim: set ts=2: */\n\n  /*jshint eqnull:true */\n\n  /* [MS-CFB] v20130118 */\n\n  var CFB = function _CFB() {\n    var exports = {};\n    exports.version = '0.10.2';\n\n    function parse(file) {\n      var mver = 3; // major version\n\n      var ssz = 512; // sector size\n\n      var nmfs = 0; // number of mini FAT sectors\n\n      var ndfs = 0; // number of DIFAT sectors\n\n      var dir_start = 0; // first directory sector location\n\n      var minifat_start = 0; // first mini FAT sector location\n\n      var difat_start = 0; // first mini FAT sector location\n\n      var fat_addrs = []; // locations of FAT sectors\n\n      /* [MS-CFB] 2.2 Compound File Header */\n\n      var blob = file.slice(0, 512);\n      prep_blob(blob, 0);\n      /* major version */\n\n      var mv = check_get_mver(blob);\n      mver = mv[0];\n\n      switch (mver) {\n        case 3:\n          ssz = 512;\n          break;\n\n        case 4:\n          ssz = 4096;\n          break;\n\n        default:\n          throw \"Major Version: Expected 3 or 4 saw \" + mver;\n      }\n      /* reprocess header */\n\n\n      if (ssz !== 512) {\n        blob = file.slice(0, ssz);\n        prep_blob(blob, 28\n        /* blob.l */\n        );\n      }\n      /* Save header for final object */\n\n\n      var header = file.slice(0, ssz);\n      check_shifts(blob, mver); // Number of Directory Sectors\n\n      var nds = blob.read_shift(4, 'i');\n      if (mver === 3 && nds !== 0) throw '# Directory Sectors: Expected 0 saw ' + nds; // Number of FAT Sectors\n      //var nfs = blob.read_shift(4, 'i');\n\n      blob.l += 4; // First Directory Sector Location\n\n      dir_start = blob.read_shift(4, 'i'); // Transaction Signature\n\n      blob.l += 4; // Mini Stream Cutoff Size\n\n      blob.chk('00100000', 'Mini Stream Cutoff Size: '); // First Mini FAT Sector Location\n\n      minifat_start = blob.read_shift(4, 'i'); // Number of Mini FAT Sectors\n\n      nmfs = blob.read_shift(4, 'i'); // First DIFAT sector location\n\n      difat_start = blob.read_shift(4, 'i'); // Number of DIFAT Sectors\n\n      ndfs = blob.read_shift(4, 'i'); // Grab FAT Sector Locations\n\n      for (var q, j = 0; j < 109; ++j) {\n        /* 109 = (512 - blob.l)>>>2; */\n        q = blob.read_shift(4, 'i');\n        if (q < 0) break;\n        fat_addrs[j] = q;\n      }\n      /** Break the file up into sectors */\n\n\n      var sectors = sectorify(file, ssz);\n      sleuth_fat(difat_start, ndfs, sectors, ssz, fat_addrs);\n      /** Chains */\n\n      var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n      sector_list[dir_start].name = \"!Directory\";\n      if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\n      sector_list[fat_addrs[0]].name = \"!FAT\";\n      sector_list.fat_addrs = fat_addrs;\n      sector_list.ssz = ssz;\n      /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\n      var files = {},\n          Paths = [],\n          FileIndex = [],\n          FullPaths = [],\n          FullPathDir = {};\n      read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex);\n      build_full_paths(FileIndex, FullPathDir, FullPaths, Paths);\n      var root_name = Paths.shift();\n      Paths.root = root_name;\n      /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\n\n      var find_path = make_find_path(FullPaths, Paths, FileIndex, files, root_name);\n      return {\n        raw: {\n          header: header,\n          sectors: sectors\n        },\n        FileIndex: FileIndex,\n        FullPaths: FullPaths,\n        FullPathDir: FullPathDir,\n        find: find_path\n      };\n    } // parse\n\n    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */\n\n\n    function check_get_mver(blob) {\n      // header signature 8\n      blob.chk(HEADER_SIGNATURE, 'Header Signature: '); // clsid 16\n\n      blob.chk(HEADER_CLSID, 'CLSID: '); // minor version 2\n\n      var mver = blob.read_shift(2, 'u');\n      return [blob.read_shift(2, 'u'), mver];\n    }\n\n    function check_shifts(blob, mver) {\n      var shift = 0x09; // Byte Order\n\n      blob.chk('feff', 'Byte Order: '); // Sector Shift\n\n      switch (shift = blob.read_shift(2)) {\n        case 0x09:\n          if (mver !== 3) throw 'MajorVersion/SectorShift Mismatch';\n          break;\n\n        case 0x0c:\n          if (mver !== 4) throw 'MajorVersion/SectorShift Mismatch';\n          break;\n\n        default:\n          throw 'Sector Shift: Expected 9 or 12 saw ' + shift;\n      } // Mini Sector Shift\n\n\n      blob.chk('0600', 'Mini Sector Shift: '); // Reserved\n\n      blob.chk('000000000000', 'Reserved: ');\n    }\n    /** Break the file up into sectors */\n\n\n    function sectorify(file, ssz) {\n      var nsectors = Math.ceil(file.length / ssz) - 1;\n      var sectors = new Array(nsectors);\n\n      for (var i = 1; i < nsectors; ++i) {\n        sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);\n      }\n\n      sectors[nsectors - 1] = file.slice(nsectors * ssz);\n      return sectors;\n    }\n    /* [MS-CFB] 2.6.4 Red-Black Tree */\n\n\n    function build_full_paths(FI, FPD, FP, Paths) {\n      var i = 0,\n          L = 0,\n          R = 0,\n          C = 0,\n          j = 0,\n          pl = Paths.length;\n      var dad = new Array(pl),\n          q = new Array(pl);\n\n      for (; i < pl; ++i) {\n        dad[i] = q[i] = i;\n        FP[i] = Paths[i];\n      }\n\n      for (; j < q.length; ++j) {\n        i = q[j];\n        L = FI[i].L;\n        R = FI[i].R;\n        C = FI[i].C;\n\n        if (dad[i] === i) {\n          if (L !== -1\n          /*NOSTREAM*/\n          && dad[L] !== L) dad[i] = dad[L];\n          if (R !== -1 && dad[R] !== R) dad[i] = dad[R];\n        }\n\n        if (C !== -1\n        /*NOSTREAM*/\n        ) dad[C] = i;\n\n        if (L !== -1) {\n          dad[L] = dad[i];\n          q.push(L);\n        }\n\n        if (R !== -1) {\n          dad[R] = dad[i];\n          q.push(R);\n        }\n      }\n\n      for (i = 1; i !== pl; ++i) {\n        if (dad[i] === i) {\n          if (R !== -1\n          /*NOSTREAM*/\n          && dad[R] !== R) dad[i] = dad[R];else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];\n        }\n      }\n\n      for (i = 1; i < pl; ++i) {\n        if (FI[i].type === 0\n        /* unknown */\n        ) continue;\n        j = dad[i];\n        if (j === 0) FP[i] = FP[0] + \"/\" + FP[i];else while (j !== 0) {\n          FP[i] = FP[j] + \"/\" + FP[i];\n          j = dad[j];\n        }\n        dad[i] = 0;\n      }\n\n      FP[0] += \"/\";\n\n      for (i = 1; i < pl; ++i) {\n        if (FI[i].type !== 2\n        /* stream */\n        ) FP[i] += \"/\";\n        FPD[FP[i]] = FI[i];\n      }\n    }\n    /* [MS-CFB] 2.6.4 */\n\n\n    function make_find_path(FullPaths, Paths, FileIndex, files, root_name) {\n      var UCFullPaths = new Array(FullPaths.length);\n      var UCPaths = new Array(Paths.length),\n          i;\n\n      for (i = 0; i < FullPaths.length; ++i) {\n        UCFullPaths[i] = FullPaths[i].toUpperCase().replace(chr0, '').replace(chr1, '!');\n      }\n\n      for (i = 0; i < Paths.length; ++i) {\n        UCPaths[i] = Paths[i].toUpperCase().replace(chr0, '').replace(chr1, '!');\n      }\n\n      return function find_path(path) {\n        var k;\n\n        if (path.charCodeAt(0) === 47\n        /* \"/\" */\n        ) {\n            k = true;\n            path = root_name + path;\n          } else k = path.indexOf(\"/\") !== -1;\n\n        var UCPath = path.toUpperCase().replace(chr0, '').replace(chr1, '!');\n        var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n        if (w === -1) return null;\n        return k === true ? FileIndex[w] : files[Paths[w]];\n      };\n    }\n    /** Chase down the rest of the DIFAT chain to build a comprehensive list\n        DIFAT chains by storing the next sector number as the last 32 bytes */\n\n\n    function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n      var q;\n\n      if (idx === ENDOFCHAIN) {\n        if (cnt !== 0) throw \"DIFAT chain shorter than expected\";\n      } else if (idx !== -1\n      /*FREESECT*/\n      ) {\n          var sector = sectors[idx],\n              m = (ssz >>> 2) - 1;\n\n          for (var i = 0; i < m; ++i) {\n            if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;\n            fat_addrs.push(q);\n          }\n\n          sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);\n        }\n    }\n    /** Follow the linked list of sectors for a given starting point */\n\n\n    function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n      var sl = sectors.length;\n      var buf, buf_chain;\n      if (!chkd) chkd = new Array(sl);\n      var modulus = ssz - 1,\n          j,\n          jj;\n      buf = [];\n      buf_chain = [];\n\n      for (j = start; j >= 0;) {\n        chkd[j] = true;\n        buf[buf.length] = j;\n        buf_chain.push(sectors[j]);\n        var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n        jj = j * 4 & modulus;\n        if (ssz < 4 + jj) throw \"FAT boundary crossed: \" + j + \" 4 \" + ssz;\n        j = __readInt32LE(sectors[addr], jj);\n      }\n\n      return {\n        nodes: buf,\n        data: __toBuffer([buf_chain])\n      };\n    }\n    /** Chase down the sector linked lists */\n\n\n    function make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n      var sl = sectors.length,\n          sector_list = new Array(sl);\n      var chkd = new Array(sl),\n          buf,\n          buf_chain;\n      var modulus = ssz - 1,\n          i,\n          j,\n          k,\n          jj;\n\n      for (i = 0; i < sl; ++i) {\n        buf = [];\n        k = i + dir_start;\n        if (k >= sl) k -= sl;\n        if (chkd[k] === true) continue;\n        buf_chain = [];\n\n        for (j = k; j >= 0;) {\n          chkd[j] = true;\n          buf[buf.length] = j;\n          buf_chain.push(sectors[j]);\n          var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n          jj = j * 4 & modulus;\n          if (ssz < 4 + jj) throw \"FAT boundary crossed: \" + j + \" 4 \" + ssz;\n          j = __readInt32LE(sectors[addr], jj);\n        }\n\n        sector_list[k] = {\n          nodes: buf,\n          data: __toBuffer([buf_chain])\n        };\n      }\n\n      return sector_list;\n    }\n    /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\n\n    function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex) {\n      var blob;\n      var minifat_store = 0,\n          pl = Paths.length ? 2 : 0;\n      var sector = sector_list[dir_start].data;\n      var i = 0,\n          namelen = 0,\n          name,\n          o,\n          ctime,\n          mtime;\n\n      for (; i < sector.length; i += 128) {\n        blob = sector.slice(i, i + 128);\n        prep_blob(blob, 64);\n        namelen = blob.read_shift(2);\n        if (namelen === 0) continue;\n        name = __utf16le(blob, 0, namelen - pl);\n        Paths.push(name);\n        o = {\n          name: name,\n          type: blob.read_shift(1),\n          color: blob.read_shift(1),\n          L: blob.read_shift(4, 'i'),\n          R: blob.read_shift(4, 'i'),\n          C: blob.read_shift(4, 'i'),\n          clsid: blob.read_shift(16),\n          state: blob.read_shift(4, 'i')\n        };\n        ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\n        if (ctime !== 0) {\n          o.ctime = ctime;\n          o.ct = read_date(blob, blob.l - 8);\n        }\n\n        mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\n        if (mtime !== 0) {\n          o.mtime = mtime;\n          o.mt = read_date(blob, blob.l - 8);\n        }\n\n        o.start = blob.read_shift(4, 'i');\n        o.size = blob.read_shift(4, 'i');\n\n        if (o.type === 5) {\n          /* root */\n          minifat_store = o.start;\n          if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n          /*minifat_size = o.size;*/\n        } else if (o.size >= 4096\n        /* MSCSZ */\n        ) {\n            o.storage = 'fat';\n            if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n            sector_list[o.start].name = o.name;\n            o.content = sector_list[o.start].data.slice(0, o.size);\n            prep_blob(o.content, 0);\n          } else {\n          o.storage = 'minifat';\n\n          if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN) {\n            o.content = sector_list[minifat_store].data.slice(o.start * MSSZ, o.start * MSSZ + o.size);\n            prep_blob(o.content, 0);\n          }\n        }\n\n        files[name] = o;\n        FileIndex.push(o);\n      }\n    }\n\n    function read_date(blob, offset) {\n      return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);\n    }\n\n    var fs;\n\n    function readFileSync(filename, options) {\n      if (fs === undefined) fs = require('fs');\n      return parse(fs.readFileSync(filename), options);\n    }\n\n    function readSync(blob, options) {\n      switch (options !== undefined && options.type !== undefined ? options.type : \"base64\") {\n        case \"file\":\n          return readFileSync(blob, options);\n\n        case \"base64\":\n          return parse(s2a(Base64.decode(blob)), options);\n\n        case \"binary\":\n          return parse(s2a(blob), options);\n      }\n\n      return parse(blob);\n    }\n    /** CFB Constants */\n\n\n    var MSSZ = 64;\n    /* Mini Sector Size = 1<<6 */\n    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n\n    /* 2.1 Compound File Sector Numbers and Types */\n\n    var ENDOFCHAIN = -2;\n    /* 2.2 Compound File Header */\n\n    var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\n    var HEADER_CLSID = '00000000000000000000000000000000';\n    var consts = {\n      /* 2.1 Compund File Sector Numbers and Types */\n      MAXREGSECT: -6,\n      DIFSECT: -4,\n      FATSECT: -3,\n      ENDOFCHAIN: ENDOFCHAIN,\n      FREESECT: -1,\n\n      /* 2.2 Compound File Header */\n      HEADER_SIGNATURE: HEADER_SIGNATURE,\n      HEADER_MINOR_VERSION: '3e00',\n      MAXREGSID: -6,\n      NOSTREAM: -1,\n      HEADER_CLSID: HEADER_CLSID,\n\n      /* 2.6.1 Compound File Directory Entry */\n      EntryTypes: ['unknown', 'storage', 'stream', 'lockbytes', 'property', 'root']\n    };\n    exports.read = readSync;\n    exports.parse = parse;\n    exports.utils = {\n      ReadShift: ReadShift,\n      CheckField: CheckField,\n      prep_blob: prep_blob,\n      bconcat: bconcat,\n      consts: consts\n    };\n    return exports;\n  }();\n\n  if (typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') {\n    module.exports = CFB;\n  }\n\n  function isval(x) {\n    return x !== undefined && x !== null;\n  }\n\n  function keys(o) {\n    return Object.keys(o);\n  }\n\n  function evert_key(obj, key) {\n    var o = [],\n        K = keys(obj);\n\n    for (var i = 0; i !== K.length; ++i) {\n      o[obj[K[i]][key]] = K[i];\n    }\n\n    return o;\n  }\n\n  function evert(obj) {\n    var o = [],\n        K = keys(obj);\n\n    for (var i = 0; i !== K.length; ++i) {\n      o[obj[K[i]]] = K[i];\n    }\n\n    return o;\n  }\n\n  function evert_num(obj) {\n    var o = [],\n        K = keys(obj);\n\n    for (var i = 0; i !== K.length; ++i) {\n      o[obj[K[i]]] = parseInt(K[i], 10);\n    }\n\n    return o;\n  }\n\n  function evert_arr(obj) {\n    var o = [],\n        K = keys(obj);\n\n    for (var i = 0; i !== K.length; ++i) {\n      if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];\n      o[obj[K[i]]].push(K[i]);\n    }\n\n    return o;\n  }\n  /* TODO: date1904 logic */\n\n\n  function datenum(v, date1904) {\n    if (date1904) v += 1462;\n    var epoch = Date.parse(v);\n    return (epoch + 2209161600000) / (24 * 60 * 60 * 1000);\n  }\n\n  function cc2str(arr) {\n    var o = \"\";\n\n    for (var i = 0; i != arr.length; ++i) {\n      o += String.fromCharCode(arr[i]);\n    }\n\n    return o;\n  }\n\n  function getdata(data) {\n    if (!data) return null;\n\n    if (data.name.substr(-4) === \".bin\") {\n      if (data.data) return char_codes(data.data);\n      if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();\n      if (data._data && data._data.getContent) return Array.prototype.slice.call(data._data.getContent());\n    } else {\n      if (data.data) return data.name.substr(-4) !== \".bin\" ? debom_xml(data.data) : char_codes(data.data);\n      if (data.asNodeBuffer && has_buf) return debom_xml(data.asNodeBuffer().toString('binary'));\n      if (data.asBinary) return debom_xml(data.asBinary());\n      if (data._data && data._data.getContent) return debom_xml(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));\n    }\n\n    return null;\n  }\n\n  function safegetzipfile(zip, file) {\n    var f = file;\n    if (zip.files[f]) return zip.files[f];\n    var lowerCaseFiles = {};\n\n    for (var key in zip.files) {\n      lowerCaseFiles[key.toLowerCase()] = zip.files[key];\n    }\n\n    f = file.toLowerCase();\n    if (lowerCaseFiles[f]) return lowerCaseFiles[f];\n    f = f.replace(/\\//g, '\\\\');\n    if (lowerCaseFiles[f]) return lowerCaseFiles[f];\n    return null;\n  }\n\n  function getzipfile(zip, file) {\n    var o = safegetzipfile(zip, file);\n    if (o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n    return o;\n  }\n\n  function getzipdata(zip, file, safe) {\n    if (!safe) return getdata(getzipfile(zip, file));\n    if (!file) return null;\n\n    try {\n      return getzipdata(zip, file);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  var _fs, jszip;\n\n  if (typeof JSZip !== 'undefined') jszip = JSZip;\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      if (has_buf && typeof jszip === 'undefined') jszip = require('js' + 'zip');\n      if (typeof jszip === 'undefined') jszip = require('./js' + 'zip').JSZip;\n      _fs = require('f' + 's');\n    }\n  }\n\n  var attregexg = /([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\n  var tagregex = /<[^>]*>/g;\n  var nsregex = /<\\w*:/,\n      nsregex2 = /<(\\/?)\\w+:/;\n\n  function parsexmltag(tag, skip_root) {\n    var z = [];\n    var eq = 0,\n        c = 0;\n\n    for (; eq !== tag.length; ++eq) {\n      if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n    }\n\n    if (!skip_root) z[0] = tag.substr(0, eq);\n    if (eq === tag.length) return z;\n    var m = tag.match(attregexg),\n        j = 0,\n        w = \"\",\n        v = \"\",\n        i = 0,\n        q = \"\",\n        cc = \"\";\n    if (m) for (i = 0; i != m.length; ++i) {\n      cc = m[i];\n\n      for (c = 0; c != cc.length; ++c) {\n        if (cc.charCodeAt(c) === 61) break;\n      }\n\n      q = cc.substr(0, c);\n      v = cc.substring(c + 2, cc.length - 1);\n\n      for (j = 0; j != q.length; ++j) {\n        if (q.charCodeAt(j) === 58) break;\n      }\n\n      if (j === q.length) z[q] = v;else z[(j === 5 && q.substr(0, 5) === \"xmlns\" ? \"xmlns\" : \"\") + q.substr(j + 1)] = v;\n    }\n    return z;\n  }\n\n  function strip_ns(x) {\n    return x.replace(nsregex2, \"<$1\");\n  }\n\n  var encodings = {\n    '&quot;': '\"',\n    '&apos;': \"'\",\n    '&gt;': '>',\n    '&lt;': '<',\n    '&amp;': '&'\n  };\n  var rencoding = evert(encodings);\n  var rencstr = \"&<>'\\\"\".split(\"\"); // TODO: CP remap (need to read file version to determine OS)\n\n  var unescapexml = function () {\n    var encregex = /&[a-z]*;/g,\n        coderegex = /_x([\\da-fA-F]+)_/g;\n    return function unescapexml(text) {\n      var s = text + '';\n      return s.replace(encregex, function ($$) {\n        return encodings[$$];\n      }).replace(coderegex, function (m, c) {\n        return String.fromCharCode(parseInt(c, 16));\n      });\n    };\n  }();\n\n  var decregex = /[&<>'\"]/g,\n      charegex = /[\\u0000-\\u0008\\u000b-\\u001f]/g;\n\n  function escapexml(text) {\n    var s = text + '';\n    return s.replace(decregex, function (y) {\n      return rencoding[y];\n    }).replace(charegex, function (s) {\n      return \"_x\" + (\"000\" + s.charCodeAt(0).toString(16)).substr(-4) + \"_\";\n    });\n  }\n  /* TODO: handle codepages */\n\n\n  var xlml_fixstr = function () {\n    var entregex = /&#(\\d+);/g;\n\n    function entrepl($$, $1) {\n      return String.fromCharCode(parseInt($1, 10));\n    }\n\n    return function xlml_fixstr(str) {\n      return str.replace(entregex, entrepl);\n    };\n  }();\n\n  function parsexmlbool(value, tag) {\n    switch (value) {\n      case '1':\n      case 'true':\n      case 'TRUE':\n        return true;\n\n      /* case '0': case 'false': case 'FALSE':*/\n\n      default:\n        return false;\n    }\n  }\n\n  var utf8read = function utf8reada(orig) {\n    var out = \"\",\n        i = 0,\n        c = 0,\n        d = 0,\n        e = 0,\n        f = 0,\n        w = 0;\n\n    while (i < orig.length) {\n      c = orig.charCodeAt(i++);\n\n      if (c < 128) {\n        out += String.fromCharCode(c);\n        continue;\n      }\n\n      d = orig.charCodeAt(i++);\n\n      if (c > 191 && c < 224) {\n        out += String.fromCharCode((c & 31) << 6 | d & 63);\n        continue;\n      }\n\n      e = orig.charCodeAt(i++);\n\n      if (c < 240) {\n        out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);\n        continue;\n      }\n\n      f = orig.charCodeAt(i++);\n      w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;\n      out += String.fromCharCode(0xD800 + (w >>> 10 & 1023));\n      out += String.fromCharCode(0xDC00 + (w & 1023));\n    }\n\n    return out;\n  };\n\n  if (has_buf) {\n    var utf8readb = function utf8readb(data) {\n      var out = new Buffer(2 * data.length),\n          w,\n          i,\n          j = 1,\n          k = 0,\n          ww = 0,\n          c;\n\n      for (i = 0; i < data.length; i += j) {\n        j = 1;\n        if ((c = data.charCodeAt(i)) < 128) w = c;else if (c < 224) {\n          w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);\n          j = 2;\n        } else if (c < 240) {\n          w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);\n          j = 3;\n        } else {\n          j = 4;\n          w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);\n          w -= 65536;\n          ww = 0xD800 + (w >>> 10 & 1023);\n          w = 0xDC00 + (w & 1023);\n        }\n\n        if (ww !== 0) {\n          out[k++] = ww & 255;\n          out[k++] = ww >>> 8;\n          ww = 0;\n        }\n\n        out[k++] = w % 256;\n        out[k++] = w >>> 8;\n      }\n\n      out.length = k;\n      return out.toString('ucs2');\n    };\n\n    var corpus = \"foo bar baz\\xE2\\x98\\x83\\xF0\\x9F\\x8D\\xA3\";\n    if (utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;\n\n    var utf8readc = function utf8readc(data) {\n      return Buffer(data, 'binary').toString('utf8');\n    };\n\n    if (utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;\n  } // matches <foo>...</foo> extracts content\n\n\n  var matchtag = function () {\n    var mtcache = {};\n    return function matchtag(f, g) {\n      var t = f + \"|\" + g;\n      if (mtcache[t] !== undefined) return mtcache[t];\n      return mtcache[t] = new RegExp('<(?:\\\\w+:)?' + f + \"(?: xml:space=\\\"preserve\\\")?(?:[^>]*)>([^\\u2603]*)</(?:\\\\w+:)?\" + f + '>', g || \"\");\n    };\n  }();\n\n  var vtregex = function () {\n    var vt_cache = {};\n    return function vt_regex(bt) {\n      if (vt_cache[bt] !== undefined) return vt_cache[bt];\n      return vt_cache[bt] = new RegExp(\"<vt:\" + bt + \">(.*?)</vt:\" + bt + \">\", 'g');\n    };\n  }();\n\n  var vtvregex = /<\\/?vt:variant>/g,\n      vtmregex = /<vt:([^>]*)>(.*)</;\n\n  function parseVector(data) {\n    var h = parsexmltag(data);\n    var matches = data.match(vtregex(h.baseType)) || [];\n    if (matches.length != h.size) throw \"unexpected vector length \" + matches.length + \" != \" + h.size;\n    var res = [];\n    matches.forEach(function (x) {\n      var v = x.replace(vtvregex, \"\").match(vtmregex);\n      res.push({\n        v: v[2],\n        t: v[1]\n      });\n    });\n    return res;\n  }\n\n  var wtregex = /(^\\s|\\s$|\\n)/;\n\n  function writetag(f, g) {\n    return '<' + f + (g.match(wtregex) ? ' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f + '>';\n  }\n\n  function wxt_helper(h) {\n    return keys(h).map(function (k) {\n      return \" \" + k + '=\"' + h[k] + '\"';\n    }).join(\"\");\n  }\n\n  function writextag(f, g, h) {\n    return '<' + f + (isval(h) ? wxt_helper(h) : \"\") + (isval(g) ? (g.match(wtregex) ? ' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f : \"/\") + '>';\n  }\n\n  function write_w3cdtf(d, t) {\n    try {\n      return d.toISOString().replace(/\\.\\d*/, \"\");\n    } catch (e) {\n      if (t) throw e;\n    }\n  }\n\n  function write_vt(s) {\n    switch (typeof s) {\n      case 'string':\n        return writextag('vt:lpwstr', s);\n\n      case 'number':\n        return writextag((s | 0) == s ? 'vt:i4' : 'vt:r8', String(s));\n\n      case 'boolean':\n        return writextag('vt:bool', s ? 'true' : 'false');\n    }\n\n    if (s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));\n    throw new Error(\"Unable to serialize \" + s);\n  }\n\n  var XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r\\n';\n  var XMLNS = {\n    'dc': 'http://purl.org/dc/elements/1.1/',\n    'dcterms': 'http://purl.org/dc/terms/',\n    'dcmitype': 'http://purl.org/dc/dcmitype/',\n    'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',\n    'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',\n    'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\n    'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsd': 'http://www.w3.org/2001/XMLSchema'\n  };\n  XMLNS.main = ['http://schemas.openxmlformats.org/spreadsheetml/2006/main', 'http://purl.oclc.org/ooxml/spreadsheetml/main', 'http://schemas.microsoft.com/office/excel/2006/main', 'http://schemas.microsoft.com/office/excel/2006/2'];\n\n  function readIEEE754(buf, idx, isLE, nl, ml) {\n    if (isLE === undefined) isLE = true;\n    if (!nl) nl = 8;\n    if (!ml && nl === 8) ml = 52;\n    var e,\n        m,\n        el = nl * 8 - ml - 1,\n        eMax = (1 << el) - 1,\n        eBias = eMax >> 1;\n    var bits = -7,\n        d = isLE ? -1 : 1,\n        i = isLE ? nl - 1 : 0,\n        s = buf[idx + i];\n    i += d;\n    e = s & (1 << -bits) - 1;\n    s >>>= -bits;\n    bits += el;\n\n    for (; bits > 0; e = e * 256 + buf[idx + i], i += d, bits -= 8) {\n      ;\n    }\n\n    m = e & (1 << -bits) - 1;\n    e >>>= -bits;\n    bits += ml;\n\n    for (; bits > 0; m = m * 256 + buf[idx + i], i += d, bits -= 8) {\n      ;\n    }\n\n    if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;else if (e === 0) e = 1 - eBias;else {\n      m = m + Math.pow(2, ml);\n      e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - ml);\n  }\n\n  var __toBuffer, ___toBuffer;\n\n  __toBuffer = ___toBuffer = function toBuffer_(bufs) {\n    var x = [];\n\n    for (var i = 0; i < bufs[0].length; ++i) {\n      x.push.apply(x, bufs[0][i]);\n    }\n\n    return x;\n  };\n\n  var __utf16le, ___utf16le;\n\n  __utf16le = ___utf16le = function utf16le_(b, s, e) {\n    var ss = [];\n\n    for (var i = s; i < e; i += 2) {\n      ss.push(String.fromCharCode(__readUInt16LE(b, i)));\n    }\n\n    return ss.join(\"\");\n  };\n\n  var __hexlify, ___hexlify;\n\n  __hexlify = ___hexlify = function hexlify_(b, s, l) {\n    return b.slice(s, s + l).map(function (x) {\n      return (x < 16 ? \"0\" : \"\") + x.toString(16);\n    }).join(\"\");\n  };\n\n  var __utf8, ___utf8;\n\n  __utf8 = ___utf8 = function ___utf8(b, s, e) {\n    var ss = [];\n\n    for (var i = s; i < e; i++) {\n      ss.push(String.fromCharCode(__readUInt8(b, i)));\n    }\n\n    return ss.join(\"\");\n  };\n\n  var __lpstr, ___lpstr;\n\n  __lpstr = ___lpstr = function lpstr_(b, i) {\n    var len = __readUInt32LE(b, i);\n\n    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n  };\n\n  var __lpwstr, ___lpwstr;\n\n  __lpwstr = ___lpwstr = function lpwstr_(b, i) {\n    var len = 2 * __readUInt32LE(b, i);\n\n    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n  };\n\n  var __double, ___double;\n\n  __double = ___double = function ___double(b, idx) {\n    return readIEEE754(b, idx);\n  };\n\n  var is_buf = function is_buf_a(a) {\n    return Array.isArray(a);\n  };\n\n  if (has_buf) {\n    __utf16le = function utf16le_b(b, s, e) {\n      if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);\n      return b.toString('utf16le', s, e);\n    };\n\n    __hexlify = function __hexlify(b, s, l) {\n      return Buffer.isBuffer(b) ? b.toString('hex', s, s + l) : ___hexlify(b, s, l);\n    };\n\n    __lpstr = function lpstr_b(b, i) {\n      if (!Buffer.isBuffer(b)) return ___lpstr(b, i);\n      var len = b.readUInt32LE(i);\n      return len > 0 ? b.toString('utf8', i + 4, i + 4 + len - 1) : \"\";\n    };\n\n    __lpwstr = function lpwstr_b(b, i) {\n      if (!Buffer.isBuffer(b)) return ___lpwstr(b, i);\n      var len = 2 * b.readUInt32LE(i);\n      return b.toString('utf16le', i + 4, i + 4 + len - 1);\n    };\n\n    __utf8 = function utf8_b(s, e) {\n      return this.toString('utf8', s, e);\n    };\n\n    __toBuffer = function __toBuffer(bufs) {\n      return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);\n    };\n\n    bconcat = function bconcat(bufs) {\n      return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs);\n    };\n\n    __double = function double_(b, i) {\n      if (Buffer.isBuffer(b)) return b.readDoubleLE(i);\n      return ___double(b, i);\n    };\n\n    is_buf = function is_buf_b(a) {\n      return Buffer.isBuffer(a) || Array.isArray(a);\n    };\n  }\n  /* from js-xls */\n\n\n  if (typeof cptable !== 'undefined') {\n    __utf16le = function __utf16le(b, s, e) {\n      return cptable.utils.decode(1200, b.slice(s, e));\n    };\n\n    __utf8 = function __utf8(b, s, e) {\n      return cptable.utils.decode(65001, b.slice(s, e));\n    };\n\n    __lpstr = function __lpstr(b, i) {\n      var len = __readUInt32LE(b, i);\n\n      return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n    };\n\n    __lpwstr = function __lpwstr(b, i) {\n      var len = 2 * __readUInt32LE(b, i);\n\n      return len > 0 ? cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n    };\n  }\n\n  var __readUInt8 = function __readUInt8(b, idx) {\n    return b[idx];\n  };\n\n  var __readUInt16LE = function __readUInt16LE(b, idx) {\n    return b[idx + 1] * (1 << 8) + b[idx];\n  };\n\n  var __readInt16LE = function __readInt16LE(b, idx) {\n    var u = b[idx + 1] * (1 << 8) + b[idx];\n    return u < 0x8000 ? u : (0xffff - u + 1) * -1;\n  };\n\n  var __readUInt32LE = function __readUInt32LE(b, idx) {\n    return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n  };\n\n  var __readInt32LE = function __readInt32LE(b, idx) {\n    return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];\n  };\n\n  var ___unhexlify = function ___unhexlify(s) {\n    return s.match(/../g).map(function (x) {\n      return parseInt(x, 16);\n    });\n  };\n\n  var __unhexlify = typeof Buffer !== \"undefined\" ? function (s) {\n    return Buffer.isBuffer(s) ? new Buffer(s, 'hex') : ___unhexlify(s);\n  } : ___unhexlify;\n\n  function ReadShift(size, t) {\n    var o = \"\",\n        oI,\n        oR,\n        oo = [],\n        w,\n        vv,\n        i,\n        loc;\n\n    switch (t) {\n      case 'dbcs':\n        loc = this.l;\n        if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString(\"utf16le\");else for (i = 0; i != size; ++i) {\n          o += String.fromCharCode(__readUInt16LE(this, loc));\n          loc += 2;\n        }\n        size *= 2;\n        break;\n\n      case 'utf8':\n        o = __utf8(this, this.l, this.l + size);\n        break;\n\n      case 'utf16le':\n        size *= 2;\n        o = __utf16le(this, this.l, this.l + size);\n        break;\n\n      /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */\n\n      case 'lpstr':\n        o = __lpstr(this, this.l);\n        size = 5 + o.length;\n        break;\n\n      /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */\n\n      case 'lpwstr':\n        o = __lpwstr(this, this.l);\n        size = 5 + o.length;\n        if (o[o.length - 1] == \"\\0\") size += 2;\n        break;\n\n      case 'cstr':\n        size = 0;\n        o = \"\";\n\n        while ((w = __readUInt8(this, this.l + size++)) !== 0) {\n          oo.push(_getchar(w));\n        }\n\n        o = oo.join(\"\");\n        break;\n\n      case 'wstr':\n        size = 0;\n        o = \"\";\n\n        while ((w = __readUInt16LE(this, this.l + size)) !== 0) {\n          oo.push(_getchar(w));\n          size += 2;\n        }\n\n        size += 2;\n        o = oo.join(\"\");\n        break;\n\n      /* sbcs and dbcs support continue records in the SST way TODO codepages */\n\n      case 'dbcs-cont':\n        o = \"\";\n        loc = this.l;\n\n        for (i = 0; i != size; ++i) {\n          if (this.lens && this.lens.indexOf(loc) !== -1) {\n            w = __readUInt8(this, loc);\n            this.l = loc + 1;\n            vv = ReadShift.call(this, size - i, w ? 'dbcs-cont' : 'sbcs-cont');\n            return oo.join(\"\") + vv;\n          }\n\n          oo.push(_getchar(__readUInt16LE(this, loc)));\n          loc += 2;\n        }\n\n        o = oo.join(\"\");\n        size *= 2;\n        break;\n\n      case 'sbcs-cont':\n        o = \"\";\n        loc = this.l;\n\n        for (i = 0; i != size; ++i) {\n          if (this.lens && this.lens.indexOf(loc) !== -1) {\n            w = __readUInt8(this, loc);\n            this.l = loc + 1;\n            vv = ReadShift.call(this, size - i, w ? 'dbcs-cont' : 'sbcs-cont');\n            return oo.join(\"\") + vv;\n          }\n\n          oo.push(_getchar(__readUInt8(this, loc)));\n          loc += 1;\n        }\n\n        o = oo.join(\"\");\n        break;\n\n      default:\n        switch (size) {\n          case 1:\n            oI = __readUInt8(this, this.l);\n            this.l++;\n            return oI;\n\n          case 2:\n            oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l);\n            this.l += 2;\n            return oI;\n\n          case 4:\n            if (t === 'i' || (this[this.l + 3] & 0x80) === 0) {\n              oI = __readInt32LE(this, this.l);\n              this.l += 4;\n              return oI;\n            } else {\n              oR = __readUInt32LE(this, this.l);\n              this.l += 4;\n              return oR;\n            }\n\n            break;\n\n          case 8:\n            if (t === 'f') {\n              oR = __double(this, this.l);\n              this.l += 8;\n              return oR;\n            }\n\n          /* falls through */\n\n          case 16:\n            o = __hexlify(this, this.l, size);\n            break;\n        }\n\n    }\n\n    this.l += size;\n    return o;\n  }\n\n  function WriteShift(t, val, f) {\n    var size, i;\n\n    if (f === 'dbcs') {\n      for (i = 0; i != val.length; ++i) {\n        this.writeUInt16LE(val.charCodeAt(i), this.l + 2 * i);\n      }\n\n      size = 2 * val.length;\n    } else switch (t) {\n      case 1:\n        size = 1;\n        this[this.l] = val & 255;\n        break;\n\n      case 3:\n        size = 3;\n        this[this.l + 2] = val & 255;\n        val >>>= 8;\n        this[this.l + 1] = val & 255;\n        val >>>= 8;\n        this[this.l] = val & 255;\n        break;\n\n      case 4:\n        size = 4;\n        this.writeUInt32LE(val, this.l);\n        break;\n\n      case 8:\n        size = 8;\n\n        if (f === 'f') {\n          this.writeDoubleLE(val, this.l);\n          break;\n        }\n\n      /* falls through */\n\n      case 16:\n        break;\n\n      case -4:\n        size = 4;\n        this.writeInt32LE(val, this.l);\n        break;\n    }\n\n    this.l += size;\n    return this;\n  }\n\n  function CheckField(hexstr, fld) {\n    var m = __hexlify(this, this.l, hexstr.length >> 1);\n\n    if (m !== hexstr) throw fld + 'Expected ' + hexstr + ' saw ' + m;\n    this.l += hexstr.length >> 1;\n  }\n\n  function prep_blob(blob, pos) {\n    blob.l = pos;\n    blob.read_shift = ReadShift;\n    blob.chk = CheckField;\n    blob.write_shift = WriteShift;\n  }\n\n  function parsenoop(blob, length) {\n    blob.l += length;\n  }\n\n  function writenoop(blob, length) {\n    blob.l += length;\n  }\n\n  function new_buf(sz) {\n    var o = new_raw_buf(sz);\n    prep_blob(o, 0);\n    return o;\n  }\n  /* [MS-XLSB] 2.1.4 Record */\n\n\n  function recordhopper(data, cb, opts) {\n    var tmpbyte, cntbyte, length;\n    prep_blob(data, data.l || 0);\n\n    while (data.l < data.length) {\n      var RT = data.read_shift(1);\n      if (RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F) << 7);\n      var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];\n      tmpbyte = data.read_shift(1);\n      length = tmpbyte & 0x7F;\n\n      for (cntbyte = 1; cntbyte < 4 && tmpbyte & 0x80; ++cntbyte) {\n        length += ((tmpbyte = data.read_shift(1)) & 0x7F) << 7 * cntbyte;\n      }\n\n      var d = R.f(data, length, opts);\n      if (cb(d, R, RT)) return;\n    }\n  }\n  /* control buffer usage for fixed-length buffers */\n\n\n  function buf_array() {\n    var bufs = [],\n        blksz = 2048;\n\n    var newblk = function ba_newblk(sz) {\n      var o = new_buf(sz);\n      prep_blob(o, 0);\n      return o;\n    };\n\n    var curbuf = newblk(blksz);\n\n    var endbuf = function ba_endbuf() {\n      curbuf.length = curbuf.l;\n      if (curbuf.length > 0) bufs.push(curbuf);\n      curbuf = null;\n    };\n\n    var next = function ba_next(sz) {\n      if (sz < curbuf.length - curbuf.l) return curbuf;\n      endbuf();\n      return curbuf = newblk(Math.max(sz + 1, blksz));\n    };\n\n    var end = function ba_end() {\n      endbuf();\n      return __toBuffer([bufs]);\n    };\n\n    var push = function ba_push(buf) {\n      endbuf();\n      curbuf = buf;\n      next(blksz);\n    };\n\n    return {\n      next: next,\n      push: push,\n      end: end,\n      _bufs: bufs\n    };\n  }\n\n  function write_record(ba, type, payload, length) {\n    var t = evert_RE[type],\n        l;\n    if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;\n    l = 1 + (t >= 0x80 ? 1 : 0) + 1 + length;\n    if (length >= 0x80) ++l;\n    if (length >= 0x4000) ++l;\n    if (length >= 0x200000) ++l;\n    var o = ba.next(l);\n    if (t <= 0x7F) o.write_shift(1, t);else {\n      o.write_shift(1, (t & 0x7F) + 0x80);\n      o.write_shift(1, t >> 7);\n    }\n\n    for (var i = 0; i != 4; ++i) {\n      if (length >= 0x80) {\n        o.write_shift(1, (length & 0x7F) + 0x80);\n        length >>= 7;\n      } else {\n        o.write_shift(1, length);\n        break;\n      }\n    }\n\n    if (length > 0 && is_buf(payload)) ba.push(payload);\n  }\n  /* XLS ranges enforced */\n\n\n  function shift_cell_xls(cell, tgt) {\n    if (tgt.s) {\n      if (cell.cRel) cell.c += tgt.s.c;\n      if (cell.rRel) cell.r += tgt.s.r;\n    } else {\n      cell.c += tgt.c;\n      cell.r += tgt.r;\n    }\n\n    cell.cRel = cell.rRel = 0;\n\n    while (cell.c >= 0x100) {\n      cell.c -= 0x100;\n    }\n\n    while (cell.r >= 0x10000) {\n      cell.r -= 0x10000;\n    }\n\n    return cell;\n  }\n\n  function shift_range_xls(cell, range) {\n    cell.s = shift_cell_xls(cell.s, range.s);\n    cell.e = shift_cell_xls(cell.e, range.s);\n    return cell;\n  }\n\n  var OFFCRYPTO = {};\n\n  var make_offcrypto = function make_offcrypto(O, _crypto) {\n    var crypto;\n    if (typeof _crypto !== 'undefined') crypto = _crypto;else if (typeof require !== 'undefined') {\n      try {\n        crypto = require('cry' + 'pto');\n      } catch (e) {\n        crypto = null;\n      }\n    }\n\n    O.rc4 = function (key, data) {\n      var S = new Array(256);\n      var c = 0,\n          i = 0,\n          j = 0,\n          t = 0;\n\n      for (i = 0; i != 256; ++i) {\n        S[i] = i;\n      }\n\n      for (i = 0; i != 256; ++i) {\n        j = j + S[i] + key[i % key.length].charCodeAt(0) & 255;\n        t = S[i];\n        S[i] = S[j];\n        S[j] = t;\n      }\n\n      i = j = 0;\n      out = Buffer(data.length);\n\n      for (c = 0; c != data.length; ++c) {\n        i = i + 1 & 255;\n        j = (j + S[i]) % 256;\n        t = S[i];\n        S[i] = S[j];\n        S[j] = t;\n        out[c] = data[c] ^ S[S[i] + S[j] & 255];\n      }\n\n      return out;\n    };\n\n    if (crypto) {\n      O.md5 = function (hex) {\n        return crypto.createHash('md5').update(hex).digest('hex');\n      };\n    } else {\n      O.md5 = function (hex) {\n        throw \"unimplemented\";\n      };\n    }\n  };\n\n  make_offcrypto(OFFCRYPTO, typeof crypto !== \"undefined\" ? crypto : undefined);\n  /* [MS-XLSB] 2.5.143 */\n\n  function parse_StrRun(data, length) {\n    return {\n      ich: data.read_shift(2),\n      ifnt: data.read_shift(2)\n    };\n  }\n  /* [MS-XLSB] 2.1.7.121 */\n\n\n  function parse_RichStr(data, length) {\n    var start = data.l;\n    var flags = data.read_shift(1);\n    var str = parse_XLWideString(data);\n    var rgsStrRun = [];\n    var z = {\n      t: str,\n      h: str\n    };\n\n    if ((flags & 1) !== 0) {\n      /* fRichStr */\n\n      /* TODO: formatted string */\n      var dwSizeStrRun = data.read_shift(4);\n\n      for (var i = 0; i != dwSizeStrRun; ++i) {\n        rgsStrRun.push(parse_StrRun(data));\n      }\n\n      z.r = rgsStrRun;\n    } else z.r = \"<t>\" + escapexml(str) + \"</t>\";\n\n    if ((flags & 2) !== 0) {\n      /* fExtStr */\n\n      /* TODO: phonetic string */\n    }\n\n    data.l = start + length;\n    return z;\n  }\n\n  function write_RichStr(str, o) {\n    /* TODO: formatted string */\n    if (o == null) o = new_buf(5 + 2 * str.t.length);\n    o.write_shift(1, 0);\n    write_XLWideString(str.t, o);\n    return o;\n  }\n  /* [MS-XLSB] 2.5.9 */\n\n\n  function parse_XLSBCell(data) {\n    var col = data.read_shift(4);\n    var iStyleRef = data.read_shift(2);\n    iStyleRef += data.read_shift(1) << 16;\n    var fPhShow = data.read_shift(1);\n    return {\n      c: col,\n      iStyleRef: iStyleRef\n    };\n  }\n\n  function write_XLSBCell(cell, o) {\n    if (o == null) o = new_buf(8);\n    o.write_shift(-4, cell.c);\n    o.write_shift(3, cell.iStyleRef === undefined ? cell.iStyleRef : cell.s);\n    o.write_shift(1, 0);\n    /* fPhShow */\n\n    return o;\n  }\n  /* [MS-XLSB] 2.5.21 */\n\n\n  function parse_XLSBCodeName(data, length) {\n    return parse_XLWideString(data, length);\n  }\n  /* [MS-XLSB] 2.5.166 */\n\n\n  function parse_XLNullableWideString(data) {\n    var cchCharacters = data.read_shift(4);\n    return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n  }\n\n  function write_XLNullableWideString(data, o) {\n    if (!o) o = new_buf(127);\n    o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);\n    if (data.length > 0) o.write_shift(0, data, 'dbcs');\n    return o;\n  }\n  /* [MS-XLSB] 2.5.168 */\n\n\n  function parse_XLWideString(data) {\n    var cchCharacters = data.read_shift(4);\n    return cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n  }\n\n  function write_XLWideString(data, o) {\n    if (o == null) o = new_buf(4 + 2 * data.length);\n    o.write_shift(4, data.length);\n    if (data.length > 0) o.write_shift(0, data, 'dbcs');\n    return o;\n  }\n  /* [MS-XLSB] 2.5.114 */\n\n\n  var parse_RelID = parse_XLNullableWideString;\n  var write_RelID = write_XLNullableWideString;\n  /* [MS-XLSB] 2.5.122 */\n\n  /* [MS-XLS] 2.5.217 */\n\n  function parse_RkNumber(data) {\n    var b = data.slice(data.l, data.l + 4);\n    var fX100 = b[0] & 1,\n        fInt = b[0] & 2;\n    data.l += 4;\n    b[0] &= 0xFC; // b[0] &= ~3;\n\n    var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0], b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;\n    return fX100 ? RK / 100 : RK;\n  }\n  /* [MS-XLSB] 2.5.153 */\n\n\n  function parse_UncheckedRfX(data) {\n    var cell = {\n      s: {},\n      e: {}\n    };\n    cell.s.r = data.read_shift(4);\n    cell.e.r = data.read_shift(4);\n    cell.s.c = data.read_shift(4);\n    cell.e.c = data.read_shift(4);\n    return cell;\n  }\n\n  function write_UncheckedRfX(r, o) {\n    if (!o) o = new_buf(16);\n    o.write_shift(4, r.s.r);\n    o.write_shift(4, r.e.r);\n    o.write_shift(4, r.s.c);\n    o.write_shift(4, r.e.c);\n    return o;\n  }\n  /* [MS-XLSB] 2.5.171 */\n\n  /* [MS-XLS] 2.5.342 */\n\n\n  function parse_Xnum(data, length) {\n    return data.read_shift(8, 'f');\n  }\n\n  function write_Xnum(data, o) {\n    return (o || new_buf(8)).write_shift(8, 'f', data);\n  }\n  /* [MS-XLSB] 2.5.198.2 */\n\n\n  var BErr = {\n    0x00: \"#NULL!\",\n    0x07: \"#DIV/0!\",\n    0x0F: \"#VALUE!\",\n    0x17: \"#REF!\",\n    0x1D: \"#NAME?\",\n    0x24: \"#NUM!\",\n    0x2A: \"#N/A\",\n    0x2B: \"#GETTING_DATA\",\n    0xFF: \"#WTF?\"\n  };\n  var RBErr = evert_num(BErr);\n  /* [MS-XLSB] 2.4.321 BrtColor */\n\n  function parse_BrtColor(data, length) {\n    var out = {};\n    var d = data.read_shift(1);\n    out.fValidRGB = d & 1;\n    out.xColorType = d >>> 1;\n    out.index = data.read_shift(1);\n    out.nTintAndShade = data.read_shift(2, 'i');\n    out.bRed = data.read_shift(1);\n    out.bGreen = data.read_shift(1);\n    out.bBlue = data.read_shift(1);\n    out.bAlpha = data.read_shift(1);\n  }\n  /* [MS-XLSB] 2.5.52 */\n\n\n  function parse_FontFlags(data, length) {\n    var d = data.read_shift(1);\n    data.l++;\n    var out = {\n      fItalic: d & 0x2,\n      fStrikeout: d & 0x8,\n      fOutline: d & 0x10,\n      fShadow: d & 0x20,\n      fCondense: d & 0x40,\n      fExtend: d & 0x80\n    };\n    return out;\n  }\n  /* [MS-OLEPS] 2.2 PropertyType */\n\n\n  {\n    var VT_EMPTY = 0x0000;\n    var VT_NULL = 0x0001;\n    var VT_I2 = 0x0002;\n    var VT_I4 = 0x0003;\n    var VT_R4 = 0x0004;\n    var VT_R8 = 0x0005;\n    var VT_CY = 0x0006;\n    var VT_DATE = 0x0007;\n    var VT_BSTR = 0x0008;\n    var VT_ERROR = 0x000A;\n    var VT_BOOL = 0x000B;\n    var VT_VARIANT = 0x000C;\n    var VT_DECIMAL = 0x000E;\n    var VT_I1 = 0x0010;\n    var VT_UI1 = 0x0011;\n    var VT_UI2 = 0x0012;\n    var VT_UI4 = 0x0013;\n    var VT_I8 = 0x0014;\n    var VT_UI8 = 0x0015;\n    var VT_INT = 0x0016;\n    var VT_UINT = 0x0017;\n    var VT_LPSTR = 0x001E;\n    var VT_LPWSTR = 0x001F;\n    var VT_FILETIME = 0x0040;\n    var VT_BLOB = 0x0041;\n    var VT_STREAM = 0x0042;\n    var VT_STORAGE = 0x0043;\n    var VT_STREAMED_Object = 0x0044;\n    var VT_STORED_Object = 0x0045;\n    var VT_BLOB_Object = 0x0046;\n    var VT_CF = 0x0047;\n    var VT_CLSID = 0x0048;\n    var VT_VERSIONED_STREAM = 0x0049;\n    var VT_VECTOR = 0x1000;\n    var VT_ARRAY = 0x2000;\n    var VT_STRING = 0x0050; // 2.3.3.1.11 VtString\n\n    var VT_USTR = 0x0051; // 2.3.3.1.12 VtUnalignedString\n\n    var VT_CUSTOM = [VT_STRING, VT_USTR];\n  }\n  /* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */\n\n  var DocSummaryPIDDSI = {\n    0x01: {\n      n: 'CodePage',\n      t: VT_I2\n    },\n    0x02: {\n      n: 'Category',\n      t: VT_STRING\n    },\n    0x03: {\n      n: 'PresentationFormat',\n      t: VT_STRING\n    },\n    0x04: {\n      n: 'ByteCount',\n      t: VT_I4\n    },\n    0x05: {\n      n: 'LineCount',\n      t: VT_I4\n    },\n    0x06: {\n      n: 'ParagraphCount',\n      t: VT_I4\n    },\n    0x07: {\n      n: 'SlideCount',\n      t: VT_I4\n    },\n    0x08: {\n      n: 'NoteCount',\n      t: VT_I4\n    },\n    0x09: {\n      n: 'HiddenCount',\n      t: VT_I4\n    },\n    0x0a: {\n      n: 'MultimediaClipCount',\n      t: VT_I4\n    },\n    0x0b: {\n      n: 'Scale',\n      t: VT_BOOL\n    },\n    0x0c: {\n      n: 'HeadingPair',\n      t: VT_VECTOR | VT_VARIANT\n    },\n    0x0d: {\n      n: 'DocParts',\n      t: VT_VECTOR | VT_LPSTR\n    },\n    0x0e: {\n      n: 'Manager',\n      t: VT_STRING\n    },\n    0x0f: {\n      n: 'Company',\n      t: VT_STRING\n    },\n    0x10: {\n      n: 'LinksDirty',\n      t: VT_BOOL\n    },\n    0x11: {\n      n: 'CharacterCount',\n      t: VT_I4\n    },\n    0x13: {\n      n: 'SharedDoc',\n      t: VT_BOOL\n    },\n    0x16: {\n      n: 'HLinksChanged',\n      t: VT_BOOL\n    },\n    0x17: {\n      n: 'AppVersion',\n      t: VT_I4,\n      p: 'version'\n    },\n    0x1A: {\n      n: 'ContentType',\n      t: VT_STRING\n    },\n    0x1B: {\n      n: 'ContentStatus',\n      t: VT_STRING\n    },\n    0x1C: {\n      n: 'Language',\n      t: VT_STRING\n    },\n    0x1D: {\n      n: 'Version',\n      t: VT_STRING\n    },\n    0xFF: {}\n  };\n  /* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */\n\n  var SummaryPIDSI = {\n    0x01: {\n      n: 'CodePage',\n      t: VT_I2\n    },\n    0x02: {\n      n: 'Title',\n      t: VT_STRING\n    },\n    0x03: {\n      n: 'Subject',\n      t: VT_STRING\n    },\n    0x04: {\n      n: 'Author',\n      t: VT_STRING\n    },\n    0x05: {\n      n: 'Keywords',\n      t: VT_STRING\n    },\n    0x06: {\n      n: 'Comments',\n      t: VT_STRING\n    },\n    0x07: {\n      n: 'Template',\n      t: VT_STRING\n    },\n    0x08: {\n      n: 'LastAuthor',\n      t: VT_STRING\n    },\n    0x09: {\n      n: 'RevNumber',\n      t: VT_STRING\n    },\n    0x0A: {\n      n: 'EditTime',\n      t: VT_FILETIME\n    },\n    0x0B: {\n      n: 'LastPrinted',\n      t: VT_FILETIME\n    },\n    0x0C: {\n      n: 'CreatedDate',\n      t: VT_FILETIME\n    },\n    0x0D: {\n      n: 'ModifiedDate',\n      t: VT_FILETIME\n    },\n    0x0E: {\n      n: 'PageCount',\n      t: VT_I4\n    },\n    0x0F: {\n      n: 'WordCount',\n      t: VT_I4\n    },\n    0x10: {\n      n: 'CharCount',\n      t: VT_I4\n    },\n    0x11: {\n      n: 'Thumbnail',\n      t: VT_CF\n    },\n    0x12: {\n      n: 'ApplicationName',\n      t: VT_LPSTR\n    },\n    0x13: {\n      n: 'DocumentSecurity',\n      t: VT_I4\n    },\n    0xFF: {}\n  };\n  /* [MS-OLEPS] 2.18 */\n\n  var SpecialProperties = {\n    0x80000000: {\n      n: 'Locale',\n      t: VT_UI4\n    },\n    0x80000003: {\n      n: 'Behavior',\n      t: VT_UI4\n    },\n    0x72627262: {}\n  };\n\n  (function () {\n    for (var y in SpecialProperties) {\n      if (SpecialProperties.hasOwnProperty(y)) DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];\n    }\n  })();\n  /* [MS-XLS] 2.4.63 Country/Region codes */\n\n\n  var CountryEnum = {\n    0x0001: \"US\",\n    // United States\n    0x0002: \"CA\",\n    // Canada\n    0x0003: \"\",\n    // Latin America (except Brazil)\n    0x0007: \"RU\",\n    // Russia\n    0x0014: \"EG\",\n    // Egypt\n    0x001E: \"GR\",\n    // Greece\n    0x001F: \"NL\",\n    // Netherlands\n    0x0020: \"BE\",\n    // Belgium\n    0x0021: \"FR\",\n    // France\n    0x0022: \"ES\",\n    // Spain\n    0x0024: \"HU\",\n    // Hungary\n    0x0027: \"IT\",\n    // Italy\n    0x0029: \"CH\",\n    // Switzerland\n    0x002B: \"AT\",\n    // Austria\n    0x002C: \"GB\",\n    // United Kingdom\n    0x002D: \"DK\",\n    // Denmark\n    0x002E: \"SE\",\n    // Sweden\n    0x002F: \"NO\",\n    // Norway\n    0x0030: \"PL\",\n    // Poland\n    0x0031: \"DE\",\n    // Germany\n    0x0034: \"MX\",\n    // Mexico\n    0x0037: \"BR\",\n    // Brazil\n    0x003d: \"AU\",\n    // Australia\n    0x0040: \"NZ\",\n    // New Zealand\n    0x0042: \"TH\",\n    // Thailand\n    0x0051: \"JP\",\n    // Japan\n    0x0052: \"KR\",\n    // Korea\n    0x0054: \"VN\",\n    // Viet Nam\n    0x0056: \"CN\",\n    // China\n    0x005A: \"TR\",\n    // Turkey\n    0x0069: \"JS\",\n    // Ramastan\n    0x00D5: \"DZ\",\n    // Algeria\n    0x00D8: \"MA\",\n    // Morocco\n    0x00DA: \"LY\",\n    // Libya\n    0x015F: \"PT\",\n    // Portugal\n    0x0162: \"IS\",\n    // Iceland\n    0x0166: \"FI\",\n    // Finland\n    0x01A4: \"CZ\",\n    // Czech Republic\n    0x0376: \"TW\",\n    // Taiwan\n    0x03C1: \"LB\",\n    // Lebanon\n    0x03C2: \"JO\",\n    // Jordan\n    0x03C3: \"SY\",\n    // Syria\n    0x03C4: \"IQ\",\n    // Iraq\n    0x03C5: \"KW\",\n    // Kuwait\n    0x03C6: \"SA\",\n    // Saudi Arabia\n    0x03CB: \"AE\",\n    // United Arab Emirates\n    0x03CC: \"IL\",\n    // Israel\n    0x03CE: \"QA\",\n    // Qatar\n    0x03D5: \"IR\",\n    // Iran\n    0xFFFF: \"US\" // United States\n\n  };\n  /* [MS-XLS] 2.5.127 */\n\n  var XLSFillPattern = [null, 'solid', 'mediumGray', 'darkGray', 'lightGray', 'darkHorizontal', 'darkVertical', 'darkDown', 'darkUp', 'darkGrid', 'darkTrellis', 'lightHorizontal', 'lightVertical', 'lightDown', 'lightUp', 'lightGrid', 'lightTrellis', 'gray125', 'gray0625'];\n\n  function rgbify(arr) {\n    return arr.map(function (x) {\n      return [x >> 16 & 255, x >> 8 & 255, x & 255];\n    });\n  }\n  /* [MS-XLS] 2.5.161 */\n\n\n  var XLSIcv = rgbify([\n  /* Color Constants */\n  0x000000, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF,\n  /* Defaults */\n  0x000000, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF, 0x800000, 0x008000, 0x000080, 0x808000, 0x800080, 0x008080, 0xC0C0C0, 0x808080, 0x9999FF, 0x993366, 0xFFFFCC, 0xCCFFFF, 0x660066, 0xFF8080, 0x0066CC, 0xCCCCFF, 0x000080, 0xFF00FF, 0xFFFF00, 0x00FFFF, 0x800080, 0x800000, 0x008080, 0x0000FF, 0x00CCFF, 0xCCFFFF, 0xCCFFCC, 0xFFFF99, 0x99CCFF, 0xFF99CC, 0xCC99FF, 0xFFCC99, 0x3366FF, 0x33CCCC, 0x99CC00, 0xFFCC00, 0xFF9900, 0xFF6600, 0x666699, 0x969696, 0x003366, 0x339966, 0x003300, 0x333300, 0x993300, 0x993366, 0x333399, 0x333333,\n  /* Sheet */\n  0xFFFFFF, 0x000000]);\n  /* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */\n\n  /* 12.3 Part Summary <SpreadsheetML> */\n\n  /* 14.2 Part Summary <DrawingML> */\n\n  /* [MS-XLSX] 2.1 Part Enumerations */\n\n  /* [MS-XLSB] 2.1.7 Part Enumeration */\n\n  var ct2type = {\n    /* Workbook */\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": \"workbooks\",\n\n    /* Worksheet */\n    \"application/vnd.ms-excel.binIndexWs\": \"TODO\",\n\n    /* Binary Index */\n\n    /* Chartsheet */\n    \"application/vnd.ms-excel.chartsheet\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": \"TODO\",\n\n    /* Dialogsheet */\n    \"application/vnd.ms-excel.dialogsheet\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": \"TODO\",\n\n    /* Macrosheet */\n    \"application/vnd.ms-excel.macrosheet\": \"TODO\",\n    \"application/vnd.ms-excel.macrosheet+xml\": \"TODO\",\n    \"application/vnd.ms-excel.intlmacrosheet\": \"TODO\",\n    \"application/vnd.ms-excel.binIndexMs\": \"TODO\",\n\n    /* Binary Index */\n\n    /* File Properties */\n    \"application/vnd.openxmlformats-package.core-properties+xml\": \"coreprops\",\n    \"application/vnd.openxmlformats-officedocument.custom-properties+xml\": \"custprops\",\n    \"application/vnd.openxmlformats-officedocument.extended-properties+xml\": \"extprops\",\n\n    /* Custom Data Properties */\n    \"application/vnd.openxmlformats-officedocument.customXmlProperties+xml\": \"TODO\",\n\n    /* Comments */\n    \"application/vnd.ms-excel.comments\": \"comments\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": \"comments\",\n\n    /* PivotTable */\n    \"application/vnd.ms-excel.pivotTable\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml\": \"TODO\",\n\n    /* Calculation Chain */\n    \"application/vnd.ms-excel.calcChain\": \"calcchains\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\": \"calcchains\",\n\n    /* Printer Settings */\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\": \"TODO\",\n\n    /* ActiveX */\n    \"application/vnd.ms-office.activeX\": \"TODO\",\n    \"application/vnd.ms-office.activeX+xml\": \"TODO\",\n\n    /* Custom Toolbars */\n    \"application/vnd.ms-excel.attachedToolbars\": \"TODO\",\n\n    /* External Data Connections */\n    \"application/vnd.ms-excel.connections\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": \"TODO\",\n\n    /* External Links */\n    \"application/vnd.ms-excel.externalLink\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml\": \"TODO\",\n\n    /* Metadata */\n    \"application/vnd.ms-excel.sheetMetadata\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\": \"TODO\",\n\n    /* PivotCache */\n    \"application/vnd.ms-excel.pivotCacheDefinition\": \"TODO\",\n    \"application/vnd.ms-excel.pivotCacheRecords\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml\": \"TODO\",\n\n    /* Query Table */\n    \"application/vnd.ms-excel.queryTable\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml\": \"TODO\",\n\n    /* Shared Workbook */\n    \"application/vnd.ms-excel.userNames\": \"TODO\",\n    \"application/vnd.ms-excel.revisionHeaders\": \"TODO\",\n    \"application/vnd.ms-excel.revisionLog\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml\": \"TODO\",\n\n    /* Single Cell Table */\n    \"application/vnd.ms-excel.tableSingleCells\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml\": \"TODO\",\n\n    /* Slicer */\n    \"application/vnd.ms-excel.slicer\": \"TODO\",\n    \"application/vnd.ms-excel.slicerCache\": \"TODO\",\n    \"application/vnd.ms-excel.slicer+xml\": \"TODO\",\n    \"application/vnd.ms-excel.slicerCache+xml\": \"TODO\",\n\n    /* Sort Map */\n    \"application/vnd.ms-excel.wsSortMap\": \"TODO\",\n\n    /* Table */\n    \"application/vnd.ms-excel.table\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": \"TODO\",\n\n    /* Themes */\n    \"application/vnd.openxmlformats-officedocument.theme+xml\": \"themes\",\n\n    /* Timeline */\n    \"application/vnd.ms-excel.Timeline+xml\": \"TODO\",\n\n    /* verify */\n    \"application/vnd.ms-excel.TimelineCache+xml\": \"TODO\",\n\n    /* verify */\n\n    /* VBA */\n    \"application/vnd.ms-office.vbaProject\": \"vba\",\n    \"application/vnd.ms-office.vbaProjectSignature\": \"vba\",\n\n    /* Volatile Dependencies */\n    \"application/vnd.ms-office.volatileDependencies\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml\": \"TODO\",\n\n    /* Control Properties */\n    \"application/vnd.ms-excel.controlproperties+xml\": \"TODO\",\n\n    /* Data Model */\n    \"application/vnd.openxmlformats-officedocument.model+data\": \"TODO\",\n\n    /* Survey */\n    \"application/vnd.ms-excel.Survey+xml\": \"TODO\",\n\n    /* Drawing */\n    \"application/vnd.openxmlformats-officedocument.drawing+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml\": \"TODO\",\n\n    /* VML */\n    \"application/vnd.openxmlformats-officedocument.vmlDrawing\": \"TODO\",\n    \"application/vnd.openxmlformats-package.relationships+xml\": \"rels\",\n    \"application/vnd.openxmlformats-officedocument.oleObject\": \"TODO\",\n    \"sheet\": \"js\"\n  };\n\n  var CT_LIST = function () {\n    var o = {\n      workbooks: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\",\n        xlsm: \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\",\n        xlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\",\n        xltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\"\n      },\n      strs: {\n        /* Shared Strings */\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\",\n        xlsb: \"application/vnd.ms-excel.sharedStrings\"\n      },\n      sheets: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\",\n        xlsb: \"application/vnd.ms-excel.worksheet\"\n      },\n      styles: {\n        /* Styles */\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\",\n        xlsb: \"application/vnd.ms-excel.styles\"\n      }\n    };\n    keys(o).forEach(function (k) {\n      if (!o[k].xlsm) o[k].xlsm = o[k].xlsx;\n    });\n    keys(o).forEach(function (k) {\n      keys(o[k]).forEach(function (v) {\n        ct2type[o[k][v]] = k;\n      });\n    });\n    return o;\n  }();\n\n  var type2ct = evert_arr(ct2type);\n  XMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';\n\n  function parse_ct(data, opts) {\n    var ctext = {};\n    if (!data || !data.match) return data;\n    var ct = {\n      workbooks: [],\n      sheets: [],\n      calcchains: [],\n      themes: [],\n      styles: [],\n      coreprops: [],\n      extprops: [],\n      custprops: [],\n      strs: [],\n      comments: [],\n      vba: [],\n      TODO: [],\n      rels: [],\n      xmlns: \"\"\n    };\n    (data.match(tagregex) || []).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0].replace(nsregex, \"<\")) {\n        case '<?xml':\n          break;\n\n        case '<Types':\n          ct.xmlns = y['xmlns' + (y[0].match(/<(\\w+):/) || [\"\", \"\"])[1]];\n          break;\n\n        case '<Default':\n          ctext[y.Extension] = y.ContentType;\n          break;\n\n        case '<Override':\n          if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);else if (opts.WTF) console.error(y);\n          break;\n      }\n    });\n    if (ct.xmlns !== XMLNS.CT) throw new Error(\"Unknown Namespace: \" + ct.xmlns);\n    ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : \"\";\n    ct.sst = ct.strs.length > 0 ? ct.strs[0] : \"\";\n    ct.style = ct.styles.length > 0 ? ct.styles[0] : \"\";\n    ct.defaults = ctext;\n    delete ct.calcchains;\n    return ct;\n  }\n\n  var CTYPE_XML_ROOT = writextag('Types', null, {\n    'xmlns': XMLNS.CT,\n    'xmlns:xsd': XMLNS.xsd,\n    'xmlns:xsi': XMLNS.xsi\n  });\n  var CTYPE_DEFAULTS = [['xml', 'application/xml'], ['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'], ['rels', type2ct.rels[0]]].map(function (x) {\n    return writextag('Default', null, {\n      'Extension': x[0],\n      'ContentType': x[1]\n    });\n  });\n\n  function write_ct(ct, opts) {\n    var o = [],\n        v;\n    o[o.length] = XML_HEADER;\n    o[o.length] = CTYPE_XML_ROOT;\n    o = o.concat(CTYPE_DEFAULTS);\n\n    var f1 = function f1(w) {\n      if (ct[w] && ct[w].length > 0) {\n        v = ct[w][0];\n        o[o.length] = writextag('Override', null, {\n          'PartName': (v[0] == '/' ? \"\" : \"/\") + v,\n          'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n        });\n      }\n    };\n\n    var f2 = function f2(w) {\n      ct[w].forEach(function (v) {\n        o[o.length] = writextag('Override', null, {\n          'PartName': (v[0] == '/' ? \"\" : \"/\") + v,\n          'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n        });\n      });\n    };\n\n    var f3 = function f3(t) {\n      (ct[t] || []).forEach(function (v) {\n        o[o.length] = writextag('Override', null, {\n          'PartName': (v[0] == '/' ? \"\" : \"/\") + v,\n          'ContentType': type2ct[t][0]\n        });\n      });\n    };\n\n    f1('workbooks');\n    f2('sheets');\n    f3('themes');\n    ['strs', 'styles'].forEach(f1);\n    ['coreprops', 'extprops', 'custprops'].forEach(f3);\n\n    if (o.length > 2) {\n      o[o.length] = '</Types>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* 9.3.2 OPC Relationships Markup */\n\n\n  var RELS = {\n    WB: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n    SHEET: \"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"\n  };\n\n  function parse_rels(data, currentFilePath) {\n    if (!data) return data;\n\n    if (currentFilePath.charAt(0) !== '/') {\n      currentFilePath = '/' + currentFilePath;\n    }\n\n    var rels = {};\n    var hash = {};\n\n    var resolveRelativePathIntoAbsolute = function resolveRelativePathIntoAbsolute(to) {\n      var toksFrom = currentFilePath.split('/');\n      toksFrom.pop(); // folder path\n\n      var toksTo = to.split('/');\n      var reversed = [];\n\n      while (toksTo.length !== 0) {\n        var tokTo = toksTo.shift();\n\n        if (tokTo === '..') {\n          toksFrom.pop();\n        } else if (tokTo !== '.') {\n          toksFrom.push(tokTo);\n        }\n      }\n\n      return toksFrom.join('/');\n    };\n\n    data.match(tagregex).forEach(function (x) {\n      var y = parsexmltag(x);\n      /* 9.3.2.2 OPC_Relationships */\n\n      if (y[0] === '<Relationship') {\n        var rel = {};\n        rel.Type = y.Type;\n        rel.Target = y.Target;\n        rel.Id = y.Id;\n        rel.TargetMode = y.TargetMode;\n        var canonictarget = y.TargetMode === 'External' ? y.Target : resolveRelativePathIntoAbsolute(y.Target);\n        rels[canonictarget] = rel;\n        hash[y.Id] = rel;\n      }\n    });\n    rels[\"!id\"] = hash;\n    return rels;\n  }\n\n  XMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';\n  var RELS_ROOT = writextag('Relationships', null, {\n    //'xmlns:ns0': XMLNS.RELS,\n    'xmlns': XMLNS.RELS\n  });\n  /* TODO */\n\n  function write_rels(rels) {\n    var o = [];\n    o[o.length] = XML_HEADER;\n    o[o.length] = RELS_ROOT;\n    keys(rels['!id']).forEach(function (rid) {\n      var rel = rels['!id'][rid];\n      o[o.length] = writextag('Relationship', null, rel);\n    });\n\n    if (o.length > 2) {\n      o[o.length] = '</Relationships>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* ECMA-376 Part II 11.1 Core Properties Part */\n\n  /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\n\n\n  var CORE_PROPS = [[\"cp:category\", \"Category\"], [\"cp:contentStatus\", \"ContentStatus\"], [\"cp:keywords\", \"Keywords\"], [\"cp:lastModifiedBy\", \"LastAuthor\"], [\"cp:lastPrinted\", \"LastPrinted\"], [\"cp:revision\", \"RevNumber\"], [\"cp:version\", \"Version\"], [\"dc:creator\", \"Author\"], [\"dc:description\", \"Comments\"], [\"dc:identifier\", \"Identifier\"], [\"dc:language\", \"Language\"], [\"dc:subject\", \"Subject\"], [\"dc:title\", \"Title\"], [\"dcterms:created\", \"CreatedDate\", 'date'], [\"dcterms:modified\", \"ModifiedDate\", 'date']];\n  XMLNS.CORE_PROPS = \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\";\n  RELS.CORE_PROPS = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';\n\n  var CORE_PROPS_REGEX = function () {\n    var r = new Array(CORE_PROPS.length);\n\n    for (var i = 0; i < CORE_PROPS.length; ++i) {\n      var f = CORE_PROPS[i];\n      var g = \"(?:\" + f[0].substr(0, f[0].indexOf(\":\")) + \":)\" + f[0].substr(f[0].indexOf(\":\") + 1);\n      r[i] = new RegExp(\"<\" + g + \"[^>]*>(.*)<\\/\" + g + \">\");\n    }\n\n    return r;\n  }();\n\n  function parse_core_props(data) {\n    var p = {};\n\n    for (var i = 0; i < CORE_PROPS.length; ++i) {\n      var f = CORE_PROPS[i],\n          cur = data.match(CORE_PROPS_REGEX[i]);\n      if (cur != null && cur.length > 0) p[f[1]] = cur[1];\n      if (f[2] === 'date' && p[f[1]]) p[f[1]] = new Date(p[f[1]]);\n    }\n\n    return p;\n  }\n\n  var CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {\n    //'xmlns': XMLNS.CORE_PROPS,\n    'xmlns:cp': XMLNS.CORE_PROPS,\n    'xmlns:dc': XMLNS.dc,\n    'xmlns:dcterms': XMLNS.dcterms,\n    'xmlns:dcmitype': XMLNS.dcmitype,\n    'xmlns:xsi': XMLNS.xsi\n  });\n\n  function cp_doit(f, g, h, o, p) {\n    if (p[f] != null || g == null || g === \"\") return;\n    p[f] = g;\n    o[o.length] = h ? writextag(f, g, h) : writetag(f, g);\n  }\n\n  function write_core_props(cp, opts) {\n    var o = [XML_HEADER, CORE_PROPS_XML_ROOT],\n        p = {};\n\n    if (opts && opts.Props) {\n      if (opts.Props.title) o[o.length] = '<dc:title>' + opts.Props.title + '</dc:title>';\n      if (opts.Props.subject) o[o.length] = '<dc:subject>' + opts.Props.subject + '</dc:subject>';\n      if (opts.Props.creator) o[o.length] = '<dc:creator>' + opts.Props.creator + '</dc:creator>';\n      if (opts.Props.keywords) o[o.length] = '<cp:keywords>' + opts.Props.keywords + '</cp:keywords>';\n      if (opts.Props.description) o[o.length] = '<dc:description>' + opts.Props.description + '</dc:description>';\n    }\n\n    if (cp) {\n      if (cp.CreatedDate != null) cp_doit(\"dcterms:created\", typeof cp.CreatedDate === \"string\" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {\n        \"xsi:type\": \"dcterms:W3CDTF\"\n      }, o, p);\n      if (cp.ModifiedDate != null) cp_doit(\"dcterms:modified\", typeof cp.ModifiedDate === \"string\" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {\n        \"xsi:type\": \"dcterms:W3CDTF\"\n      }, o, p);\n\n      for (var i = 0; i != CORE_PROPS.length; ++i) {\n        var f = CORE_PROPS[i];\n        cp_doit(f[0], cp[f[1]], null, o, p);\n      }\n    }\n\n    if (o.length > 2) {\n      o[o.length] = '</cp:coreProperties>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* 15.2.12.3 Extended File Properties Part */\n\n  /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\n\n\n  var EXT_PROPS = [[\"Application\", \"Application\", \"string\"], [\"AppVersion\", \"AppVersion\", \"string\"], [\"Company\", \"Company\", \"string\"], [\"DocSecurity\", \"DocSecurity\", \"string\"], [\"Manager\", \"Manager\", \"string\"], [\"HyperlinksChanged\", \"HyperlinksChanged\", \"bool\"], [\"SharedDoc\", \"SharedDoc\", \"bool\"], [\"LinksUpToDate\", \"LinksUpToDate\", \"bool\"], [\"ScaleCrop\", \"ScaleCrop\", \"bool\"], [\"HeadingPairs\", \"HeadingPairs\", \"raw\"], [\"TitlesOfParts\", \"TitlesOfParts\", \"raw\"]];\n  XMLNS.EXT_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\";\n  RELS.EXT_PROPS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';\n\n  function parse_ext_props(data, p) {\n    var q = {};\n    if (!p) p = {};\n    EXT_PROPS.forEach(function (f) {\n      switch (f[2]) {\n        case \"string\":\n          p[f[1]] = (data.match(matchtag(f[0])) || [])[1];\n          break;\n\n        case \"bool\":\n          p[f[1]] = (data.match(matchtag(f[0])) || [])[1] === \"true\";\n          break;\n\n        case \"raw\":\n          var cur = data.match(new RegExp(\"<\" + f[0] + \"[^>]*>(.*)<\\/\" + f[0] + \">\"));\n          if (cur && cur.length > 0) q[f[1]] = cur[1];\n          break;\n      }\n    });\n\n    if (q.HeadingPairs && q.TitlesOfParts) {\n      var v = parseVector(q.HeadingPairs);\n      var j = 0,\n          widx = 0;\n\n      for (var i = 0; i !== v.length; ++i) {\n        switch (v[i].v) {\n          case \"Worksheets\":\n            widx = j;\n            p.Worksheets = +v[++i].v;\n            break;\n\n          case \"Named Ranges\":\n            ++i;\n            break;\n          // TODO: Handle Named Ranges\n        }\n      }\n\n      var parts = parseVector(q.TitlesOfParts).map(function (x) {\n        return utf8read(x.v);\n      });\n      p.SheetNames = parts.slice(widx, widx + p.Worksheets);\n    }\n\n    return p;\n  }\n\n  var EXT_PROPS_XML_ROOT = writextag('Properties', null, {\n    'xmlns': XMLNS.EXT_PROPS,\n    'xmlns:vt': XMLNS.vt\n  });\n\n  function write_ext_props(cp, opts) {\n    var o = [],\n        p = {},\n        W = writextag;\n    if (!cp) cp = {};\n    cp.Application = \"SheetJS\";\n    o[o.length] = XML_HEADER;\n    o[o.length] = EXT_PROPS_XML_ROOT;\n    EXT_PROPS.forEach(function (f) {\n      if (cp[f[1]] === undefined) return;\n      var v;\n\n      switch (f[2]) {\n        case 'string':\n          v = cp[f[1]];\n          break;\n\n        case 'bool':\n          v = cp[f[1]] ? 'true' : 'false';\n          break;\n      }\n\n      if (v !== undefined) o[o.length] = W(f[0], v);\n    });\n    /* TODO: HeadingPairs, TitlesOfParts */\n\n    o[o.length] = W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>') + W('vt:variant', W('vt:i4', String(cp.Worksheets))), {\n      size: 2,\n      baseType: \"variant\"\n    }));\n    o[o.length] = W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function (s) {\n      return \"<vt:lpstr>\" + s + \"</vt:lpstr>\";\n    }).join(\"\"), {\n      size: cp.Worksheets,\n      baseType: \"lpstr\"\n    }));\n\n    if (o.length > 2) {\n      o[o.length] = '</Properties>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* 15.2.12.2 Custom File Properties Part */\n\n\n  XMLNS.CUST_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\";\n  RELS.CUST_PROPS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';\n  var custregex = /<[^>]+>[^<]*/g;\n\n  function parse_cust_props(data, opts) {\n    var p = {},\n        name;\n    var m = data.match(custregex);\n    if (m) for (var i = 0; i != m.length; ++i) {\n      var x = m[i],\n          y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<?xml':\n          break;\n\n        case '<Properties':\n          if (y.xmlns !== XMLNS.CUST_PROPS) throw \"unrecognized xmlns \" + y.xmlns;\n          if (y.xmlnsvt && y.xmlnsvt !== XMLNS.vt) throw \"unrecognized vt \" + y.xmlnsvt;\n          break;\n\n        case '<property':\n          name = y.name;\n          break;\n\n        case '</property>':\n          name = null;\n          break;\n\n        default:\n          if (x.indexOf('<vt:') === 0) {\n            var toks = x.split('>');\n            var type = toks[0].substring(4),\n                text = toks[1];\n            /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */\n\n            switch (type) {\n              case 'lpstr':\n              case 'lpwstr':\n              case 'bstr':\n              case 'lpwstr':\n                p[name] = unescapexml(text);\n                break;\n\n              case 'bool':\n                p[name] = parsexmlbool(text, '<vt:bool>');\n                break;\n\n              case 'i1':\n              case 'i2':\n              case 'i4':\n              case 'i8':\n              case 'int':\n              case 'uint':\n                p[name] = parseInt(text, 10);\n                break;\n\n              case 'r4':\n              case 'r8':\n              case 'decimal':\n                p[name] = parseFloat(text);\n                break;\n\n              case 'filetime':\n              case 'date':\n                p[name] = new Date(text);\n                break;\n\n              case 'cy':\n              case 'error':\n                p[name] = unescapexml(text);\n                break;\n\n              default:\n                if (typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);\n            }\n          } else if (x.substr(0, 2) === \"</\") {} else if (opts.WTF) throw new Error(x);\n\n      }\n    }\n    return p;\n  }\n\n  var CUST_PROPS_XML_ROOT = writextag('Properties', null, {\n    'xmlns': XMLNS.CUST_PROPS,\n    'xmlns:vt': XMLNS.vt\n  });\n\n  function write_cust_props(cp, opts) {\n    var o = [XML_HEADER, CUST_PROPS_XML_ROOT];\n    if (!cp) return o.join(\"\");\n    var pid = 1;\n    keys(cp).forEach(function custprop(k) {\n      ++pid;\n      o[o.length] = writextag('property', write_vt(cp[k]), {\n        'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',\n        'pid': pid,\n        'name': k\n      });\n    });\n\n    if (o.length > 2) {\n      o[o.length] = '</Properties>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n\n  function xlml_set_prop(Props, tag, val) {\n    /* TODO: Normalize the properties */\n    switch (tag) {\n      case 'Description':\n        tag = 'Comments';\n        break;\n    }\n\n    Props[tag] = val;\n  }\n  /* [MS-DTYP] 2.3.3 FILETIME */\n\n  /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */\n\n  /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */\n\n\n  function parse_FILETIME(blob) {\n    var dwLowDateTime = blob.read_shift(4),\n        dwHighDateTime = blob.read_shift(4);\n    return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1000).toISOString().replace(/\\.000/, \"\");\n  }\n  /* [MS-OSHARED] 2.3.3.1.4 Lpstr */\n\n\n  function parse_lpstr(blob, type, pad) {\n    var str = blob.read_shift(0, 'lpstr');\n    if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;\n    return str;\n  }\n  /* [MS-OSHARED] 2.3.3.1.6 Lpwstr */\n\n\n  function parse_lpwstr(blob, type, pad) {\n    var str = blob.read_shift(0, 'lpwstr');\n    if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;\n    return str;\n  }\n  /* [MS-OSHARED] 2.3.3.1.11 VtString */\n\n  /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */\n\n\n  function parse_VtStringBase(blob, stringType, pad) {\n    if (stringType === 0x1F\n    /*VT_LPWSTR*/\n    ) return parse_lpwstr(blob);\n    return parse_lpstr(blob, stringType, pad);\n  }\n\n  function parse_VtString(blob, t, pad) {\n    return parse_VtStringBase(blob, t, pad === false ? 0 : 4);\n  }\n\n  function parse_VtUnalignedString(blob, t) {\n    if (!t) throw new Error(\"dafuq?\");\n    return parse_VtStringBase(blob, t, 0);\n  }\n  /* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */\n\n\n  function parse_VtVecUnalignedLpstrValue(blob) {\n    var length = blob.read_shift(4);\n    var ret = [];\n\n    for (var i = 0; i != length; ++i) {\n      ret[i] = blob.read_shift(0, 'lpstr');\n    }\n\n    return ret;\n  }\n  /* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */\n\n\n  function parse_VtVecUnalignedLpstr(blob) {\n    return parse_VtVecUnalignedLpstrValue(blob);\n  }\n  /* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */\n\n\n  function parse_VtHeadingPair(blob) {\n    var headingString = parse_TypedPropertyValue(blob, VT_USTR);\n    var headerParts = parse_TypedPropertyValue(blob, VT_I4);\n    return [headingString, headerParts];\n  }\n  /* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */\n\n\n  function parse_VtVecHeadingPairValue(blob) {\n    var cElements = blob.read_shift(4);\n    var out = [];\n\n    for (var i = 0; i != cElements / 2; ++i) {\n      out.push(parse_VtHeadingPair(blob));\n    }\n\n    return out;\n  }\n  /* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */\n\n\n  function parse_VtVecHeadingPair(blob) {\n    // NOTE: When invoked, wType & padding were already consumed\n    return parse_VtVecHeadingPairValue(blob);\n  }\n  /* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */\n\n\n  function parse_dictionary(blob, CodePage) {\n    var cnt = blob.read_shift(4);\n    var dict = {};\n\n    for (var j = 0; j != cnt; ++j) {\n      var pid = blob.read_shift(4);\n      var len = blob.read_shift(4);\n      dict[pid] = blob.read_shift(len, CodePage === 0x4B0 ? 'utf16le' : 'utf8').replace(chr0, '').replace(chr1, '!');\n    }\n\n    if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2;\n    return dict;\n  }\n  /* [MS-OLEPS] 2.9 BLOB */\n\n\n  function parse_BLOB(blob) {\n    var size = blob.read_shift(4);\n    var bytes = blob.slice(blob.l, blob.l + size);\n    if (size & 3 > 0) blob.l += 4 - (size & 3) & 3;\n    return bytes;\n  }\n  /* [MS-OLEPS] 2.11 ClipboardData */\n\n\n  function parse_ClipboardData(blob) {\n    // TODO\n    var o = {};\n    o.Size = blob.read_shift(4); //o.Format = blob.read_shift(4);\n\n    blob.l += o.Size;\n    return o;\n  }\n  /* [MS-OLEPS] 2.14 Vector and Array Property Types */\n\n\n  function parse_VtVector(blob, cb) {}\n  /* [MS-OLEPS] 2.14.2 VectorHeader */\n\n  /*\tvar Length = blob.read_shift(4);\n  \tvar o = [];\n  \tfor(var i = 0; i != Length; ++i) {\n  \t\to.push(cb(blob));\n  \t}\n  \treturn o;*/\n\n  /* [MS-OLEPS] 2.15 TypedPropertyValue */\n\n\n  function parse_TypedPropertyValue(blob, type, _opts) {\n    var t = blob.read_shift(2),\n        ret,\n        opts = _opts || {};\n    blob.l += 2;\n    if (type !== VT_VARIANT) if (t !== type && VT_CUSTOM.indexOf(type) === -1) throw new Error('Expected type ' + type + ' saw ' + t);\n\n    switch (type === VT_VARIANT ? t : type) {\n      case 0x02\n      /*VT_I2*/\n      :\n        ret = blob.read_shift(2, 'i');\n        if (!opts.raw) blob.l += 2;\n        return ret;\n\n      case 0x03\n      /*VT_I4*/\n      :\n        ret = blob.read_shift(4, 'i');\n        return ret;\n\n      case 0x0B\n      /*VT_BOOL*/\n      :\n        return blob.read_shift(4) !== 0x0;\n\n      case 0x13\n      /*VT_UI4*/\n      :\n        ret = blob.read_shift(4);\n        return ret;\n\n      case 0x1E\n      /*VT_LPSTR*/\n      :\n        return parse_lpstr(blob, t, 4).replace(chr0, '');\n\n      case 0x1F\n      /*VT_LPWSTR*/\n      :\n        return parse_lpwstr(blob);\n\n      case 0x40\n      /*VT_FILETIME*/\n      :\n        return parse_FILETIME(blob);\n\n      case 0x41\n      /*VT_BLOB*/\n      :\n        return parse_BLOB(blob);\n\n      case 0x47\n      /*VT_CF*/\n      :\n        return parse_ClipboardData(blob);\n\n      case 0x50\n      /*VT_STRING*/\n      :\n        return parse_VtString(blob, t, !opts.raw && 4).replace(chr0, '');\n\n      case 0x51\n      /*VT_USTR*/\n      :\n        return parse_VtUnalignedString(blob, t, 4).replace(chr0, '');\n\n      case 0x100C\n      /*VT_VECTOR|VT_VARIANT*/\n      :\n        return parse_VtVecHeadingPair(blob);\n\n      case 0x101E\n      /*VT_LPSTR*/\n      :\n        return parse_VtVecUnalignedLpstr(blob);\n\n      default:\n        throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + t);\n    }\n  }\n  /* [MS-OLEPS] 2.14.2 VectorHeader */\n\n  /*function parse_VTVectorVariant(blob) {\n  \tvar Length = blob.read_shift(4);\n  \n  \tif(Length & 1 !== 0) throw new Error(\"VectorHeader Length=\" + Length + \" must be even\");\n  \tvar o = [];\n  \tfor(var i = 0; i != Length; ++i) {\n  \t\to.push(parse_TypedPropertyValue(blob, VT_VARIANT));\n  \t}\n  \treturn o;\n  }*/\n\n  /* [MS-OLEPS] 2.20 PropertySet */\n\n\n  function parse_PropertySet(blob, PIDSI) {\n    var start_addr = blob.l;\n    var size = blob.read_shift(4);\n    var NumProps = blob.read_shift(4);\n    var Props = [],\n        i = 0;\n    var CodePage = 0;\n    var Dictionary = -1,\n        DictObj;\n\n    for (i = 0; i != NumProps; ++i) {\n      var PropID = blob.read_shift(4);\n      var Offset = blob.read_shift(4);\n      Props[i] = [PropID, Offset + start_addr];\n    }\n\n    var PropH = {};\n\n    for (i = 0; i != NumProps; ++i) {\n      if (blob.l !== Props[i][1]) {\n        var fail = true;\n        if (i > 0 && PIDSI) switch (PIDSI[Props[i - 1][0]].t) {\n          case 0x02\n          /*VT_I2*/\n          :\n            if (blob.l + 2 === Props[i][1]) {\n              blob.l += 2;\n              fail = false;\n            }\n\n            break;\n\n          case 0x50\n          /*VT_STRING*/\n          :\n            if (blob.l <= Props[i][1]) {\n              blob.l = Props[i][1];\n              fail = false;\n            }\n\n            break;\n\n          case 0x100C\n          /*VT_VECTOR|VT_VARIANT*/\n          :\n            if (blob.l <= Props[i][1]) {\n              blob.l = Props[i][1];\n              fail = false;\n            }\n\n            break;\n        }\n\n        if (!PIDSI && blob.l <= Props[i][1]) {\n          fail = false;\n          blob.l = Props[i][1];\n        }\n\n        if (fail) throw new Error(\"Read Error: Expected address \" + Props[i][1] + ' at ' + blob.l + ' :' + i);\n      }\n\n      if (PIDSI) {\n        var piddsi = PIDSI[Props[i][0]];\n        PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {\n          raw: true\n        });\n        if (piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + \".\" + String(PropH[piddsi.n] & 0xFFFF);\n        if (piddsi.n == \"CodePage\") switch (PropH[piddsi.n]) {\n          case 0:\n            PropH[piddsi.n] = 1252;\n\n          /* falls through */\n\n          case 10000: // OSX Roman\n\n          case 1252: // Windows Latin\n\n          case 874: // SB Windows Thai\n\n          case 1250: // SB Windows Central Europe\n\n          case 1251: // SB Windows Cyrillic\n\n          case 1253: // SB Windows Greek\n\n          case 1254: // SB Windows Turkish\n\n          case 1255: // SB Windows Hebrew\n\n          case 1256: // SB Windows Arabic\n\n          case 1257: // SB Windows Baltic\n\n          case 1258: // SB Windows Vietnam\n\n          case 932: // DB Windows Japanese Shift-JIS\n\n          case 936: // DB Windows Simplified Chinese GBK\n\n          case 949: // DB Windows Korean\n\n          case 950: // DB Windows Traditional Chinese Big5\n\n          case 1200: // UTF16LE\n\n          case 1201: // UTF16BE\n\n          case 65000:\n          case -536: // UTF-7\n\n          case 65001:\n          case -535:\n            // UTF-8\n            set_cp(CodePage = PropH[piddsi.n]);\n            break;\n\n          default:\n            throw new Error(\"Unsupported CodePage: \" + PropH[piddsi.n]);\n        }\n      } else {\n        if (Props[i][0] === 0x1) {\n          CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);\n          set_cp(CodePage);\n\n          if (Dictionary !== -1) {\n            var oldpos = blob.l;\n            blob.l = Props[Dictionary][1];\n            DictObj = parse_dictionary(blob, CodePage);\n            blob.l = oldpos;\n          }\n        } else if (Props[i][0] === 0) {\n          if (CodePage === 0) {\n            Dictionary = i;\n            blob.l = Props[i + 1][1];\n            continue;\n          }\n\n          DictObj = parse_dictionary(blob, CodePage);\n        } else {\n          var name = DictObj[Props[i][0]];\n          var val;\n          /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */\n\n          switch (blob[blob.l]) {\n            case 0x41\n            /*VT_BLOB*/\n            :\n              blob.l += 4;\n              val = parse_BLOB(blob);\n              break;\n\n            case 0x1E\n            /*VT_LPSTR*/\n            :\n              blob.l += 4;\n              val = parse_VtString(blob, blob[blob.l - 4]);\n              break;\n\n            case 0x1F\n            /*VT_LPWSTR*/\n            :\n              blob.l += 4;\n              val = parse_VtString(blob, blob[blob.l - 4]);\n              break;\n\n            case 0x03\n            /*VT_I4*/\n            :\n              blob.l += 4;\n              val = blob.read_shift(4, 'i');\n              break;\n\n            case 0x13\n            /*VT_UI4*/\n            :\n              blob.l += 4;\n              val = blob.read_shift(4);\n              break;\n\n            case 0x05\n            /*VT_R8*/\n            :\n              blob.l += 4;\n              val = blob.read_shift(8, 'f');\n              break;\n\n            case 0x0B\n            /*VT_BOOL*/\n            :\n              blob.l += 4;\n              val = parsebool(blob, 4);\n              break;\n\n            case 0x40\n            /*VT_FILETIME*/\n            :\n              blob.l += 4;\n              val = new Date(parse_FILETIME(blob));\n              break;\n\n            default:\n              throw new Error(\"unparsed value: \" + blob[blob.l]);\n          }\n\n          PropH[name] = val;\n        }\n      }\n    }\n\n    blob.l = start_addr + size;\n    /* step ahead to skip padding */\n\n    return PropH;\n  }\n  /* [MS-OLEPS] 2.21 PropertySetStream */\n\n\n  function parse_PropertySetStream(file, PIDSI) {\n    var blob = file.content;\n    prep_blob(blob, 0);\n    var NumSets, FMTID0, FMTID1, Offset0, Offset1;\n    blob.chk('feff', 'Byte Order: ');\n    var vers = blob.read_shift(2); // TODO: check version\n\n    var SystemIdentifier = blob.read_shift(4);\n    blob.chk(CFB.utils.consts.HEADER_CLSID, 'CLSID: ');\n    NumSets = blob.read_shift(4);\n    if (NumSets !== 1 && NumSets !== 2) throw \"Unrecognized #Sets: \" + NumSets;\n    FMTID0 = blob.read_shift(16);\n    Offset0 = blob.read_shift(4);\n    if (NumSets === 1 && Offset0 !== blob.l) throw \"Length mismatch\";else if (NumSets === 2) {\n      FMTID1 = blob.read_shift(16);\n      Offset1 = blob.read_shift(4);\n    }\n    var PSet0 = parse_PropertySet(blob, PIDSI);\n    var rval = {\n      SystemIdentifier: SystemIdentifier\n    };\n\n    for (var y in PSet0) {\n      rval[y] = PSet0[y];\n    } //rval.blob = blob;\n\n\n    rval.FMTID = FMTID0; //rval.PSet0 = PSet0;\n\n    if (NumSets === 1) return rval;\n    if (blob.l !== Offset1) throw \"Length mismatch 2: \" + blob.l + \" !== \" + Offset1;\n    var PSet1;\n\n    try {\n      PSet1 = parse_PropertySet(blob, null);\n    } catch (e) {}\n\n    for (y in PSet1) {\n      rval[y] = PSet1[y];\n    }\n\n    rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1\n\n    return rval;\n  }\n\n  function parsenoop2(blob, length) {\n    blob.read_shift(length);\n    return null;\n  }\n\n  function parslurp(blob, length, cb) {\n    var arr = [],\n        target = blob.l + length;\n\n    while (blob.l < target) {\n      arr.push(cb(blob, target - blob.l));\n    }\n\n    if (target !== blob.l) throw new Error(\"Slurp error\");\n    return arr;\n  }\n\n  function parslurp2(blob, length, cb) {\n    var arr = [],\n        target = blob.l + length,\n        len = blob.read_shift(2);\n\n    while (len-- !== 0) {\n      arr.push(cb(blob, target - blob.l));\n    }\n\n    if (target !== blob.l) throw new Error(\"Slurp error\");\n    return arr;\n  }\n\n  function parsebool(blob, length) {\n    return blob.read_shift(length) === 0x1;\n  }\n\n  function parseuint16(blob) {\n    return blob.read_shift(2, 'u');\n  }\n\n  function parseuint16a(blob, length) {\n    return parslurp(blob, length, parseuint16);\n  }\n  /* --- 2.5 Structures --- */\n\n  /* [MS-XLS] 2.5.14 Boolean */\n\n\n  var parse_Boolean = parsebool;\n  /* [MS-XLS] 2.5.10 Bes (boolean or error) */\n\n  function parse_Bes(blob) {\n    var v = blob.read_shift(1),\n        t = blob.read_shift(1);\n    return t === 0x01 ? v : v === 0x01;\n  }\n  /* [MS-XLS] 2.5.240 ShortXLUnicodeString */\n\n\n  function parse_ShortXLUnicodeString(blob, length, opts) {\n    var cch = blob.read_shift(1);\n    var width = 1,\n        encoding = 'sbcs-cont';\n    var cp = current_codepage;\n    if (opts && opts.biff >= 8) current_codepage = 1200;\n\n    if (opts === undefined || opts.biff !== 5) {\n      var fHighByte = blob.read_shift(1);\n\n      if (fHighByte) {\n        width = 2;\n        encoding = 'dbcs-cont';\n      }\n    }\n\n    var o = cch ? blob.read_shift(cch, encoding) : \"\";\n    current_codepage = cp;\n    return o;\n  }\n  /* 2.5.293 XLUnicodeRichExtendedString */\n\n\n  function parse_XLUnicodeRichExtendedString(blob) {\n    var cp = current_codepage;\n    current_codepage = 1200;\n    var cch = blob.read_shift(2),\n        flags = blob.read_shift(1);\n    var fHighByte = flags & 0x1,\n        fExtSt = flags & 0x4,\n        fRichSt = flags & 0x8;\n    var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs\n\n    var cRun, cbExtRst;\n    var z = {};\n    if (fRichSt) cRun = blob.read_shift(2);\n    if (fExtSt) cbExtRst = blob.read_shift(4);\n    var encoding = flags & 0x1 ? 'dbcs-cont' : 'sbcs-cont';\n    var msg = cch === 0 ? \"\" : blob.read_shift(cch, encoding);\n    if (fRichSt) blob.l += 4 * cRun; //TODO: parse this\n\n    if (fExtSt) blob.l += cbExtRst; //TODO: parse this\n\n    z.t = msg;\n\n    if (!fRichSt) {\n      z.raw = \"<t>\" + z.t + \"</t>\";\n      z.r = z.t;\n    }\n\n    current_codepage = cp;\n    return z;\n  }\n  /* 2.5.296 XLUnicodeStringNoCch */\n\n\n  function parse_XLUnicodeStringNoCch(blob, cch, opts) {\n    var retval;\n    var fHighByte = blob.read_shift(1);\n\n    if (fHighByte === 0) {\n      retval = blob.read_shift(cch, 'sbcs-cont');\n    } else {\n      retval = blob.read_shift(cch, 'dbcs-cont');\n    }\n\n    return retval;\n  }\n  /* 2.5.294 XLUnicodeString */\n\n\n  function parse_XLUnicodeString(blob, length, opts) {\n    var cch = blob.read_shift(opts !== undefined && opts.biff > 0 && opts.biff < 8 ? 1 : 2);\n\n    if (cch === 0) {\n      blob.l++;\n      return \"\";\n    }\n\n    return parse_XLUnicodeStringNoCch(blob, cch, opts);\n  }\n  /* BIFF5 override */\n\n\n  function parse_XLUnicodeString2(blob, length, opts) {\n    if (opts.biff !== 5 && opts.biff !== 2) return parse_XLUnicodeString(blob, length, opts);\n    var cch = blob.read_shift(1);\n\n    if (cch === 0) {\n      blob.l++;\n      return \"\";\n    }\n\n    return blob.read_shift(cch, 'sbcs-cont');\n  }\n  /* [MS-XLS] 2.5.61 ControlInfo */\n\n\n  var parse_ControlInfo = parsenoop;\n  /* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */\n\n  var parse_URLMoniker = function parse_URLMoniker(blob, length) {\n    var len = blob.read_shift(4),\n        start = blob.l;\n    var extra = false;\n\n    if (len > 24) {\n      /* look ahead */\n      blob.l += len - 24;\n      if (blob.read_shift(16) === \"795881f43b1d7f48af2c825dc4852763\") extra = true;\n      blob.l = start;\n    }\n\n    var url = blob.read_shift((extra ? len - 24 : len) >> 1, 'utf16le').replace(chr0, \"\");\n    if (extra) blob.l += 24;\n    return url;\n  };\n  /* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */\n\n\n  var parse_FileMoniker = function parse_FileMoniker(blob, length) {\n    var cAnti = blob.read_shift(2);\n    var ansiLength = blob.read_shift(4);\n    var ansiPath = blob.read_shift(ansiLength, 'cstr');\n    var endServer = blob.read_shift(2);\n    var versionNumber = blob.read_shift(2);\n    var cbUnicodePathSize = blob.read_shift(4);\n    if (cbUnicodePathSize === 0) return ansiPath.replace(/\\\\/g, \"/\");\n    var cbUnicodePathBytes = blob.read_shift(4);\n    var usKeyValue = blob.read_shift(2);\n    var unicodePath = blob.read_shift(cbUnicodePathBytes >> 1, 'utf16le').replace(chr0, \"\");\n    return unicodePath;\n  };\n  /* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */\n\n\n  var parse_HyperlinkMoniker = function parse_HyperlinkMoniker(blob, length) {\n    var clsid = blob.read_shift(16);\n    length -= 16;\n\n    switch (clsid) {\n      case \"e0c9ea79f9bace118c8200aa004ba90b\":\n        return parse_URLMoniker(blob, length);\n\n      case \"0303000000000000c000000000000046\":\n        return parse_FileMoniker(blob, length);\n\n      default:\n        throw \"unsupported moniker \" + clsid;\n    }\n  };\n  /* [MS-OSHARED] 2.3.7.9 HyperlinkString */\n\n\n  var parse_HyperlinkString = function parse_HyperlinkString(blob, length) {\n    var len = blob.read_shift(4);\n    var o = blob.read_shift(len, 'utf16le').replace(chr0, \"\");\n    return o;\n  };\n  /* [MS-OSHARED] 2.3.7.1 Hyperlink Object TODO: unify params with XLSX */\n\n\n  var parse_Hyperlink = function parse_Hyperlink(blob, length) {\n    var end = blob.l + length;\n    var sVer = blob.read_shift(4);\n    if (sVer !== 2) throw new Error(\"Unrecognized streamVersion: \" + sVer);\n    var flags = blob.read_shift(2);\n    blob.l += 2;\n    var displayName, targetFrameName, moniker, oleMoniker, location, guid, fileTime;\n    if (flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);\n    if (flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);\n    if ((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);\n    if ((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);\n    if (flags & 0x0008) location = parse_HyperlinkString(blob, end - blob.l);\n    if (flags & 0x0020) guid = blob.read_shift(16);\n    if (flags & 0x0040) fileTime = parse_FILETIME(blob, 8);\n    blob.l = end;\n    var target = targetFrameName || moniker || oleMoniker;\n    if (location) target += \"#\" + location;\n    return {\n      Target: target\n    };\n  };\n  /* 2.5.178 LongRGBA */\n\n\n  function parse_LongRGBA(blob, length) {\n    var r = blob.read_shift(1),\n        g = blob.read_shift(1),\n        b = blob.read_shift(1),\n        a = blob.read_shift(1);\n    return [r, g, b, a];\n  }\n  /* 2.5.177 LongRGB */\n\n\n  function parse_LongRGB(blob, length) {\n    var x = parse_LongRGBA(blob, length);\n    x[3] = 0;\n    return x;\n  }\n  /* --- MS-XLS --- */\n\n  /* 2.5.19 */\n\n\n  function parse_XLSCell(blob, length) {\n    var rw = blob.read_shift(2); // 0-indexed\n\n    var col = blob.read_shift(2);\n    var ixfe = blob.read_shift(2);\n    return {\n      r: rw,\n      c: col,\n      ixfe: ixfe\n    };\n  }\n  /* 2.5.134 */\n\n\n  function parse_frtHeader(blob) {\n    var rt = blob.read_shift(2);\n    var flags = blob.read_shift(2); // TODO: parse these flags\n\n    blob.l += 8;\n    return {\n      type: rt,\n      flags: flags\n    };\n  }\n\n  function parse_OptXLUnicodeString(blob, length, opts) {\n    return length === 0 ? \"\" : parse_XLUnicodeString2(blob, length, opts);\n  }\n  /* 2.5.158 */\n\n\n  var HIDEOBJENUM = ['SHOWALL', 'SHOWPLACEHOLDER', 'HIDEALL'];\n  var parse_HideObjEnum = parseuint16;\n  /* 2.5.344 */\n\n  function parse_XTI(blob, length) {\n    var iSupBook = blob.read_shift(2),\n        itabFirst = blob.read_shift(2, 'i'),\n        itabLast = blob.read_shift(2, 'i');\n    return [iSupBook, itabFirst, itabLast];\n  }\n  /* 2.5.218 */\n\n\n  function parse_RkRec(blob, length) {\n    var ixfe = blob.read_shift(2);\n    var RK = parse_RkNumber(blob); //console.log(\"::\", ixfe, RK,\";;\");\n\n    return [ixfe, RK];\n  }\n  /* 2.5.1 */\n\n\n  function parse_AddinUdf(blob, length) {\n    blob.l += 4;\n    length -= 4;\n    var l = blob.l + length;\n    var udfName = parse_ShortXLUnicodeString(blob, length);\n    var cb = blob.read_shift(2);\n    l -= blob.l;\n    if (cb !== l) throw \"Malformed AddinUdf: padding = \" + l + \" != \" + cb;\n    blob.l += cb;\n    return udfName;\n  }\n  /* 2.5.209 TODO: Check sizes */\n\n\n  function parse_Ref8U(blob, length) {\n    var rwFirst = blob.read_shift(2);\n    var rwLast = blob.read_shift(2);\n    var colFirst = blob.read_shift(2);\n    var colLast = blob.read_shift(2);\n    return {\n      s: {\n        c: colFirst,\n        r: rwFirst\n      },\n      e: {\n        c: colLast,\n        r: rwLast\n      }\n    };\n  }\n  /* 2.5.211 */\n\n\n  function parse_RefU(blob, length) {\n    var rwFirst = blob.read_shift(2);\n    var rwLast = blob.read_shift(2);\n    var colFirst = blob.read_shift(1);\n    var colLast = blob.read_shift(1);\n    return {\n      s: {\n        c: colFirst,\n        r: rwFirst\n      },\n      e: {\n        c: colLast,\n        r: rwLast\n      }\n    };\n  }\n  /* 2.5.207 */\n\n\n  var parse_Ref = parse_RefU;\n  /* 2.5.143 */\n\n  function parse_FtCmo(blob, length) {\n    blob.l += 4;\n    var ot = blob.read_shift(2);\n    var id = blob.read_shift(2);\n    var flags = blob.read_shift(2);\n    blob.l += 12;\n    return [id, ot, flags];\n  }\n  /* 2.5.149 */\n\n\n  function parse_FtNts(blob, length) {\n    var out = {};\n    blob.l += 4;\n    blob.l += 16; // GUID TODO\n\n    out.fSharedNote = blob.read_shift(2);\n    blob.l += 4;\n    return out;\n  }\n  /* 2.5.142 */\n\n\n  function parse_FtCf(blob, length) {\n    var out = {};\n    blob.l += 4;\n    blob.cf = blob.read_shift(2);\n    return out;\n  }\n  /* 2.5.140 - 2.5.154 and friends */\n\n\n  var FtTab = {\n    0x15: parse_FtCmo,\n    0x13: parsenoop,\n\n    /* FtLbsData */\n    0x12: function _(blob, length) {\n      blob.l += 12;\n    },\n\n    /* FtCblsData */\n    0x11: function _(blob, length) {\n      blob.l += 8;\n    },\n\n    /* FtRboData */\n    0x10: parsenoop,\n\n    /* FtEdoData */\n    0x0F: parsenoop,\n\n    /* FtGboData */\n    0x0D: parse_FtNts,\n\n    /* FtNts */\n    0x0C: function _(blob, length) {\n      blob.l += 24;\n    },\n\n    /* FtSbs */\n    0x0B: function _(blob, length) {\n      blob.l += 10;\n    },\n\n    /* FtRbo */\n    0x0A: function _(blob, length) {\n      blob.l += 16;\n    },\n\n    /* FtCbls */\n    0x09: parsenoop,\n\n    /* FtPictFmla */\n    0x08: function _(blob, length) {\n      blob.l += 6;\n    },\n\n    /* FtPioGrbit */\n    0x07: parse_FtCf,\n\n    /* FtCf */\n    0x06: function _(blob, length) {\n      blob.l += 6;\n    },\n\n    /* FtGmo */\n    0x04: parsenoop,\n\n    /* FtMacro */\n    0x00: function _(blob, length) {\n      blob.l += 4;\n    }\n    /* FtEnding */\n\n  };\n\n  function parse_FtArray(blob, length, ot) {\n    var s = blob.l;\n    var fts = [];\n\n    while (blob.l < s + length) {\n      var ft = blob.read_shift(2);\n      blob.l -= 2;\n\n      try {\n        fts.push(FtTab[ft](blob, s + length - blob.l));\n      } catch (e) {\n        blob.l = s + length;\n        return fts;\n      }\n    }\n\n    if (blob.l != s + length) blob.l = s + length; //throw \"bad Object Ft-sequence\";\n\n    return fts;\n  }\n  /* 2.5.129 */\n\n\n  var parse_FontIndex = parseuint16;\n  /* --- 2.4 Records --- */\n\n  /* 2.4.21 */\n\n  function parse_BOF(blob, length) {\n    var o = {};\n    o.BIFFVer = blob.read_shift(2);\n    length -= 2;\n\n    switch (o.BIFFVer) {\n      case 0x0600:\n      /* BIFF8 */\n\n      case 0x0500:\n      /* BIFF5 */\n\n      case 0x0002:\n      case 0x0007:\n        /* BIFF2 */\n        break;\n\n      default:\n        throw \"Unexpected BIFF Ver \" + o.BIFFVer;\n    }\n\n    blob.read_shift(length);\n    return o;\n  }\n  /* 2.4.146 */\n\n\n  function parse_InterfaceHdr(blob, length) {\n    if (length === 0) return 0x04b0;\n    var q;\n    if ((q = blob.read_shift(2)) !== 0x04b0) throw 'InterfaceHdr codePage ' + q;\n    return 0x04b0;\n  }\n  /* 2.4.349 */\n\n\n  function parse_WriteAccess(blob, length, opts) {\n    if (opts.enc) {\n      blob.l += length;\n      return \"\";\n    }\n\n    var l = blob.l; // TODO: make sure XLUnicodeString doesnt overrun\n\n    var UserName = parse_XLUnicodeString(blob, 0, opts);\n    blob.read_shift(length + l - blob.l);\n    return UserName;\n  }\n  /* 2.4.28 */\n\n\n  function parse_BoundSheet8(blob, length, opts) {\n    var pos = blob.read_shift(4);\n    var hidden = blob.read_shift(1) >> 6;\n    var dt = blob.read_shift(1);\n\n    switch (dt) {\n      case 0:\n        dt = 'Worksheet';\n        break;\n\n      case 1:\n        dt = 'Macrosheet';\n        break;\n\n      case 2:\n        dt = 'Chartsheet';\n        break;\n\n      case 6:\n        dt = 'VBAModule';\n        break;\n    }\n\n    var name = parse_ShortXLUnicodeString(blob, 0, opts);\n    if (name.length === 0) name = \"Sheet1\";\n    return {\n      pos: pos,\n      hs: hidden,\n      dt: dt,\n      name: name\n    };\n  }\n  /* 2.4.265 TODO */\n\n\n  function parse_SST(blob, length) {\n    var cnt = blob.read_shift(4);\n    var ucnt = blob.read_shift(4);\n    var strs = [];\n\n    for (var i = 0; i != ucnt; ++i) {\n      strs.push(parse_XLUnicodeRichExtendedString(blob));\n    }\n\n    strs.Count = cnt;\n    strs.Unique = ucnt;\n    return strs;\n  }\n  /* 2.4.107 */\n\n\n  function parse_ExtSST(blob, length) {\n    var extsst = {};\n    extsst.dsst = blob.read_shift(2);\n    blob.l += length - 2;\n    return extsst;\n  }\n  /* 2.4.221 TODO*/\n\n\n  function parse_Row(blob, length) {\n    var rw = blob.read_shift(2),\n        col = blob.read_shift(2),\n        Col = blob.read_shift(2),\n        rht = blob.read_shift(2);\n    blob.read_shift(4); // reserved(2), unused(2)\n\n    var flags = blob.read_shift(1); // various flags\n\n    blob.read_shift(1); // reserved\n\n    blob.read_shift(2); //ixfe, other flags\n\n    return {\n      r: rw,\n      c: col,\n      cnt: Col - col\n    };\n  }\n  /* 2.4.125 */\n\n\n  function parse_ForceFullCalculation(blob, length) {\n    var header = parse_frtHeader(blob);\n    if (header.type != 0x08A3) throw \"Invalid Future Record \" + header.type;\n    var fullcalc = blob.read_shift(4);\n    return fullcalc !== 0x0;\n  }\n\n  var parse_CompressPictures = parsenoop2;\n  /* 2.4.55 Not interesting */\n\n  /* 2.4.215 rt */\n\n  function parse_RecalcId(blob, length) {\n    blob.read_shift(2);\n    return blob.read_shift(4);\n  }\n  /* 2.4.87 */\n\n\n  function parse_DefaultRowHeight(blob, length) {\n    var f = blob.read_shift(2),\n        miyRw;\n    miyRw = blob.read_shift(2); // flags & 0x02 -> hidden, else empty\n\n    var fl = {\n      Unsynced: f & 1,\n      DyZero: (f & 2) >> 1,\n      ExAsc: (f & 4) >> 2,\n      ExDsc: (f & 8) >> 3\n    };\n    return [fl, miyRw];\n  }\n  /* 2.4.345 TODO */\n\n\n  function parse_Window1(blob, length) {\n    var xWn = blob.read_shift(2),\n        yWn = blob.read_shift(2),\n        dxWn = blob.read_shift(2),\n        dyWn = blob.read_shift(2);\n    var flags = blob.read_shift(2),\n        iTabCur = blob.read_shift(2),\n        iTabFirst = blob.read_shift(2);\n    var ctabSel = blob.read_shift(2),\n        wTabRatio = blob.read_shift(2);\n    return {\n      Pos: [xWn, yWn],\n      Dim: [dxWn, dyWn],\n      Flags: flags,\n      CurTab: iTabCur,\n      FirstTab: iTabFirst,\n      Selected: ctabSel,\n      TabRatio: wTabRatio\n    };\n  }\n  /* 2.4.122 TODO */\n\n\n  function parse_Font(blob, length, opts) {\n    blob.l += 14;\n    var name = parse_ShortXLUnicodeString(blob, 0, opts);\n    return name;\n  }\n  /* 2.4.149 */\n\n\n  function parse_LabelSst(blob, length) {\n    var cell = parse_XLSCell(blob);\n    cell.isst = blob.read_shift(4);\n    return cell;\n  }\n  /* 2.4.148 */\n\n\n  function parse_Label(blob, length, opts) {\n    var cell = parse_XLSCell(blob, 6);\n    var str = parse_XLUnicodeString(blob, length - 6, opts);\n    cell.val = str;\n    return cell;\n  }\n  /* 2.4.126 Number Formats */\n\n\n  function parse_Format(blob, length, opts) {\n    var ifmt = blob.read_shift(2);\n    var fmtstr = parse_XLUnicodeString2(blob, 0, opts);\n    return [ifmt, fmtstr];\n  }\n  /* 2.4.90 */\n\n\n  function parse_Dimensions(blob, length) {\n    var w = length === 10 ? 2 : 4;\n    var r = blob.read_shift(w),\n        R = blob.read_shift(w),\n        c = blob.read_shift(2),\n        C = blob.read_shift(2);\n    blob.l += 2;\n    return {\n      s: {\n        r: r,\n        c: c\n      },\n      e: {\n        r: R,\n        c: C\n      }\n    };\n  }\n  /* 2.4.220 */\n\n\n  function parse_RK(blob, length) {\n    var rw = blob.read_shift(2),\n        col = blob.read_shift(2);\n    var rkrec = parse_RkRec(blob);\n    return {\n      r: rw,\n      c: col,\n      ixfe: rkrec[0],\n      rknum: rkrec[1]\n    };\n  }\n  /* 2.4.175 */\n\n\n  function parse_MulRk(blob, length) {\n    var target = blob.l + length - 2;\n    var rw = blob.read_shift(2),\n        col = blob.read_shift(2);\n    var rkrecs = [];\n\n    while (blob.l < target) {\n      rkrecs.push(parse_RkRec(blob));\n    }\n\n    if (blob.l !== target) throw \"MulRK read error\";\n    var lastcol = blob.read_shift(2);\n    if (rkrecs.length != lastcol - col + 1) throw \"MulRK length mismatch\";\n    return {\n      r: rw,\n      c: col,\n      C: lastcol,\n      rkrec: rkrecs\n    };\n  }\n  /* 2.5.20 2.5.249 TODO */\n\n\n  function parse_CellStyleXF(blob, length, style) {\n    var o = {};\n    var a = blob.read_shift(4),\n        b = blob.read_shift(4);\n    var c = blob.read_shift(4),\n        d = blob.read_shift(2);\n    o.patternType = XLSFillPattern[c >> 26];\n    o.icvFore = d & 0x7F;\n    o.icvBack = d >> 7 & 0x7F;\n    return o;\n  }\n\n  function parse_CellXF(blob, length) {\n    return parse_CellStyleXF(blob, length, 0);\n  }\n\n  function parse_StyleXF(blob, length) {\n    return parse_CellStyleXF(blob, length, 1);\n  }\n  /* 2.4.353 TODO: actually do this right */\n\n\n  function parse_XF(blob, length) {\n    var o = {};\n    o.ifnt = blob.read_shift(2);\n    o.ifmt = blob.read_shift(2);\n    o.flags = blob.read_shift(2);\n    o.fStyle = o.flags >> 2 & 0x01;\n    length -= 6;\n    o.data = parse_CellStyleXF(blob, length, o.fStyle);\n    return o;\n  }\n  /* 2.4.134 */\n\n\n  function parse_Guts(blob, length) {\n    blob.l += 4;\n    var out = [blob.read_shift(2), blob.read_shift(2)];\n    if (out[0] !== 0) out[0]--;\n    if (out[1] !== 0) out[1]--;\n    if (out[0] > 7 || out[1] > 7) throw \"Bad Gutters: \" + out;\n    return out;\n  }\n  /* 2.4.24 */\n\n\n  function parse_BoolErr(blob, length) {\n    var cell = parse_XLSCell(blob, 6);\n    var val = parse_Bes(blob, 2);\n    cell.val = val;\n    cell.t = val === true || val === false ? 'b' : 'e';\n    return cell;\n  }\n  /* 2.4.180 Number */\n\n\n  function parse_Number(blob, length) {\n    var cell = parse_XLSCell(blob, 6);\n    var xnum = parse_Xnum(blob, 8);\n    cell.val = xnum;\n    return cell;\n  }\n\n  var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136\n\n  /* 2.4.271 */\n\n  function parse_SupBook(blob, length, opts) {\n    var end = blob.l + length;\n    var ctab = blob.read_shift(2);\n    var cch = blob.read_shift(2);\n    var virtPath;\n    if (cch >= 0x01 && cch <= 0xff) virtPath = parse_XLUnicodeStringNoCch(blob, cch);\n    var rgst = blob.read_shift(end - blob.l);\n    opts.sbcch = cch;\n    return [cch, ctab, virtPath, rgst];\n  }\n  /* 2.4.105 TODO */\n\n\n  function parse_ExternName(blob, length, opts) {\n    var flags = blob.read_shift(2);\n    var body;\n    var o = {\n      fBuiltIn: flags & 0x01,\n      fWantAdvise: flags >>> 1 & 0x01,\n      fWantPict: flags >>> 2 & 0x01,\n      fOle: flags >>> 3 & 0x01,\n      fOleLink: flags >>> 4 & 0x01,\n      cf: flags >>> 5 & 0x3FF,\n      fIcon: flags >>> 15 & 0x01\n    };\n    if (opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length - 2); //else throw new Error(\"unsupported SupBook cch: \" + opts.sbcch);\n\n    o.body = body || blob.read_shift(length - 2);\n    return o;\n  }\n  /* 2.4.150 TODO */\n\n\n  function parse_Lbl(blob, length, opts) {\n    if (opts.biff < 8) return parse_Label(blob, length, opts);\n    var target = blob.l + length;\n    var flags = blob.read_shift(2);\n    var chKey = blob.read_shift(1);\n    var cch = blob.read_shift(1);\n    var cce = blob.read_shift(2);\n    blob.l += 2;\n    var itab = blob.read_shift(2);\n    blob.l += 4;\n    var name = parse_XLUnicodeStringNoCch(blob, cch, opts);\n    var rgce = parse_NameParsedFormula(blob, target - blob.l, opts, cce);\n    return {\n      chKey: chKey,\n      Name: name,\n      rgce: rgce\n    };\n  }\n  /* 2.4.106 TODO: verify supbook manipulation */\n\n\n  function parse_ExternSheet(blob, length, opts) {\n    if (opts.biff < 8) return parse_ShortXLUnicodeString(blob, length, opts);\n    var o = parslurp2(blob, length, parse_XTI);\n    var oo = [];\n\n    if (opts.sbcch === 0x0401) {\n      for (var i = 0; i != o.length; ++i) {\n        oo.push(opts.snames[o[i][1]]);\n      }\n\n      return oo;\n    } else return o;\n  }\n  /* 2.4.260 */\n\n\n  function parse_ShrFmla(blob, length, opts) {\n    var ref = parse_RefU(blob, 6);\n    blob.l++;\n    var cUse = blob.read_shift(1);\n    length -= 8;\n    return [parse_SharedParsedFormula(blob, length, opts), cUse];\n  }\n  /* 2.4.4 TODO */\n\n\n  function parse_Array(blob, length, opts) {\n    var ref = parse_Ref(blob, 6);\n    blob.l += 6;\n    length -= 12;\n    /* TODO: fAlwaysCalc */\n\n    return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n  }\n  /* 2.4.173 */\n\n\n  function parse_MTRSettings(blob, length) {\n    var fMTREnabled = blob.read_shift(4) !== 0x00;\n    var fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n    var cUserThreadCount = blob.read_shift(4);\n    return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n  }\n  /* 2.5.186 TODO: BIFF5 */\n\n\n  function parse_NoteSh(blob, length, opts) {\n    if (opts.biff < 8) return;\n    var row = blob.read_shift(2),\n        col = blob.read_shift(2);\n    var flags = blob.read_shift(2),\n        idObj = blob.read_shift(2);\n    var stAuthor = parse_XLUnicodeString2(blob, 0, opts);\n    if (opts.biff < 8) blob.read_shift(1);\n    return [{\n      r: row,\n      c: col\n    }, stAuthor, idObj, flags];\n  }\n  /* 2.4.179 */\n\n\n  function parse_Note(blob, length, opts) {\n    /* TODO: Support revisions */\n    return parse_NoteSh(blob, length, opts);\n  }\n  /* 2.4.168 */\n\n\n  function parse_MergeCells(blob, length) {\n    var merges = [];\n    var cmcs = blob.read_shift(2);\n\n    while (cmcs--) {\n      merges.push(parse_Ref8U(blob, length));\n    }\n\n    return merges;\n  }\n  /* 2.4.181 TODO: parse all the things! */\n\n\n  function parse_Obj(blob, length) {\n    var cmo = parse_FtCmo(blob, 22); // id, ot, flags\n\n    var fts = parse_FtArray(blob, length - 22, cmo[1]);\n    return {\n      cmo: cmo,\n      ft: fts\n    };\n  }\n  /* 2.4.329 TODO: parse properly */\n\n\n  function parse_TxO(blob, length, opts) {\n    var s = blob.l;\n\n    try {\n      blob.l += 4;\n      var ot = (opts.lastobj || {\n        cmo: [0, 0]\n      }).cmo[1];\n      var controlInfo;\n      if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob.l += 6;else controlInfo = parse_ControlInfo(blob, 6, opts);\n      var cchText = blob.read_shift(2);\n      var cbRuns = blob.read_shift(2);\n      var ifntEmpty = parse_FontIndex(blob, 2);\n      var len = blob.read_shift(2);\n      blob.l += len; //var fmla = parse_ObjFmla(blob, s + length - blob.l);\n\n      var texts = \"\";\n\n      for (var i = 1; i < blob.lens.length - 1; ++i) {\n        if (blob.l - s != blob.lens[i]) throw \"TxO: bad continue record\";\n        var hdr = blob[blob.l];\n        var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);\n        texts += t;\n        if (texts.length >= (hdr ? cchText : 2 * cchText)) break;\n      }\n\n      if (texts.length !== cchText && texts.length !== cchText * 2) {\n        throw \"cchText: \" + cchText + \" != \" + texts.length;\n      }\n\n      blob.l = s + length;\n      /* 2.5.272 TxORuns */\n      //\tvar rgTxoRuns = [];\n      //\tfor(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;\n      //\tvar cchText2 = blob.read_shift(2);\n      //\tif(cchText2 !== cchText) throw \"TxOLastRun mismatch: \" + cchText2 + \" \" + cchText;\n      //\tblob.l += 6;\n      //\tif(s + length != blob.l) throw \"TxO \" + (s + length) + \", at \" + blob.l;\n\n      return {\n        t: texts\n      };\n    } catch (e) {\n      blob.l = s + length;\n      return {\n        t: texts || \"\"\n      };\n    }\n  }\n  /* 2.4.140 */\n\n\n  var parse_HLink = function parse_HLink(blob, length) {\n    var ref = parse_Ref8U(blob, 8);\n    blob.l += 16;\n    /* CLSID */\n\n    var hlink = parse_Hyperlink(blob, length - 24);\n    return [ref, hlink];\n  };\n  /* 2.4.141 */\n\n\n  var parse_HLinkTooltip = function parse_HLinkTooltip(blob, length) {\n    var end = blob.l + length;\n    blob.read_shift(2);\n    var ref = parse_Ref8U(blob, 8);\n    var wzTooltip = blob.read_shift((length - 10) / 2, 'dbcs-cont');\n    wzTooltip = wzTooltip.replace(chr0, \"\");\n    return [ref, wzTooltip];\n  };\n  /* 2.4.63 */\n\n\n  function parse_Country(blob, length) {\n    var o = [],\n        d;\n    d = blob.read_shift(2);\n    o[0] = CountryEnum[d] || d;\n    d = blob.read_shift(2);\n    o[1] = CountryEnum[d] || d;\n    return o;\n  }\n  /* 2.4.50 ClrtClient */\n\n\n  function parse_ClrtClient(blob, length) {\n    var ccv = blob.read_shift(2);\n    var o = [];\n\n    while (ccv-- > 0) {\n      o.push(parse_LongRGB(blob, 8));\n    }\n\n    return o;\n  }\n  /* 2.4.188 */\n\n\n  function parse_Palette(blob, length) {\n    var ccv = blob.read_shift(2);\n    var o = [];\n\n    while (ccv-- > 0) {\n      o.push(parse_LongRGB(blob, 8));\n    }\n\n    return o;\n  }\n  /* 2.4.354 */\n\n\n  function parse_XFCRC(blob, length) {\n    blob.l += 2;\n    var o = {\n      cxfs: 0,\n      crc: 0\n    };\n    o.cxfs = blob.read_shift(2);\n    o.crc = blob.read_shift(4);\n    return o;\n  }\n\n  var parse_Style = parsenoop;\n  var parse_StyleExt = parsenoop;\n  var parse_ColInfo = parsenoop;\n  var parse_Window2 = parsenoop;\n  var parse_Backup = parsebool;\n  /* 2.4.14 */\n\n  var parse_Blank = parse_XLSCell;\n  /* 2.4.20 Just the cell */\n\n  var parse_BottomMargin = parse_Xnum;\n  /* 2.4.27 */\n\n  var parse_BuiltInFnGroupCount = parseuint16;\n  /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */\n\n  var parse_CalcCount = parseuint16;\n  /* 2.4.31 #Iterations */\n\n  var parse_CalcDelta = parse_Xnum;\n  /* 2.4.32 */\n\n  var parse_CalcIter = parsebool;\n  /* 2.4.33 1=iterative calc */\n\n  var parse_CalcMode = parseuint16;\n  /* 2.4.34 0=manual, 1=auto (def), 2=table */\n\n  var parse_CalcPrecision = parsebool;\n  /* 2.4.35 */\n\n  var parse_CalcRefMode = parsenoop2;\n  /* 2.4.36 */\n\n  var parse_CalcSaveRecalc = parsebool;\n  /* 2.4.37 */\n\n  var parse_CodePage = parseuint16;\n  /* 2.4.52 */\n\n  var parse_Compat12 = parsebool;\n  /* 2.4.54 true = no compatibility check */\n\n  var parse_Date1904 = parsebool;\n  /* 2.4.77 - 1=1904,0=1900 */\n\n  var parse_DefColWidth = parseuint16;\n  /* 2.4.89 */\n\n  var parse_DSF = parsenoop2;\n  /* 2.4.94 -- MUST be ignored */\n\n  var parse_EntExU2 = parsenoop2;\n  /* 2.4.102 -- Explicitly says to ignore */\n\n  var parse_EOF = parsenoop2;\n  /* 2.4.103 */\n\n  var parse_Excel9File = parsenoop2;\n  /* 2.4.104 -- Optional and unused */\n\n  var parse_FeatHdr = parsenoop2;\n  /* 2.4.112 */\n\n  var parse_FontX = parseuint16;\n  /* 2.4.123 */\n\n  var parse_Footer = parse_XLHeaderFooter;\n  /* 2.4.124 */\n\n  var parse_GridSet = parseuint16;\n  /* 2.4.132, =1 */\n\n  var parse_HCenter = parsebool;\n  /* 2.4.135 sheet centered horizontal on print */\n\n  var parse_Header = parse_XLHeaderFooter;\n  /* 2.4.136 */\n\n  var parse_HideObj = parse_HideObjEnum;\n  /* 2.4.139 */\n\n  var parse_InterfaceEnd = parsenoop2;\n  /* 2.4.145 -- noop */\n\n  var parse_LeftMargin = parse_Xnum;\n  /* 2.4.151 */\n\n  var parse_Mms = parsenoop2;\n  /* 2.4.169 -- Explicitly says to ignore */\n\n  var parse_ObjProtect = parsebool;\n  /* 2.4.183 -- must be 1 if present */\n\n  var parse_Password = parseuint16;\n  /* 2.4.191 */\n\n  var parse_PrintGrid = parsebool;\n  /* 2.4.202 */\n\n  var parse_PrintRowCol = parsebool;\n  /* 2.4.203 */\n\n  var parse_PrintSize = parseuint16;\n  /* 2.4.204 0:3 */\n\n  var parse_Prot4Rev = parsebool;\n  /* 2.4.205 */\n\n  var parse_Prot4RevPass = parseuint16;\n  /* 2.4.206 */\n\n  var parse_Protect = parsebool;\n  /* 2.4.207 */\n\n  var parse_RefreshAll = parsebool;\n  /* 2.4.217 -- must be 0 if not template */\n\n  var parse_RightMargin = parse_Xnum;\n  /* 2.4.219 */\n\n  var parse_RRTabId = parseuint16a;\n  /* 2.4.241 */\n\n  var parse_ScenarioProtect = parsebool;\n  /* 2.4.245 */\n\n  var parse_Scl = parseuint16a;\n  /* 2.4.247 num, den */\n\n  var parse_String = parse_XLUnicodeString;\n  /* 2.4.268 */\n\n  var parse_SxBool = parsebool;\n  /* 2.4.274 */\n\n  var parse_TopMargin = parse_Xnum;\n  /* 2.4.328 */\n\n  var parse_UsesELFs = parsebool;\n  /* 2.4.337 -- should be 0 */\n\n  var parse_VCenter = parsebool;\n  /* 2.4.342 */\n\n  var parse_WinProtect = parsebool;\n  /* 2.4.347 */\n\n  var parse_WriteProtect = parsenoop;\n  /* 2.4.350 empty record */\n\n  /* ---- */\n\n  var parse_VerticalPageBreaks = parsenoop;\n  var parse_HorizontalPageBreaks = parsenoop;\n  var parse_Selection = parsenoop;\n  var parse_Continue = parsenoop;\n  var parse_Pane = parsenoop;\n  var parse_Pls = parsenoop;\n  var parse_DCon = parsenoop;\n  var parse_DConRef = parsenoop;\n  var parse_DConName = parsenoop;\n  var parse_XCT = parsenoop;\n  var parse_CRN = parsenoop;\n  var parse_FileSharing = parsenoop;\n  var parse_Uncalced = parsenoop;\n  var parse_Template = parsenoop;\n  var parse_Intl = parsenoop;\n  var parse_WsBool = parsenoop;\n  var parse_Sort = parsenoop;\n  var parse_Sync = parsenoop;\n  var parse_LPr = parsenoop;\n  var parse_DxGCol = parsenoop;\n  var parse_FnGroupName = parsenoop;\n  var parse_FilterMode = parsenoop;\n  var parse_AutoFilterInfo = parsenoop;\n  var parse_AutoFilter = parsenoop;\n  var parse_Setup = parsenoop;\n  var parse_ScenMan = parsenoop;\n  var parse_SCENARIO = parsenoop;\n  var parse_SxView = parsenoop;\n  var parse_Sxvd = parsenoop;\n  var parse_SXVI = parsenoop;\n  var parse_SxIvd = parsenoop;\n  var parse_SXLI = parsenoop;\n  var parse_SXPI = parsenoop;\n  var parse_DocRoute = parsenoop;\n  var parse_RecipName = parsenoop;\n  var parse_MulBlank = parsenoop;\n  var parse_SXDI = parsenoop;\n  var parse_SXDB = parsenoop;\n  var parse_SXFDB = parsenoop;\n  var parse_SXDBB = parsenoop;\n  var parse_SXNum = parsenoop;\n  var parse_SxErr = parsenoop;\n  var parse_SXInt = parsenoop;\n  var parse_SXString = parsenoop;\n  var parse_SXDtr = parsenoop;\n  var parse_SxNil = parsenoop;\n  var parse_SXTbl = parsenoop;\n  var parse_SXTBRGIITM = parsenoop;\n  var parse_SxTbpg = parsenoop;\n  var parse_ObProj = parsenoop;\n  var parse_SXStreamID = parsenoop;\n  var parse_DBCell = parsenoop;\n  var parse_SXRng = parsenoop;\n  var parse_SxIsxoper = parsenoop;\n  var parse_BookBool = parsenoop;\n  var parse_DbOrParamQry = parsenoop;\n  var parse_OleObjectSize = parsenoop;\n  var parse_SXVS = parsenoop;\n  var parse_BkHim = parsenoop;\n  var parse_MsoDrawingGroup = parsenoop;\n  var parse_MsoDrawing = parsenoop;\n  var parse_MsoDrawingSelection = parsenoop;\n  var parse_PhoneticInfo = parsenoop;\n  var parse_SxRule = parsenoop;\n  var parse_SXEx = parsenoop;\n  var parse_SxFilt = parsenoop;\n  var parse_SxDXF = parsenoop;\n  var parse_SxItm = parsenoop;\n  var parse_SxName = parsenoop;\n  var parse_SxSelect = parsenoop;\n  var parse_SXPair = parsenoop;\n  var parse_SxFmla = parsenoop;\n  var parse_SxFormat = parsenoop;\n  var parse_SXVDEx = parsenoop;\n  var parse_SXFormula = parsenoop;\n  var parse_SXDBEx = parsenoop;\n  var parse_RRDInsDel = parsenoop;\n  var parse_RRDHead = parsenoop;\n  var parse_RRDChgCell = parsenoop;\n  var parse_RRDRenSheet = parsenoop;\n  var parse_RRSort = parsenoop;\n  var parse_RRDMove = parsenoop;\n  var parse_RRFormat = parsenoop;\n  var parse_RRAutoFmt = parsenoop;\n  var parse_RRInsertSh = parsenoop;\n  var parse_RRDMoveBegin = parsenoop;\n  var parse_RRDMoveEnd = parsenoop;\n  var parse_RRDInsDelBegin = parsenoop;\n  var parse_RRDInsDelEnd = parsenoop;\n  var parse_RRDConflict = parsenoop;\n  var parse_RRDDefName = parsenoop;\n  var parse_RRDRstEtxp = parsenoop;\n  var parse_LRng = parsenoop;\n  var parse_CUsr = parsenoop;\n  var parse_CbUsr = parsenoop;\n  var parse_UsrInfo = parsenoop;\n  var parse_UsrExcl = parsenoop;\n  var parse_FileLock = parsenoop;\n  var parse_RRDInfo = parsenoop;\n  var parse_BCUsrs = parsenoop;\n  var parse_UsrChk = parsenoop;\n  var parse_UserBView = parsenoop;\n  var parse_UserSViewBegin = parsenoop; // overloaded\n\n  var parse_UserSViewEnd = parsenoop;\n  var parse_RRDUserView = parsenoop;\n  var parse_Qsi = parsenoop;\n  var parse_CondFmt = parsenoop;\n  var parse_CF = parsenoop;\n  var parse_DVal = parsenoop;\n  var parse_DConBin = parsenoop;\n  var parse_Lel = parsenoop;\n  var parse_XLSCodeName = parse_XLUnicodeString;\n  var parse_SXFDBType = parsenoop;\n  var parse_ObNoMacros = parsenoop;\n  var parse_Dv = parsenoop;\n  var parse_Index = parsenoop;\n  var parse_Table = parsenoop;\n  var parse_BigName = parsenoop;\n  var parse_ContinueBigName = parsenoop;\n  var parse_WebPub = parsenoop;\n  var parse_QsiSXTag = parsenoop;\n  var parse_DBQueryExt = parsenoop;\n  var parse_ExtString = parsenoop;\n  var parse_TxtQry = parsenoop;\n  var parse_Qsir = parsenoop;\n  var parse_Qsif = parsenoop;\n  var parse_RRDTQSIF = parsenoop;\n  var parse_OleDbConn = parsenoop;\n  var parse_WOpt = parsenoop;\n  var parse_SXViewEx = parsenoop;\n  var parse_SXTH = parsenoop;\n  var parse_SXPIEx = parsenoop;\n  var parse_SXVDTEx = parsenoop;\n  var parse_SXViewEx9 = parsenoop;\n  var parse_ContinueFrt = parsenoop;\n  var parse_RealTimeData = parsenoop;\n  var parse_ChartFrtInfo = parsenoop;\n  var parse_FrtWrapper = parsenoop;\n  var parse_StartBlock = parsenoop;\n  var parse_EndBlock = parsenoop;\n  var parse_StartObject = parsenoop;\n  var parse_EndObject = parsenoop;\n  var parse_CatLab = parsenoop;\n  var parse_YMult = parsenoop;\n  var parse_SXViewLink = parsenoop;\n  var parse_PivotChartBits = parsenoop;\n  var parse_FrtFontList = parsenoop;\n  var parse_SheetExt = parsenoop;\n  var parse_BookExt = parsenoop;\n  var parse_SXAddl = parsenoop;\n  var parse_CrErr = parsenoop;\n  var parse_HFPicture = parsenoop;\n  var parse_Feat = parsenoop;\n  var parse_DataLabExt = parsenoop;\n  var parse_DataLabExtContents = parsenoop;\n  var parse_CellWatch = parsenoop;\n  var parse_FeatHdr11 = parsenoop;\n  var parse_Feature11 = parsenoop;\n  var parse_DropDownObjIds = parsenoop;\n  var parse_ContinueFrt11 = parsenoop;\n  var parse_DConn = parsenoop;\n  var parse_List12 = parsenoop;\n  var parse_Feature12 = parsenoop;\n  var parse_CondFmt12 = parsenoop;\n  var parse_CF12 = parsenoop;\n  var parse_CFEx = parsenoop;\n  var parse_AutoFilter12 = parsenoop;\n  var parse_ContinueFrt12 = parsenoop;\n  var parse_MDTInfo = parsenoop;\n  var parse_MDXStr = parsenoop;\n  var parse_MDXTuple = parsenoop;\n  var parse_MDXSet = parsenoop;\n  var parse_MDXProp = parsenoop;\n  var parse_MDXKPI = parsenoop;\n  var parse_MDB = parsenoop;\n  var parse_PLV = parsenoop;\n  var parse_DXF = parsenoop;\n  var parse_TableStyles = parsenoop;\n  var parse_TableStyle = parsenoop;\n  var parse_TableStyleElement = parsenoop;\n  var parse_NamePublish = parsenoop;\n  var parse_NameCmt = parsenoop;\n  var parse_SortData = parsenoop;\n  var parse_GUIDTypeLib = parsenoop;\n  var parse_FnGrp12 = parsenoop;\n  var parse_NameFnGrp12 = parsenoop;\n  var parse_HeaderFooter = parsenoop;\n  var parse_CrtLayout12 = parsenoop;\n  var parse_CrtMlFrt = parsenoop;\n  var parse_CrtMlFrtContinue = parsenoop;\n  var parse_ShapePropsStream = parsenoop;\n  var parse_TextPropsStream = parsenoop;\n  var parse_RichTextStream = parsenoop;\n  var parse_CrtLayout12A = parsenoop;\n  var parse_Units = parsenoop;\n  var parse_Chart = parsenoop;\n  var parse_Series = parsenoop;\n  var parse_DataFormat = parsenoop;\n  var parse_LineFormat = parsenoop;\n  var parse_MarkerFormat = parsenoop;\n  var parse_AreaFormat = parsenoop;\n  var parse_PieFormat = parsenoop;\n  var parse_AttachedLabel = parsenoop;\n  var parse_SeriesText = parsenoop;\n  var parse_ChartFormat = parsenoop;\n  var parse_Legend = parsenoop;\n  var parse_SeriesList = parsenoop;\n  var parse_Bar = parsenoop;\n  var parse_Line = parsenoop;\n  var parse_Pie = parsenoop;\n  var parse_Area = parsenoop;\n  var parse_Scatter = parsenoop;\n  var parse_CrtLine = parsenoop;\n  var parse_Axis = parsenoop;\n  var parse_Tick = parsenoop;\n  var parse_ValueRange = parsenoop;\n  var parse_CatSerRange = parsenoop;\n  var parse_AxisLine = parsenoop;\n  var parse_CrtLink = parsenoop;\n  var parse_DefaultText = parsenoop;\n  var parse_Text = parsenoop;\n  var parse_ObjectLink = parsenoop;\n  var parse_Frame = parsenoop;\n  var parse_Begin = parsenoop;\n  var parse_End = parsenoop;\n  var parse_PlotArea = parsenoop;\n  var parse_Chart3d = parsenoop;\n  var parse_PicF = parsenoop;\n  var parse_DropBar = parsenoop;\n  var parse_Radar = parsenoop;\n  var parse_Surf = parsenoop;\n  var parse_RadarArea = parsenoop;\n  var parse_AxisParent = parsenoop;\n  var parse_LegendException = parsenoop;\n  var parse_ShtProps = parsenoop;\n  var parse_SerToCrt = parsenoop;\n  var parse_AxesUsed = parsenoop;\n  var parse_SBaseRef = parsenoop;\n  var parse_SerParent = parsenoop;\n  var parse_SerAuxTrend = parsenoop;\n  var parse_IFmtRecord = parsenoop;\n  var parse_Pos = parsenoop;\n  var parse_AlRuns = parsenoop;\n  var parse_BRAI = parsenoop;\n  var parse_SerAuxErrBar = parsenoop;\n  var parse_SerFmt = parsenoop;\n  var parse_Chart3DBarShape = parsenoop;\n  var parse_Fbi = parsenoop;\n  var parse_BopPop = parsenoop;\n  var parse_AxcExt = parsenoop;\n  var parse_Dat = parsenoop;\n  var parse_PlotGrowth = parsenoop;\n  var parse_SIIndex = parsenoop;\n  var parse_GelFrame = parsenoop;\n  var parse_BopPopCustom = parsenoop;\n  var parse_Fbi2 = parsenoop;\n  /* --- Specific to versions before BIFF8 --- */\n\n  function parse_BIFF5String(blob) {\n    var len = blob.read_shift(1);\n    return blob.read_shift(len, 'sbcs-cont');\n  }\n  /* BIFF2_??? where ??? is the name from [XLS] */\n\n\n  function parse_BIFF2STR(blob, length, opts) {\n    var cell = parse_XLSCell(blob, 6);\n    ++blob.l;\n    var str = parse_XLUnicodeString2(blob, length - 7, opts);\n    cell.val = str;\n    return cell;\n  }\n\n  function parse_BIFF2NUM(blob, length, opts) {\n    var cell = parse_XLSCell(blob, 6);\n    ++blob.l;\n    var num = parse_Xnum(blob, 8);\n    cell.val = num;\n    return cell;\n  }\n  /* 18.4.1 charset to codepage mapping */\n\n\n  var CS2CP = {\n    0: 1252,\n\n    /* ANSI */\n    1: 65001,\n\n    /* DEFAULT */\n    2: 65001,\n\n    /* SYMBOL */\n    77: 10000,\n\n    /* MAC */\n    128: 932,\n\n    /* SHIFTJIS */\n    129: 949,\n\n    /* HANGUL */\n    130: 1361,\n\n    /* JOHAB */\n    134: 936,\n\n    /* GB2312 */\n    136: 950,\n\n    /* CHINESEBIG5 */\n    161: 1253,\n\n    /* GREEK */\n    162: 1254,\n\n    /* TURKISH */\n    163: 1258,\n\n    /* VIETNAMESE */\n    177: 1255,\n\n    /* HEBREW */\n    178: 1256,\n\n    /* ARABIC */\n    186: 1257,\n\n    /* BALTIC */\n    204: 1251,\n\n    /* RUSSIAN */\n    222: 874,\n\n    /* THAI */\n    238: 1250,\n\n    /* EASTEUROPE */\n    255: 1252,\n\n    /* OEM */\n    69: 6969\n    /* MISC */\n\n  };\n  /* Parse a list of <r> tags */\n\n  var parse_rs = function parse_rs_factory() {\n    var tregex = matchtag(\"t\"),\n        rpregex = matchtag(\"rPr\"),\n        rregex = /<r>/g,\n        rend = /<\\/r>/,\n        nlregex = /\\r\\n/g;\n    /* 18.4.7 rPr CT_RPrElt */\n\n    var parse_rpr = function parse_rpr(rpr, intro, outro) {\n      var font = {},\n          cp = 65001;\n      var m = rpr.match(tagregex),\n          i = 0;\n      if (m) for (; i != m.length; ++i) {\n        var y = parsexmltag(m[i]);\n\n        switch (y[0]) {\n          /* 18.8.12 condense CT_BooleanProperty */\n\n          /* ** not required . */\n          case '<condense':\n            break;\n\n          /* 18.8.17 extend CT_BooleanProperty */\n\n          /* ** not required . */\n\n          case '<extend':\n            break;\n\n          /* 18.8.36 shadow CT_BooleanProperty */\n\n          /* ** not required . */\n\n          case '<shadow':\n          /* falls through */\n\n          case '<shadow/>':\n            break;\n\n          /* 18.4.1 charset CT_IntProperty TODO */\n\n          case '<charset':\n            if (y.val == '1') break;\n            cp = CS2CP[parseInt(y.val, 10)];\n            break;\n\n          /* 18.4.2 outline CT_BooleanProperty TODO */\n\n          case '<outline':\n          /* falls through */\n\n          case '<outline/>':\n            break;\n\n          /* 18.4.5 rFont CT_FontName */\n\n          case '<rFont':\n            font.name = y.val;\n            break;\n\n          /* 18.4.11 sz CT_FontSize */\n\n          case '<sz':\n            font.sz = y.val;\n            break;\n\n          /* 18.4.10 strike CT_BooleanProperty */\n\n          case '<strike':\n            if (!y.val) break;\n\n          /* falls through */\n\n          case '<strike/>':\n            font.strike = 1;\n            break;\n\n          case '</strike>':\n            break;\n\n          /* 18.4.13 u CT_UnderlineProperty */\n\n          case '<u':\n            if (!y.val) break;\n\n          /* falls through */\n\n          case '<u/>':\n            font.u = 1;\n            break;\n\n          case '</u>':\n            break;\n\n          /* 18.8.2 b */\n\n          case '<b':\n            if (!y.val) break;\n\n          /* falls through */\n\n          case '<b/>':\n            font.b = 1;\n            break;\n\n          case '</b>':\n            break;\n\n          /* 18.8.26 i */\n\n          case '<i':\n            if (!y.val) break;\n\n          /* falls through */\n\n          case '<i/>':\n            font.i = 1;\n            break;\n\n          case '</i>':\n            break;\n\n          /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */\n\n          case '<color':\n            if (y.rgb) font.color = y.rgb.substr(2, 6);\n            break;\n\n          /* 18.8.18 family ST_FontFamily */\n\n          case '<family':\n            font.family = y.val;\n            break;\n\n          /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */\n\n          case '<vertAlign':\n            break;\n\n          /* 18.8.35 scheme CT_FontScheme TODO */\n\n          case '<scheme':\n            break;\n\n          default:\n            if (y[0].charCodeAt(1) !== 47) throw 'Unrecognized rich format ' + y[0];\n        }\n      }\n      /* TODO: These should be generated styles, not inline */\n\n      var style = [];\n      if (font.b) style.push(\"font-weight: bold;\");\n      if (font.i) style.push(\"font-style: italic;\");\n      intro.push('<span style=\"' + style.join(\"\") + '\">');\n      outro.push(\"</span>\");\n      return cp;\n    };\n    /* 18.4.4 r CT_RElt */\n\n\n    function parse_r(r) {\n      var terms = [[], \"\", []];\n      /* 18.4.12 t ST_Xstring */\n\n      var t = r.match(tregex),\n          cp = 65001;\n      if (!isval(t)) return \"\";\n      terms[1] = t[1];\n      var rpr = r.match(rpregex);\n      if (isval(rpr)) cp = parse_rpr(rpr[1], terms[0], terms[2]);\n      return terms[0].join(\"\") + terms[1].replace(nlregex, '<br/>') + terms[2].join(\"\");\n    }\n\n    return function parse_rs(rs) {\n      return rs.replace(rregex, \"\").split(rend).map(parse_r).join(\"\");\n    };\n  }();\n  /* 18.4.8 si CT_Rst */\n\n\n  var sitregex = /<t[^>]*>([^<]*)<\\/t>/g,\n      sirregex = /<r>/;\n\n  function parse_si(x, opts) {\n    var html = opts ? opts.cellHTML : true;\n    var z = {};\n    if (!x) return null;\n    var y;\n    /* 18.4.12 t ST_Xstring (Plaintext String) */\n\n    if (x.charCodeAt(1) === 116) {\n      z.t = utf8read(unescapexml(x.substr(x.indexOf(\">\") + 1).split(/<\\/t>/)[0]));\n      z.r = x;\n      if (html) z.h = z.t;\n    }\n    /* 18.4.4 r CT_RElt (Rich Text Run) */\n    else if (y = x.match(sirregex)) {\n        z.r = x;\n        z.t = utf8read(unescapexml(x.match(sitregex).join(\"\").replace(tagregex, \"\")));\n        if (html) z.h = parse_rs(x);\n      }\n    /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */\n\n    /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */\n\n\n    return z;\n  }\n  /* 18.4 Shared String Table */\n\n\n  var sstr0 = /<sst([^>]*)>([\\s\\S]*)<\\/sst>/;\n  var sstr1 = /<(?:si|sstItem)>/g;\n  var sstr2 = /<\\/(?:si|sstItem)>/;\n\n  function parse_sst_xml(data, opts) {\n    var s = [],\n        ss;\n    /* 18.4.9 sst CT_Sst */\n\n    var sst = data.match(sstr0);\n\n    if (isval(sst)) {\n      ss = sst[2].replace(sstr1, \"\").split(sstr2);\n\n      for (var i = 0; i != ss.length; ++i) {\n        var o = parse_si(ss[i], opts);\n        if (o != null) s[s.length] = o;\n      }\n\n      sst = parsexmltag(sst[1]);\n      s.Count = sst.count;\n      s.Unique = sst.uniqueCount;\n    }\n\n    return s;\n  }\n\n  RELS.SST = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\";\n  var straywsregex = /^\\s|\\s$|[\\t\\n\\r]/;\n\n  function write_sst_xml(sst, opts) {\n    if (!opts.bookSST) return \"\";\n    var o = [XML_HEADER];\n    o[o.length] = writextag('sst', null, {\n      xmlns: XMLNS.main[0],\n      count: sst.Count,\n      uniqueCount: sst.Unique\n    });\n\n    for (var i = 0; i != sst.length; ++i) {\n      if (sst[i] == null) continue;\n      var s = sst[i];\n      var sitag = \"<si>\";\n      if (s.r) sitag += s.r;else {\n        sitag += \"<t\";\n        if (s.t.match(straywsregex)) sitag += ' xml:space=\"preserve\"';\n        sitag += \">\" + escapexml(s.t) + \"</t>\";\n      }\n      sitag += \"</si>\";\n      o[o.length] = sitag;\n    }\n\n    if (o.length > 2) {\n      o[o.length] = '</sst>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* [MS-XLSB] 2.4.219 BrtBeginSst */\n\n\n  function parse_BrtBeginSst(data, length) {\n    return [data.read_shift(4), data.read_shift(4)];\n  }\n  /* [MS-XLSB] 2.1.7.45 Shared Strings */\n\n\n  function parse_sst_bin(data, opts) {\n    var s = [];\n    var pass = false;\n    recordhopper(data, function hopper_sst(val, R, RT) {\n      switch (R.n) {\n        case 'BrtBeginSst':\n          s.Count = val[0];\n          s.Unique = val[1];\n          break;\n\n        case 'BrtSSTItem':\n          s.push(val);\n          break;\n\n        case 'BrtEndSst':\n          return true;\n\n        /* TODO: produce a test case with a future record */\n\n        case 'BrtFRTBegin':\n          pass = true;\n          break;\n\n        case 'BrtFRTEnd':\n          pass = false;\n          break;\n\n        default:\n          if (!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n      }\n    });\n    return s;\n  }\n\n  function write_BrtBeginSst(sst, o) {\n    if (!o) o = new_buf(8);\n    o.write_shift(4, sst.Count);\n    o.write_shift(4, sst.Unique);\n    return o;\n  }\n\n  var write_BrtSSTItem = write_RichStr;\n\n  function write_sst_bin(sst, opts) {\n    var ba = buf_array();\n    write_record(ba, \"BrtBeginSst\", write_BrtBeginSst(sst));\n\n    for (var i = 0; i < sst.length; ++i) {\n      write_record(ba, \"BrtSSTItem\", write_BrtSSTItem(sst[i]));\n    }\n\n    write_record(ba, \"BrtEndSst\");\n    return ba.end();\n  }\n\n  function _JS2ANSI(str) {\n    if (typeof cptable !== 'undefined') return cptable.utils.encode(1252, str);\n    return str.split(\"\").map(function (x) {\n      return x.charCodeAt(0);\n    });\n  }\n  /* [MS-OFFCRYPTO] 2.1.4 Version */\n\n\n  function parse_Version(blob, length) {\n    var o = {};\n    o.Major = blob.read_shift(2);\n    o.Minor = blob.read_shift(2);\n    return o;\n  }\n  /* [MS-OFFCRYPTO] 2.3.2 Encryption Header */\n\n\n  function parse_EncryptionHeader(blob, length) {\n    var o = {};\n    o.Flags = blob.read_shift(4); // Check if SizeExtra is 0x00000000\n\n    var tmp = blob.read_shift(4);\n    if (tmp !== 0) throw 'Unrecognized SizeExtra: ' + tmp;\n    o.AlgID = blob.read_shift(4);\n\n    switch (o.AlgID) {\n      case 0:\n      case 0x6801:\n      case 0x660E:\n      case 0x660F:\n      case 0x6610:\n        break;\n\n      default:\n        throw 'Unrecognized encryption algorithm: ' + o.AlgID;\n    }\n\n    parsenoop(blob, length - 12);\n    return o;\n  }\n  /* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */\n\n\n  function parse_EncryptionVerifier(blob, length) {\n    return parsenoop(blob, length);\n  }\n  /* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */\n\n\n  function parse_RC4CryptoHeader(blob, length) {\n    var o = {};\n    var vers = o.EncryptionVersionInfo = parse_Version(blob, 4);\n    length -= 4;\n    if (vers.Minor != 2) throw 'unrecognized minor version code: ' + vers.Minor;\n    if (vers.Major > 4 || vers.Major < 2) throw 'unrecognized major version code: ' + vers.Major;\n    o.Flags = blob.read_shift(4);\n    length -= 4;\n    var sz = blob.read_shift(4);\n    length -= 4;\n    o.EncryptionHeader = parse_EncryptionHeader(blob, sz);\n    length -= sz;\n    o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);\n    return o;\n  }\n  /* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */\n\n\n  function parse_RC4Header(blob, length) {\n    var o = {};\n    var vers = o.EncryptionVersionInfo = parse_Version(blob, 4);\n    length -= 4;\n    if (vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;\n    o.Salt = blob.read_shift(16);\n    o.EncryptedVerifier = blob.read_shift(16);\n    o.EncryptedVerifierHash = blob.read_shift(16);\n    return o;\n  }\n  /* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */\n\n\n  function crypto_CreatePasswordVerifier_Method1(Password) {\n    var Verifier = 0x0000,\n        PasswordArray;\n\n    var PasswordDecoded = _JS2ANSI(Password);\n\n    var len = PasswordDecoded.length + 1,\n        i,\n        PasswordByte;\n    var Intermediate1, Intermediate2, Intermediate3;\n    PasswordArray = new_raw_buf(len);\n    PasswordArray[0] = PasswordDecoded.length;\n\n    for (i = 1; i != len; ++i) {\n      PasswordArray[i] = PasswordDecoded[i - 1];\n    }\n\n    for (i = len - 1; i >= 0; --i) {\n      PasswordByte = PasswordArray[i];\n      Intermediate1 = (Verifier & 0x4000) === 0x0000 ? 0 : 1;\n      Intermediate2 = Verifier << 1 & 0x7FFF;\n      Intermediate3 = Intermediate1 | Intermediate2;\n      Verifier = Intermediate3 ^ PasswordByte;\n    }\n\n    return Verifier ^ 0xCE4B;\n  }\n  /* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */\n\n\n  var crypto_CreateXorArray_Method1 = function () {\n    var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];\n    var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];\n    var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];\n\n    var Ror = function Ror(Byte) {\n      return (Byte / 2 | Byte * 128) & 0xFF;\n    };\n\n    var XorRor = function XorRor(byte1, byte2) {\n      return Ror(byte1 ^ byte2);\n    };\n\n    var CreateXorKey_Method1 = function CreateXorKey_Method1(Password) {\n      var XorKey = InitialCode[Password.length - 1];\n      var CurrentElement = 0x68;\n\n      for (var i = Password.length - 1; i >= 0; --i) {\n        var Char = Password[i];\n\n        for (var j = 0; j != 7; ++j) {\n          if (Char & 0x40) XorKey ^= XorMatrix[CurrentElement];\n          Char *= 2;\n          --CurrentElement;\n        }\n      }\n\n      return XorKey;\n    };\n\n    return function (password) {\n      var Password = _JS2ANSI(password);\n\n      var XorKey = CreateXorKey_Method1(Password);\n      var Index = Password.length;\n      var ObfuscationArray = new_raw_buf(16);\n\n      for (var i = 0; i != 16; ++i) {\n        ObfuscationArray[i] = 0x00;\n      }\n\n      var Temp, PasswordLastChar, PadIndex;\n\n      if ((Index & 1) === 1) {\n        Temp = XorKey >> 8;\n        ObfuscationArray[Index] = XorRor(PadArray[0], Temp);\n        --Index;\n        Temp = XorKey & 0xFF;\n        PasswordLastChar = Password[Password.length - 1];\n        ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);\n      }\n\n      while (Index > 0) {\n        --Index;\n        Temp = XorKey >> 8;\n        ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n        --Index;\n        Temp = XorKey & 0xFF;\n        ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n      }\n\n      Index = 15;\n      PadIndex = 15 - Password.length;\n\n      while (PadIndex > 0) {\n        Temp = XorKey >> 8;\n        ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);\n        --Index;\n        --PadIndex;\n        Temp = XorKey & 0xFF;\n        ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n        --Index;\n        --PadIndex;\n      }\n\n      return ObfuscationArray;\n    };\n  }();\n  /* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */\n\n\n  var crypto_DecryptData_Method1 = function crypto_DecryptData_Method1(password, Data, XorArrayIndex, XorArray, O) {\n    /* If XorArray is set, use it; if O is not set, make changes in-place */\n    if (!O) O = Data;\n    if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);\n    var Index, Value;\n\n    for (Index = 0; Index != Data.length; ++Index) {\n      Value = Data[Index];\n      Value ^= XorArray[XorArrayIndex];\n      Value = (Value >> 5 | Value << 3) & 0xFF;\n      O[Index] = Value;\n      ++XorArrayIndex;\n    }\n\n    return [O, XorArrayIndex, XorArray];\n  };\n\n  var crypto_MakeXorDecryptor = function crypto_MakeXorDecryptor(password) {\n    var XorArrayIndex = 0,\n        XorArray = crypto_CreateXorArray_Method1(password);\n    return function (Data) {\n      var O = crypto_DecryptData_Method1(null, Data, XorArrayIndex, XorArray);\n      XorArrayIndex = O[1];\n      return O[0];\n    };\n  };\n  /* 2.5.343 */\n\n\n  function parse_XORObfuscation(blob, length, opts, out) {\n    var o = {\n      key: parseuint16(blob),\n      verificationBytes: parseuint16(blob)\n    };\n    if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);\n    out.valid = o.verificationBytes === o.verifier;\n    if (out.valid) out.insitu_decrypt = crypto_MakeXorDecryptor(opts.password);\n    return o;\n  }\n  /* 2.4.117 */\n\n\n  function parse_FilePassHeader(blob, length, oo) {\n    var o = oo || {};\n    o.Info = blob.read_shift(2);\n    blob.l -= 2;\n    if (o.Info === 1) o.Data = parse_RC4Header(blob, length);else o.Data = parse_RC4CryptoHeader(blob, length);\n    return o;\n  }\n\n  function parse_FilePass(blob, length, opts) {\n    var o = {\n      Type: blob.read_shift(2)\n    };\n    /* wEncryptionType */\n\n    if (o.Type) parse_FilePassHeader(blob, length - 2, o);else parse_XORObfuscation(blob, length - 2, opts, o);\n    return o;\n  }\n\n  function hex2RGB(h) {\n    var o = h.substr(h[0] === \"#\" ? 1 : 0, 6);\n    return [parseInt(o.substr(0, 2), 16), parseInt(o.substr(2, 2), 16), parseInt(o.substr(4, 2), 16)];\n  }\n\n  function rgb2Hex(rgb) {\n    for (var i = 0, o = 1; i != 3; ++i) {\n      o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);\n    }\n\n    return o.toString(16).toUpperCase().substr(1);\n  }\n\n  function rgb2HSL(rgb) {\n    var R = rgb[0] / 255,\n        G = rgb[1] / 255,\n        B = rgb[2] / 255;\n    var M = Math.max(R, G, B),\n        m = Math.min(R, G, B),\n        C = M - m;\n    if (C === 0) return [0, 0, R];\n    var H6 = 0,\n        S = 0,\n        L2 = M + m;\n    S = C / (L2 > 1 ? 2 - L2 : L2);\n\n    switch (M) {\n      case R:\n        H6 = ((G - B) / C + 6) % 6;\n        break;\n\n      case G:\n        H6 = (B - R) / C + 2;\n        break;\n\n      case B:\n        H6 = (R - G) / C + 4;\n        break;\n    }\n\n    return [H6 / 6, S, L2 / 2];\n  }\n\n  function hsl2RGB(hsl) {\n    var H = hsl[0],\n        S = hsl[1],\n        L = hsl[2];\n    var C = S * 2 * (L < 0.5 ? L : 1 - L),\n        m = L - C / 2;\n    var rgb = [m, m, m],\n        h6 = 6 * H;\n    var X;\n    if (S !== 0) switch (h6 | 0) {\n      case 0:\n      case 6:\n        X = C * h6;\n        rgb[0] += C;\n        rgb[1] += X;\n        break;\n\n      case 1:\n        X = C * (2 - h6);\n        rgb[0] += X;\n        rgb[1] += C;\n        break;\n\n      case 2:\n        X = C * (h6 - 2);\n        rgb[1] += C;\n        rgb[2] += X;\n        break;\n\n      case 3:\n        X = C * (4 - h6);\n        rgb[1] += X;\n        rgb[2] += C;\n        break;\n\n      case 4:\n        X = C * (h6 - 4);\n        rgb[2] += C;\n        rgb[0] += X;\n        break;\n\n      case 5:\n        X = C * (6 - h6);\n        rgb[2] += X;\n        rgb[0] += C;\n        break;\n    }\n\n    for (var i = 0; i != 3; ++i) {\n      rgb[i] = Math.round(rgb[i] * 255);\n    }\n\n    return rgb;\n  }\n  /* 18.8.3 bgColor tint algorithm */\n\n\n  function rgb_tint(hex, tint) {\n    if (tint == 0) return hex;\n    var hsl = rgb2HSL(hex2RGB(hex));\n    if (tint < 0) hsl[2] = hsl[2] * (1 + tint);else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);\n    var rev = rgb2Hex(hsl2RGB(hsl));\n    return rev;\n  }\n  /* 18.3.1.13 width calculations */\n\n\n  var DEF_MDW = 7,\n      MAX_MDW = 15,\n      MIN_MDW = 1,\n      MDW = DEF_MDW;\n\n  function width2px(width) {\n    return (width + (128 / MDW | 0) / 256) * MDW | 0;\n  }\n\n  function px2char(px) {\n    return ((px - 5) / MDW * 100 + 0.5 | 0) / 100;\n  }\n\n  function char2width(chr) {\n    return ((chr * MDW + 5) / MDW * 256 | 0) / 256;\n  }\n\n  function cycle_width(collw) {\n    return char2width(px2char(width2px(collw)));\n  }\n\n  function find_mdw(collw, coll) {\n    if (cycle_width(collw) != collw) {\n      for (MDW = DEF_MDW; MDW > MIN_MDW; --MDW) {\n        if (cycle_width(collw) === collw) break;\n      }\n\n      if (MDW === MIN_MDW) for (MDW = DEF_MDW + 1; MDW < MAX_MDW; ++MDW) {\n        if (cycle_width(collw) === collw) break;\n      }\n      if (MDW === MAX_MDW) MDW = DEF_MDW;\n    }\n  }\n  /* [MS-EXSPXML3] 2.4.54 ST_enmPattern */\n\n\n  var XLMLPatternTypeMap = {\n    \"None\": \"none\",\n    \"Solid\": \"solid\",\n    \"Gray50\": \"mediumGray\",\n    \"Gray75\": \"darkGray\",\n    \"Gray25\": \"lightGray\",\n    \"HorzStripe\": \"darkHorizontal\",\n    \"VertStripe\": \"darkVertical\",\n    \"ReverseDiagStripe\": \"darkDown\",\n    \"DiagStripe\": \"darkUp\",\n    \"DiagCross\": \"darkGrid\",\n    \"ThickDiagCross\": \"darkTrellis\",\n    \"ThinHorzStripe\": \"lightHorizontal\",\n    \"ThinVertStripe\": \"lightVertical\",\n    \"ThinReverseDiagStripe\": \"lightDown\",\n    \"ThinHorzCross\": \"lightGrid\"\n  };\n  var styles = {}; // shared styles\n\n  var themes = {}; // shared themes\n\n  /* 18.8.21 fills CT_Fills */\n\n  function parse_fills(t, opts) {\n    styles.Fills = [];\n    var fill = {};\n    t[0].match(tagregex).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<fills':\n        case '<fills>':\n        case '</fills>':\n          break;\n\n        /* 18.8.20 fill CT_Fill */\n\n        case '<fill>':\n          break;\n\n        case '</fill>':\n          styles.Fills.push(fill);\n          fill = {};\n          break;\n\n        /* 18.8.32 patternFill CT_PatternFill */\n\n        case '<patternFill':\n          if (y.patternType) fill.patternType = y.patternType;\n          break;\n\n        case '<patternFill/>':\n        case '</patternFill>':\n          break;\n\n        /* 18.8.3 bgColor CT_Color */\n\n        case '<bgColor':\n          if (!fill.bgColor) fill.bgColor = {};\n          if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);\n          if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);\n          if (y.tint) fill.bgColor.tint = parseFloat(y.tint);\n\n          if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n            fill.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[fill.bgColor.theme].rgb, fill.bgColor.tint || 0);\n            if (opts.WTF) fill.bgColor.raw_rgb = rgb_tint(themes.themeElements.clrScheme[fill.bgColor.theme].rgb, 0);\n          }\n          /* Excel uses ARGB strings */\n\n\n          if (y.rgb) fill.bgColor.rgb = y.rgb; //.substring(y.rgb.length - 6);\n\n          break;\n\n        case '<bgColor/>':\n        case '</bgColor>':\n          break;\n\n        /* 18.8.19 fgColor CT_Color */\n\n        case '<fgColor':\n          if (!fill.fgColor) fill.fgColor = {};\n          if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);\n          if (y.tint) fill.fgColor.tint = parseFloat(y.tint);\n\n          if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n            fill.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[fill.fgColor.theme].rgb, fill.fgColor.tint || 0);\n            if (opts.WTF) fill.fgColor.raw_rgb = rgb_tint(themes.themeElements.clrScheme[fill.fgColor.theme].rgb, 0);\n          }\n          /* Excel uses ARGB strings */\n\n\n          if (y.rgb) fill.fgColor.rgb = y.rgb; //.substring(y.rgb.length - 6);\n\n          break;\n\n        case '<fgColor/>':\n        case '</fgColor>':\n          break;\n\n        default:\n          if (opts.WTF) throw 'unrecognized ' + y[0] + ' in fills';\n      }\n    });\n  }\n\n  function parse_fonts(t, opts) {\n    styles.Fonts = [];\n    var font = {};\n    t[0].match(tagregex).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<fonts':\n        case '<fonts>':\n        case '</fonts>':\n          break;\n\n        case '<font':\n          break;\n\n        case '</font>':\n          styles.Fonts.push(font);\n          ;\n          font = {};\n          break;\n\n        case '<name':\n          if (y.val) font.name = y.val;\n          break;\n\n        case '<name/>':\n        case '</name>':\n          break;\n\n        case '<b/>':\n          font.bold = true;\n          break;\n\n        case '<u/>':\n          font.underline = true;\n          break;\n\n        case '<i/>':\n          font.italic = true;\n          break;\n\n        case '<strike/>':\n          font.strike = true;\n          break;\n\n        case '<outline/>':\n          font.outline = true;\n          break;\n\n        case '<shadow/>':\n          font.shadow = true;\n          break;\n\n        case '<sz':\n          if (y.val) font.sz = y.val;\n          break;\n\n        case '<sz/>':\n        case '</sz>':\n          break;\n\n        case '<vertAlign':\n          if (y.val) font.vertAlign = y.val;\n          break;\n\n        case '<vertAlign/>':\n        case '</vertAlign>':\n          break;\n\n        case '<color':\n          if (!font.color) font.color = {};\n          if (y.theme) font.color.theme = y.theme;\n          if (y.tint) font.color.tint = y.tint;\n\n          if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n            font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);\n          }\n\n          if (y.rgb) font.color.rgb = y.rgb;\n          break;\n\n        case '<color/>':\n        case '</color>':\n          break;\n      }\n    });\n  }\n\n  function parse_borders(t, opts) {\n    styles.Borders = [];\n    var border = {},\n        sub_border = {};\n    t[0].match(tagregex).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<borders':\n        case '<borders>':\n        case '</borders>':\n          break;\n\n        case '<border':\n        case '<border>':\n          border = {};\n\n          if (y.diagonalUp) {\n            border.diagonalUp = y.diagonalUp;\n          }\n\n          if (y.diagonalDown) {\n            border.diagonalDown = y.diagonalDown;\n          }\n\n          styles.Borders.push(border);\n          break;\n          break;\n\n        case '</border>':\n          break;\n\n        case '<left':\n          sub_border = border.left = {};\n\n          if (y.style) {\n            sub_border.style = y.style;\n          }\n\n          break;\n\n        case '<right':\n          sub_border = border.right = {};\n\n          if (y.style) {\n            sub_border.style = y.style;\n          }\n\n          break;\n\n        case '<top':\n          sub_border = border.top = {};\n\n          if (y.style) {\n            sub_border.style = y.style;\n          }\n\n          break;\n\n        case '<bottom':\n          sub_border = border.bottom = {};\n\n          if (y.style) {\n            sub_border.style = y.style;\n          }\n\n          break;\n\n        case '<diagonal':\n          sub_border = border.diagonal = {};\n\n          if (y.style) {\n            sub_border.style = y.style;\n          }\n\n          break;\n\n        case '<color':\n          sub_border.color = {};\n          if (y.theme) sub_border.color.theme = y.theme;\n\n          if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n            sub_border.color.rgb = rgb_tint(themes.themeElements.clrScheme[sub_border.color.theme].rgb, sub_border.color.tint || 0);\n          }\n\n          if (y.tint) sub_border.color.tint = y.tint;\n          if (y.rgb) sub_border.color.rgb = y.rgb;\n          if (y.auto) sub_border.color.auto = y.auto;\n          break;\n\n        case '<name/>':\n        case '</name>':\n          break;\n\n        default:\n          break;\n      }\n    });\n  }\n  /* 18.8.31 numFmts CT_NumFmts */\n\n\n  function parse_numFmts(t, opts) {\n    styles.NumberFmt = [];\n    var k = keys(SSF._table);\n\n    for (var i = 0; i < k.length; ++i) {\n      styles.NumberFmt[k[i]] = SSF._table[k[i]];\n    }\n\n    var m = t[0].match(tagregex);\n\n    for (i = 0; i < m.length; ++i) {\n      var y = parsexmltag(m[i]);\n\n      switch (y[0]) {\n        case '<numFmts':\n        case '</numFmts>':\n        case '<numFmts/>':\n        case '<numFmts>':\n          break;\n\n        case '<numFmt':\n          {\n            var f = unescapexml(utf8read(y.formatCode)),\n                j = parseInt(y.numFmtId, 10);\n            styles.NumberFmt[j] = f;\n            if (j > 0) SSF.load(f, j);\n          }\n          break;\n\n        default:\n          if (opts.WTF) throw 'unrecognized ' + y[0] + ' in numFmts';\n      }\n    }\n  }\n\n  function write_numFmts(NF, opts) {\n    var o = [\"<numFmts>\"];\n    [[5, 8], [23, 26], [41, 44], [63, 66], [164, 392]].forEach(function (r) {\n      for (var i = r[0]; i <= r[1]; ++i) {\n        if (NF[i] !== undefined) o[o.length] = writextag('numFmt', null, {\n          numFmtId: i,\n          formatCode: escapexml(NF[i])\n        });\n      }\n    });\n    if (o.length === 1) return \"\";\n    o[o.length] = \"</numFmts>\";\n    o[0] = writextag('numFmts', null, {\n      count: o.length - 2\n    }).replace(\"/>\", \">\");\n    return o.join(\"\");\n  }\n  /* 18.8.10 cellXfs CT_CellXfs */\n\n\n  function parse_cellXfs(t, opts) {\n    styles.CellXf = [];\n    var xf;\n    t[0].match(tagregex).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<cellXfs':\n        case '<cellXfs>':\n        case '<cellXfs/>':\n        case '</cellXfs>':\n          break;\n\n        /* 18.8.45 xf CT_Xf */\n\n        case '<xf':\n          xf = y;\n          delete xf[0];\n          delete y[0];\n          if (xf.numFmtId) xf.numFmtId = parseInt(xf.numFmtId, 10);\n          if (xf.fillId) xf.fillId = parseInt(xf.fillId, 10);\n          styles.CellXf.push(xf);\n          break;\n\n        case '</xf>':\n          break;\n\n        /* 18.8.1 alignment CT_CellAlignment */\n\n        case '<alignment':\n        case '<alignment/>':\n          var alignment = {};\n\n          if (y.vertical) {\n            alignment.vertical = y.vertical;\n          }\n\n          if (y.horizontal) {\n            alignment.horizontal = y.horizontal;\n          }\n\n          if (y.textRotation != undefined) {\n            alignment.textRotation = y.textRotation;\n          }\n\n          if (y.indent) {\n            alignment.indent = y.indent;\n          }\n\n          if (y.wrapText) {\n            alignment.wrapText = y.wrapText;\n          }\n\n          xf.alignment = alignment;\n          break;\n\n        /* 18.8.33 protection CT_CellProtection */\n\n        case '<protection':\n        case '</protection>':\n        case '<protection/>':\n          break;\n\n        case '<extLst':\n        case '</extLst>':\n          break;\n\n        case '<ext':\n          break;\n\n        default:\n          if (opts.WTF) throw 'unrecognized ' + y[0] + ' in cellXfs';\n      }\n    });\n  }\n\n  function write_cellXfs(cellXfs) {\n    var o = [];\n    o[o.length] = writextag('cellXfs', null);\n    cellXfs.forEach(function (c) {\n      o[o.length] = writextag('xf', null, c);\n    });\n    o[o.length] = \"</cellXfs>\";\n    if (o.length === 2) return \"\";\n    o[0] = writextag('cellXfs', null, {\n      count: o.length - 2\n    }).replace(\"/>\", \">\");\n    return o.join(\"\");\n  }\n  /* 18.8 Styles CT_Stylesheet*/\n\n\n  var parse_sty_xml = function make_pstyx() {\n    var numFmtRegex = /<numFmts([^>]*)>.*<\\/numFmts>/;\n    var cellXfRegex = /<cellXfs([^>]*)>.*<\\/cellXfs>/;\n    var fillsRegex = /<fills([^>]*)>.*<\\/fills>/;\n    var bordersRegex = /<borders([^>]*)>.*<\\/borders>/;\n    return function parse_sty_xml(data, opts) {\n      /* 18.8.39 styleSheet CT_Stylesheet */\n      var t;\n      /* numFmts CT_NumFmts ? */\n\n      if (t = data.match(numFmtRegex)) parse_numFmts(t, opts);\n      /* fonts CT_Fonts ? */\n\n      if (t = data.match(/<fonts([^>]*)>.*<\\/fonts>/)) parse_fonts(t, opts);\n      /* fills CT_Fills */\n\n      if (t = data.match(fillsRegex)) parse_fills(t, opts);\n      /* borders CT_Borders ? */\n\n      if (t = data.match(bordersRegex)) parse_borders(t, opts);\n      /* cellStyleXfs CT_CellStyleXfs ? */\n\n      /* cellXfs CT_CellXfs ? */\n\n      if (t = data.match(cellXfRegex)) parse_cellXfs(t, opts);\n      /* dxfs CT_Dxfs ? */\n\n      /* tableStyles CT_TableStyles ? */\n\n      /* colors CT_Colors ? */\n\n      /* extLst CT_ExtensionList ? */\n\n      return styles;\n    };\n  }();\n\n  var STYLES_XML_ROOT = writextag('styleSheet', null, {\n    'xmlns': XMLNS.main[0],\n    'xmlns:vt': XMLNS.vt\n  });\n  RELS.STY = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\";\n\n  function write_sty_xml(wb, opts) {\n    if (typeof style_builder != 'undefined' && typeof 'require' != 'undefined') {\n      return style_builder.toXml();\n    }\n\n    var o = [XML_HEADER, STYLES_XML_ROOT],\n        w;\n    if ((w = write_numFmts(wb.SSF)) != null) o[o.length] = w;\n    o[o.length] = '<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>';\n    o[o.length] = '<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>';\n    o[o.length] = '<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';\n    o[o.length] = '<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\n    if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;\n    o[o.length] = '<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>';\n    o[o.length] = '<dxfs count=\"0\"/>';\n    o[o.length] = '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>';\n\n    if (o.length > 2) {\n      o[o.length] = '</styleSheet>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* [MS-XLSB] 2.4.651 BrtFmt */\n\n\n  function parse_BrtFmt(data, length) {\n    var ifmt = data.read_shift(2);\n    var stFmtCode = parse_XLWideString(data, length - 2);\n    return [ifmt, stFmtCode];\n  }\n  /* [MS-XLSB] 2.4.653 BrtFont TODO */\n\n\n  function parse_BrtFont(data, length) {\n    var out = {\n      flags: {}\n    };\n    out.dyHeight = data.read_shift(2);\n    out.grbit = parse_FontFlags(data, 2);\n    out.bls = data.read_shift(2);\n    out.sss = data.read_shift(2);\n    out.uls = data.read_shift(1);\n    out.bFamily = data.read_shift(1);\n    out.bCharSet = data.read_shift(1);\n    data.l++;\n    out.brtColor = parse_BrtColor(data, 8);\n    out.bFontScheme = data.read_shift(1);\n    out.name = parse_XLWideString(data, length - 21);\n    out.flags.Bold = out.bls === 0x02BC;\n    out.flags.Italic = out.grbit.fItalic;\n    out.flags.Strikeout = out.grbit.fStrikeout;\n    out.flags.Outline = out.grbit.fOutline;\n    out.flags.Shadow = out.grbit.fShadow;\n    out.flags.Condense = out.grbit.fCondense;\n    out.flags.Extend = out.grbit.fExtend;\n    out.flags.Sub = out.sss & 0x2;\n    out.flags.Sup = out.sss & 0x1;\n    return out;\n  }\n  /* [MS-XLSB] 2.4.816 BrtXF */\n\n\n  function parse_BrtXF(data, length) {\n    var ixfeParent = data.read_shift(2);\n    var ifmt = data.read_shift(2);\n    parsenoop(data, length - 4);\n    return {\n      ixfe: ixfeParent,\n      ifmt: ifmt\n    };\n  }\n  /* [MS-XLSB] 2.1.7.50 Styles */\n\n\n  function parse_sty_bin(data, opts) {\n    styles.NumberFmt = [];\n\n    for (var y in SSF._table) {\n      styles.NumberFmt[y] = SSF._table[y];\n    }\n\n    styles.CellXf = [];\n    var state = \"\";\n    /* TODO: this should be a stack */\n\n    var pass = false;\n    recordhopper(data, function hopper_sty(val, R, RT) {\n      switch (R.n) {\n        case 'BrtFmt':\n          styles.NumberFmt[val[0]] = val[1];\n          SSF.load(val[1], val[0]);\n          break;\n\n        case 'BrtFont':\n          break;\n\n        /* TODO */\n\n        case 'BrtKnownFonts':\n          break;\n\n        /* TODO */\n\n        case 'BrtFill':\n          break;\n\n        /* TODO */\n\n        case 'BrtBorder':\n          break;\n\n        /* TODO */\n\n        case 'BrtXF':\n          if (state === \"CELLXFS\") {\n            styles.CellXf.push(val);\n          }\n\n          break;\n\n        /* TODO */\n\n        case 'BrtStyle':\n          break;\n\n        /* TODO */\n\n        case 'BrtDXF':\n          break;\n\n        /* TODO */\n\n        case 'BrtMRUColor':\n          break;\n\n        /* TODO */\n\n        case 'BrtIndexedColor':\n          break;\n\n        /* TODO */\n\n        case 'BrtBeginStyleSheet':\n          break;\n\n        case 'BrtEndStyleSheet':\n          break;\n\n        case 'BrtBeginTableStyle':\n          break;\n\n        case 'BrtTableStyleElement':\n          break;\n\n        case 'BrtEndTableStyle':\n          break;\n\n        case 'BrtBeginFmts':\n          state = \"FMTS\";\n          break;\n\n        case 'BrtEndFmts':\n          state = \"\";\n          break;\n\n        case 'BrtBeginFonts':\n          state = \"FONTS\";\n          break;\n\n        case 'BrtEndFonts':\n          state = \"\";\n          break;\n\n        case 'BrtACBegin':\n          state = \"ACFONTS\";\n          break;\n\n        case 'BrtACEnd':\n          state = \"\";\n          break;\n\n        case 'BrtBeginFills':\n          state = \"FILLS\";\n          break;\n\n        case 'BrtEndFills':\n          state = \"\";\n          break;\n\n        case 'BrtBeginBorders':\n          state = \"BORDERS\";\n          break;\n\n        case 'BrtEndBorders':\n          state = \"\";\n          break;\n\n        case 'BrtBeginCellStyleXFs':\n          state = \"CELLSTYLEXFS\";\n          break;\n\n        case 'BrtEndCellStyleXFs':\n          state = \"\";\n          break;\n\n        case 'BrtBeginCellXFs':\n          state = \"CELLXFS\";\n          break;\n\n        case 'BrtEndCellXFs':\n          state = \"\";\n          break;\n\n        case 'BrtBeginStyles':\n          state = \"STYLES\";\n          break;\n\n        case 'BrtEndStyles':\n          state = \"\";\n          break;\n\n        case 'BrtBeginDXFs':\n          state = \"DXFS\";\n          break;\n\n        case 'BrtEndDXFs':\n          state = \"\";\n          break;\n\n        case 'BrtBeginTableStyles':\n          state = \"TABLESTYLES\";\n          break;\n\n        case 'BrtEndTableStyles':\n          state = \"\";\n          break;\n\n        case 'BrtBeginColorPalette':\n          state = \"COLORPALETTE\";\n          break;\n\n        case 'BrtEndColorPalette':\n          state = \"\";\n          break;\n\n        case 'BrtBeginIndexedColors':\n          state = \"INDEXEDCOLORS\";\n          break;\n\n        case 'BrtEndIndexedColors':\n          state = \"\";\n          break;\n\n        case 'BrtBeginMRUColors':\n          state = \"MRUCOLORS\";\n          break;\n\n        case 'BrtEndMRUColors':\n          state = \"\";\n          break;\n\n        case 'BrtFRTBegin':\n          pass = true;\n          break;\n\n        case 'BrtFRTEnd':\n          pass = false;\n          break;\n\n        case 'BrtBeginStyleSheetExt14':\n          break;\n\n        case 'BrtBeginSlicerStyles':\n          break;\n\n        case 'BrtEndSlicerStyles':\n          break;\n\n        case 'BrtBeginTimelineStylesheetExt15':\n          break;\n\n        case 'BrtEndTimelineStylesheetExt15':\n          break;\n\n        case 'BrtBeginTimelineStyles':\n          break;\n\n        case 'BrtEndTimelineStyles':\n          break;\n\n        case 'BrtEndStyleSheetExt14':\n          break;\n\n        default:\n          if (!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n      }\n    });\n    return styles;\n  }\n  /* [MS-XLSB] 2.1.7.50 Styles */\n\n\n  function write_sty_bin(data, opts) {\n    var ba = buf_array();\n    write_record(ba, \"BrtBeginStyleSheet\");\n    /* [FMTS] */\n\n    /* [FONTS] */\n\n    /* [FILLS] */\n\n    /* [BORDERS] */\n\n    /* CELLSTYLEXFS */\n\n    /* CELLXFS*/\n\n    /* STYLES */\n\n    /* DXFS */\n\n    /* TABLESTYLES */\n\n    /* [COLORPALETTE] */\n\n    /* FRTSTYLESHEET*/\n\n    write_record(ba, \"BrtEndStyleSheet\");\n    return ba.end();\n  }\n\n  RELS.THEME = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\";\n  /* 20.1.6.2 clrScheme CT_ColorScheme */\n\n  function parse_clrScheme(t, opts) {\n    themes.themeElements.clrScheme = [];\n    var color = {};\n    t[0].match(tagregex).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<a:clrScheme':\n        case '</a:clrScheme>':\n          break;\n\n        /* 20.1.2.3.32 srgbClr CT_SRgbColor */\n\n        case '<a:srgbClr':\n          color.rgb = y.val;\n          break;\n\n        /* 20.1.2.3.33 sysClr CT_SystemColor */\n\n        case '<a:sysClr':\n          color.rgb = y.lastClr;\n          break;\n\n        /* 20.1.4.1.9 dk1 (Dark 1) */\n\n        case '<a:dk1>':\n        case '</a:dk1>':\n        /* 20.1.4.1.10 dk2 (Dark 2) */\n\n        case '<a:dk2>':\n        case '</a:dk2>':\n        /* 20.1.4.1.22 lt1 (Light 1) */\n\n        case '<a:lt1>':\n        case '</a:lt1>':\n        /* 20.1.4.1.23 lt2 (Light 2) */\n\n        case '<a:lt2>':\n        case '</a:lt2>':\n        /* 20.1.4.1.1 accent1 (Accent 1) */\n\n        case '<a:accent1>':\n        case '</a:accent1>':\n        /* 20.1.4.1.2 accent2 (Accent 2) */\n\n        case '<a:accent2>':\n        case '</a:accent2>':\n        /* 20.1.4.1.3 accent3 (Accent 3) */\n\n        case '<a:accent3>':\n        case '</a:accent3>':\n        /* 20.1.4.1.4 accent4 (Accent 4) */\n\n        case '<a:accent4>':\n        case '</a:accent4>':\n        /* 20.1.4.1.5 accent5 (Accent 5) */\n\n        case '<a:accent5>':\n        case '</a:accent5>':\n        /* 20.1.4.1.6 accent6 (Accent 6) */\n\n        case '<a:accent6>':\n        case '</a:accent6>':\n        /* 20.1.4.1.19 hlink (Hyperlink) */\n\n        case '<a:hlink>':\n        case '</a:hlink>':\n        /* 20.1.4.1.15 folHlink (Followed Hyperlink) */\n\n        case '<a:folHlink>':\n        case '</a:folHlink>':\n          if (y[0][1] === '/') {\n            themes.themeElements.clrScheme.push(color);\n            color = {};\n          } else {\n            color.name = y[0].substring(3, y[0].length - 1);\n          }\n\n          break;\n\n        default:\n          if (opts.WTF) throw 'unrecognized ' + y[0] + ' in clrScheme';\n      }\n    });\n  }\n  /* 20.1.4.1.18 fontScheme CT_FontScheme */\n\n\n  function parse_fontScheme(t, opts) {}\n  /* 20.1.4.1.15 fmtScheme CT_StyleMatrix */\n\n\n  function parse_fmtScheme(t, opts) {}\n\n  var clrsregex = /<a:clrScheme([^>]*)>[^\\u2603]*<\\/a:clrScheme>/;\n  var fntsregex = /<a:fontScheme([^>]*)>[^\\u2603]*<\\/a:fontScheme>/;\n  var fmtsregex = /<a:fmtScheme([^>]*)>[^\\u2603]*<\\/a:fmtScheme>/;\n  /* 20.1.6.10 themeElements CT_BaseStyles */\n\n  function parse_themeElements(data, opts) {\n    themes.themeElements = {};\n    var t;\n    [\n    /* clrScheme CT_ColorScheme */\n    ['clrScheme', clrsregex, parse_clrScheme],\n    /* fontScheme CT_FontScheme */\n    ['fontScheme', fntsregex, parse_fontScheme],\n    /* fmtScheme CT_StyleMatrix */\n    ['fmtScheme', fmtsregex, parse_fmtScheme]].forEach(function (m) {\n      if (!(t = data.match(m[1]))) throw m[0] + ' not found in themeElements';\n      m[2](t, opts);\n    });\n  }\n\n  var themeltregex = /<a:themeElements([^>]*)>[^\\u2603]*<\\/a:themeElements>/;\n  /* 14.2.7 Theme Part */\n\n  function parse_theme_xml(data, opts) {\n    /* 20.1.6.9 theme CT_OfficeStyleSheet */\n    if (!data || data.length === 0) return themes;\n    var t;\n    /* themeElements CT_BaseStyles */\n\n    if (!(t = data.match(themeltregex))) throw 'themeElements not found in theme';\n    parse_themeElements(t[0], opts);\n    return themes;\n  } //function write_theme() { return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2><a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2><a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1><a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2><a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3><a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4><a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5><a:accent6><a:srgbClr val=\"F79646\"/></a:accent6><a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Cambria\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"1\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>'; }\n\n\n  function write_theme(opts) {\n    if (opts.themeXml) {\n      return opts.themeXml;\n    }\n\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2><a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2><a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1><a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2><a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3><a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4><a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5><a:accent6><a:srgbClr val=\"F79646\"/></a:accent6><a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Cambria\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"1\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>';\n  }\n  /* [MS-XLS] 2.4.326 TODO: payload is a zip file */\n\n\n  function parse_Theme(blob, length) {\n    var dwThemeVersion = blob.read_shift(4);\n    if (dwThemeVersion === 124226) return;\n    blob.l += length - 4;\n  }\n  /* 2.5.49 */\n\n\n  function parse_ColorTheme(blob, length) {\n    return blob.read_shift(4);\n  }\n  /* 2.5.155 */\n\n\n  function parse_FullColorExt(blob, length) {\n    var o = {};\n    o.xclrType = blob.read_shift(2);\n    o.nTintShade = blob.read_shift(2);\n\n    switch (o.xclrType) {\n      case 0:\n        blob.l += 4;\n        break;\n\n      case 1:\n        o.xclrValue = parse_IcvXF(blob, 4);\n        break;\n\n      case 2:\n        o.xclrValue = parse_LongRGBA(blob, 4);\n        break;\n\n      case 3:\n        o.xclrValue = parse_ColorTheme(blob, 4);\n        break;\n\n      case 4:\n        blob.l += 4;\n        break;\n    }\n\n    blob.l += 8;\n    return o;\n  }\n  /* 2.5.164 TODO: read 7 bits*/\n\n\n  function parse_IcvXF(blob, length) {\n    return parsenoop(blob, length);\n  }\n  /* 2.5.280 */\n\n\n  function parse_XFExtGradient(blob, length) {\n    return parsenoop(blob, length);\n  }\n  /* 2.5.108 */\n\n\n  function parse_ExtProp(blob, length) {\n    var extType = blob.read_shift(2);\n    var cb = blob.read_shift(2);\n    var o = [extType];\n\n    switch (extType) {\n      case 0x04:\n      case 0x05:\n      case 0x07:\n      case 0x08:\n      case 0x09:\n      case 0x0A:\n      case 0x0B:\n      case 0x0D:\n        o[1] = parse_FullColorExt(blob, cb);\n        break;\n\n      case 0x06:\n        o[1] = parse_XFExtGradient(blob, cb);\n        break;\n\n      case 0x0E:\n      case 0x0F:\n        o[1] = blob.read_shift(cb === 5 ? 1 : 2);\n        break;\n\n      default:\n        throw new Error(\"Unrecognized ExtProp type: \" + extType + \" \" + cb);\n    }\n\n    return o;\n  }\n  /* 2.4.355 */\n\n\n  function parse_XFExt(blob, length) {\n    var end = blob.l + length;\n    blob.l += 2;\n    var ixfe = blob.read_shift(2);\n    blob.l += 2;\n    var cexts = blob.read_shift(2);\n    var ext = [];\n\n    while (cexts-- > 0) {\n      ext.push(parse_ExtProp(blob, end - blob.l));\n    }\n\n    return {\n      ixfe: ixfe,\n      ext: ext\n    };\n  }\n  /* xf is an XF, see parse_XFExt for xfext */\n\n\n  function update_xfext(xf, xfext) {\n    xfext.forEach(function (xfe) {\n      switch (xfe[0]) {\n        /* 2.5.108 extPropData */\n        case 0x04:\n          break;\n\n        /* foreground color */\n\n        case 0x05:\n          break;\n\n        /* background color */\n\n        case 0x07:\n        case 0x08:\n        case 0x09:\n        case 0x0a:\n          break;\n\n        case 0x0d:\n          break;\n\n        /* text color */\n\n        case 0x0e:\n          break;\n\n        /* font scheme */\n\n        default:\n          throw \"bafuq\" + xfe[0].toString(16);\n      }\n    });\n  }\n  /* 18.6 Calculation Chain */\n\n\n  function parse_cc_xml(data, opts) {\n    var d = [];\n    var l = 0,\n        i = 1;\n    (data.match(tagregex) || []).forEach(function (x) {\n      var y = parsexmltag(x);\n\n      switch (y[0]) {\n        case '<?xml':\n          break;\n\n        /* 18.6.2  calcChain CT_CalcChain 1 */\n\n        case '<calcChain':\n        case '<calcChain>':\n        case '</calcChain>':\n          break;\n\n        /* 18.6.1  c CT_CalcCell 1 */\n\n        case '<c':\n          delete y[0];\n          if (y.i) i = y.i;else y.i = i;\n          d.push(y);\n          break;\n      }\n    });\n    return d;\n  }\n\n  function write_cc_xml(data, opts) {}\n  /* [MS-XLSB] 2.6.4.1 */\n\n\n  function parse_BrtCalcChainItem$(data, length) {\n    var out = {};\n    out.i = data.read_shift(4);\n    var cell = {};\n    cell.r = data.read_shift(4);\n    cell.c = data.read_shift(4);\n    out.r = encode_cell(cell);\n    var flags = data.read_shift(1);\n    if (flags & 0x2) out.l = '1';\n    if (flags & 0x8) out.a = '1';\n    return out;\n  }\n  /* 18.6 Calculation Chain */\n\n\n  function parse_cc_bin(data, opts) {\n    var out = [];\n    var pass = false;\n    recordhopper(data, function hopper_cc(val, R, RT) {\n      switch (R.n) {\n        case 'BrtCalcChainItem$':\n          out.push(val);\n          break;\n\n        case 'BrtBeginCalcChain$':\n          break;\n\n        case 'BrtEndCalcChain$':\n          break;\n\n        default:\n          if (!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n      }\n    });\n    return out;\n  }\n\n  function write_cc_bin(data, opts) {}\n\n  function parse_comments(zip, dirComments, sheets, sheetRels, opts) {\n    for (var i = 0; i != dirComments.length; ++i) {\n      var canonicalpath = dirComments[i];\n      var comments = parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\\//, ''), true), canonicalpath, opts);\n      if (!comments || !comments.length) continue; // find the sheets targeted by these comments\n\n      var sheetNames = keys(sheets);\n\n      for (var j = 0; j != sheetNames.length; ++j) {\n        var sheetName = sheetNames[j];\n        var rels = sheetRels[sheetName];\n\n        if (rels) {\n          var rel = rels[canonicalpath];\n          if (rel) insertCommentsIntoSheet(sheetName, sheets[sheetName], comments);\n        }\n      }\n    }\n  }\n\n  function insertCommentsIntoSheet(sheetName, sheet, comments) {\n    comments.forEach(function (comment) {\n      var cell = sheet[comment.ref];\n\n      if (!cell) {\n        cell = {};\n        sheet[comment.ref] = cell;\n        var range = safe_decode_range(sheet[\"!ref\"] || \"BDWGO1000001:A1\");\n        var thisCell = decode_cell(comment.ref);\n        if (range.s.r > thisCell.r) range.s.r = thisCell.r;\n        if (range.e.r < thisCell.r) range.e.r = thisCell.r;\n        if (range.s.c > thisCell.c) range.s.c = thisCell.c;\n        if (range.e.c < thisCell.c) range.e.c = thisCell.c;\n        var encoded = encode_range(range);\n        if (encoded !== sheet[\"!ref\"]) sheet[\"!ref\"] = encoded;\n      }\n\n      if (!cell.c) cell.c = [];\n      var o = {\n        a: comment.author,\n        t: comment.t,\n        r: comment.r\n      };\n      if (comment.h) o.h = comment.h;\n      cell.c.push(o);\n    });\n  }\n  /* 18.7.3 CT_Comment */\n\n\n  function parse_comments_xml(data, opts) {\n    if (data.match(/<(?:\\w+:)?comments *\\/>/)) return [];\n    var authors = [];\n    var commentList = [];\n    data.match(/<(?:\\w+:)?authors>([^\\u2603]*)<\\/(?:\\w+:)?authors>/)[1].split(/<\\/\\w*:?author>/).forEach(function (x) {\n      if (x === \"\" || x.trim() === \"\") return;\n      authors.push(x.match(/<(?:\\w+:)?author[^>]*>(.*)/)[1]);\n    });\n    (data.match(/<(?:\\w+:)?commentList>([^\\u2603]*)<\\/(?:\\w+:)?commentList>/) || [\"\", \"\"])[1].split(/<\\/\\w*:?comment>/).forEach(function (x, index) {\n      if (x === \"\" || x.trim() === \"\") return;\n      var y = parsexmltag(x.match(/<(?:\\w+:)?comment[^>]*>/)[0]);\n      var comment = {\n        author: y.authorId && authors[y.authorId] ? authors[y.authorId] : undefined,\n        ref: y.ref,\n        guid: y.guid\n      };\n      var cell = decode_cell(y.ref);\n      if (opts.sheetRows && opts.sheetRows <= cell.r) return;\n      var textMatch = x.match(/<text>([^\\u2603]*)<\\/text>/);\n      if (!textMatch || !textMatch[1]) return; // a comment may contain an empty text tag.\n\n      var rt = parse_si(textMatch[1]);\n      comment.r = rt.r;\n      comment.t = rt.t;\n      if (opts.cellHTML) comment.h = rt.h;\n      commentList.push(comment);\n    });\n    return commentList;\n  }\n\n  function write_comments_xml(data, opts) {}\n  /* [MS-XLSB] 2.4.28 BrtBeginComment */\n\n\n  function parse_BrtBeginComment(data, length) {\n    var out = {};\n    out.iauthor = data.read_shift(4);\n    var rfx = parse_UncheckedRfX(data, 16);\n    out.rfx = rfx.s;\n    out.ref = encode_cell(rfx.s);\n    data.l += 16;\n    /*var guid = parse_GUID(data); */\n\n    return out;\n  }\n  /* [MS-XLSB] 2.4.324 BrtCommentAuthor */\n\n\n  var parse_BrtCommentAuthor = parse_XLWideString;\n  /* [MS-XLSB] 2.4.325 BrtCommentText */\n\n  var parse_BrtCommentText = parse_RichStr;\n  /* [MS-XLSB] 2.1.7.8 Comments */\n\n  function parse_comments_bin(data, opts) {\n    var out = [];\n    var authors = [];\n    var c = {};\n    var pass = false;\n    recordhopper(data, function hopper_cmnt(val, R, RT) {\n      switch (R.n) {\n        case 'BrtCommentAuthor':\n          authors.push(val);\n          break;\n\n        case 'BrtBeginComment':\n          c = val;\n          break;\n\n        case 'BrtCommentText':\n          c.t = val.t;\n          c.h = val.h;\n          c.r = val.r;\n          break;\n\n        case 'BrtEndComment':\n          c.author = authors[c.iauthor];\n          delete c.iauthor;\n          if (opts.sheetRows && opts.sheetRows <= c.rfx.r) break;\n          delete c.rfx;\n          out.push(c);\n          break;\n\n        case 'BrtBeginComments':\n          break;\n\n        case 'BrtEndComments':\n          break;\n\n        case 'BrtBeginCommentAuthors':\n          break;\n\n        case 'BrtEndCommentAuthors':\n          break;\n\n        case 'BrtBeginCommentList':\n          break;\n\n        case 'BrtEndCommentList':\n          break;\n\n        default:\n          if (!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n      }\n    });\n    return out;\n  }\n\n  function write_comments_bin(data, opts) {}\n  /* TODO: it will be useful to parse the function str */\n\n\n  var rc_to_a1 = function () {\n    var rcregex = /(^|[^A-Za-z])R(\\[?)(-?\\d+|)\\]?C(\\[?)(-?\\d+|)\\]?/g;\n    var rcbase;\n\n    function rcfunc($$, $1, $2, $3, $4, $5) {\n      var R = $3.length > 0 ? parseInt($3, 10) | 0 : 0,\n          C = $5.length > 0 ? parseInt($5, 10) | 0 : 0;\n      if (C < 0 && $4.length === 0) C = 0;\n      if ($4.length > 0) C += rcbase.c;\n      if ($2.length > 0) R += rcbase.r;\n      return $1 + encode_col(C) + encode_row(R);\n    }\n\n    return function rc_to_a1(fstr, base) {\n      rcbase = base;\n      return fstr.replace(rcregex, rcfunc);\n    };\n  }();\n  /* --- formula references point to MS-XLS --- */\n\n  /* Small helpers */\n\n\n  function parseread(l) {\n    return function (blob, length) {\n      blob.l += l;\n      return;\n    };\n  }\n\n  function parseread1(blob, length) {\n    blob.l += 1;\n    return;\n  }\n  /* Rgce Helpers */\n\n  /* 2.5.51 */\n\n\n  function parse_ColRelU(blob, length) {\n    var c = blob.read_shift(2);\n    return [c & 0x3FFF, c >> 14 & 1, c >> 15 & 1];\n  }\n  /* 2.5.198.105 */\n\n\n  function parse_RgceArea(blob, length) {\n    var r = blob.read_shift(2),\n        R = blob.read_shift(2);\n    var c = parse_ColRelU(blob, 2);\n    var C = parse_ColRelU(blob, 2);\n    return {\n      s: {\n        r: r,\n        c: c[0],\n        cRel: c[1],\n        rRel: c[2]\n      },\n      e: {\n        r: R,\n        c: C[0],\n        cRel: C[1],\n        rRel: C[2]\n      }\n    };\n  }\n  /* 2.5.198.105 TODO */\n\n\n  function parse_RgceAreaRel(blob, length) {\n    var r = blob.read_shift(2),\n        R = blob.read_shift(2);\n    var c = parse_ColRelU(blob, 2);\n    var C = parse_ColRelU(blob, 2);\n    return {\n      s: {\n        r: r,\n        c: c[0],\n        cRel: c[1],\n        rRel: c[2]\n      },\n      e: {\n        r: R,\n        c: C[0],\n        cRel: C[1],\n        rRel: C[2]\n      }\n    };\n  }\n  /* 2.5.198.109 */\n\n\n  function parse_RgceLoc(blob, length) {\n    var r = blob.read_shift(2);\n    var c = parse_ColRelU(blob, 2);\n    return {\n      r: r,\n      c: c[0],\n      cRel: c[1],\n      rRel: c[2]\n    };\n  }\n  /* 2.5.198.111 */\n\n\n  function parse_RgceLocRel(blob, length) {\n    var r = blob.read_shift(2);\n    var cl = blob.read_shift(2);\n    var cRel = (cl & 0x8000) >> 15,\n        rRel = (cl & 0x4000) >> 14;\n    cl &= 0x3FFF;\n    if (cRel !== 0) while (cl >= 0x100) {\n      cl -= 0x100;\n    }\n    return {\n      r: r,\n      c: cl,\n      cRel: cRel,\n      rRel: rRel\n    };\n  }\n  /* Ptg Tokens */\n\n  /* 2.5.198.27 */\n\n\n  function parse_PtgArea(blob, length) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var area = parse_RgceArea(blob, 8);\n    return [type, area];\n  }\n  /* 2.5.198.28 */\n\n\n  function parse_PtgArea3d(blob, length) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var ixti = blob.read_shift(2);\n    var area = parse_RgceArea(blob, 8);\n    return [type, ixti, area];\n  }\n  /* 2.5.198.29 */\n\n\n  function parse_PtgAreaErr(blob, length) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    blob.l += 8;\n    return [type];\n  }\n  /* 2.5.198.30 */\n\n\n  function parse_PtgAreaErr3d(blob, length) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var ixti = blob.read_shift(2);\n    blob.l += 8;\n    return [type, ixti];\n  }\n  /* 2.5.198.31 */\n\n\n  function parse_PtgAreaN(blob, length) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var area = parse_RgceAreaRel(blob, 8);\n    return [type, area];\n  }\n  /* 2.5.198.32 -- ignore this and look in PtgExtraArray for shape + values */\n\n\n  function parse_PtgArray(blob, length) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    blob.l += 7;\n    return [type];\n  }\n  /* 2.5.198.33 */\n\n\n  function parse_PtgAttrBaxcel(blob, length) {\n    var bitSemi = blob[blob.l + 1] & 0x01;\n    /* 1 = volatile */\n\n    var bitBaxcel = 1;\n    blob.l += 4;\n    return [bitSemi, bitBaxcel];\n  }\n  /* 2.5.198.34 */\n\n\n  function parse_PtgAttrChoose(blob, length) {\n    blob.l += 2;\n    var offset = blob.read_shift(2);\n    var o = [];\n    /* offset is 1 less than the number of elements */\n\n    for (var i = 0; i <= offset; ++i) {\n      o.push(blob.read_shift(2));\n    }\n\n    return o;\n  }\n  /* 2.5.198.35 */\n\n\n  function parse_PtgAttrGoto(blob, length) {\n    var bitGoto = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += 2;\n    return [bitGoto, blob.read_shift(2)];\n  }\n  /* 2.5.198.36 */\n\n\n  function parse_PtgAttrIf(blob, length) {\n    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += 2;\n    return [bitIf, blob.read_shift(2)];\n  }\n  /* 2.5.198.37 */\n\n\n  function parse_PtgAttrSemi(blob, length) {\n    var bitSemi = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += 4;\n    return [bitSemi];\n  }\n  /* 2.5.198.40 (used by PtgAttrSpace and PtgAttrSpaceSemi) */\n\n\n  function parse_PtgAttrSpaceType(blob, length) {\n    var type = blob.read_shift(1),\n        cch = blob.read_shift(1);\n    return [type, cch];\n  }\n  /* 2.5.198.38 */\n\n\n  function parse_PtgAttrSpace(blob, length) {\n    blob.read_shift(2);\n    return parse_PtgAttrSpaceType(blob, 2);\n  }\n  /* 2.5.198.39 */\n\n\n  function parse_PtgAttrSpaceSemi(blob, length) {\n    blob.read_shift(2);\n    return parse_PtgAttrSpaceType(blob, 2);\n  }\n  /* 2.5.198.84 TODO */\n\n\n  function parse_PtgRef(blob, length) {\n    var ptg = blob[blob.l] & 0x1F;\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var loc = parse_RgceLoc(blob, 4);\n    return [type, loc];\n  }\n  /* 2.5.198.88 TODO */\n\n\n  function parse_PtgRefN(blob, length) {\n    var ptg = blob[blob.l] & 0x1F;\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var loc = parse_RgceLocRel(blob, 4);\n    return [type, loc];\n  }\n  /* 2.5.198.85 TODO */\n\n\n  function parse_PtgRef3d(blob, length) {\n    var ptg = blob[blob.l] & 0x1F;\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var ixti = blob.read_shift(2); // XtiIndex\n\n    var loc = parse_RgceLoc(blob, 4);\n    return [type, ixti, loc];\n  }\n  /* 2.5.198.62 TODO */\n\n\n  function parse_PtgFunc(blob, length) {\n    var ptg = blob[blob.l] & 0x1F;\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var iftab = blob.read_shift(2);\n    return [FtabArgc[iftab], Ftab[iftab]];\n  }\n  /* 2.5.198.63 TODO */\n\n\n  function parse_PtgFuncVar(blob, length) {\n    blob.l++;\n    var cparams = blob.read_shift(1),\n        tab = parsetab(blob);\n    return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];\n  }\n\n  function parsetab(blob, length) {\n    return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 0x7FFF];\n  }\n  /* 2.5.198.41 */\n\n\n  var parse_PtgAttrSum = parseread(4);\n  /* 2.5.198.43 */\n\n  var parse_PtgConcat = parseread1;\n  /* 2.5.198.58 */\n\n  function parse_PtgExp(blob, length) {\n    blob.l++;\n    var row = blob.read_shift(2);\n    var col = blob.read_shift(2);\n    return [row, col];\n  }\n  /* 2.5.198.57 */\n\n\n  function parse_PtgErr(blob, length) {\n    blob.l++;\n    return BErr[blob.read_shift(1)];\n  }\n  /* 2.5.198.66 TODO */\n\n\n  function parse_PtgInt(blob, length) {\n    blob.l++;\n    return blob.read_shift(2);\n  }\n  /* 2.5.198.42 */\n\n\n  function parse_PtgBool(blob, length) {\n    blob.l++;\n    return blob.read_shift(1) !== 0;\n  }\n  /* 2.5.198.79 */\n\n\n  function parse_PtgNum(blob, length) {\n    blob.l++;\n    return parse_Xnum(blob, 8);\n  }\n  /* 2.5.198.89 */\n\n\n  function parse_PtgStr(blob, length) {\n    blob.l++;\n    return parse_ShortXLUnicodeString(blob);\n  }\n  /* 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */\n\n\n  function parse_SerAr(blob) {\n    var val = [];\n\n    switch (val[0] = blob.read_shift(1)) {\n      /* 2.5.192.113 */\n      case 0x04:\n        /* SerBool -- boolean */\n        val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';\n        blob.l += 7;\n        break;\n\n      /* 2.5.192.114 */\n\n      case 0x10:\n        /* SerErr -- error */\n        val[1] = BErr[blob[blob.l]];\n        blob.l += 8;\n        break;\n\n      /* 2.5.192.115 */\n\n      case 0x00:\n        /* SerNil -- honestly, I'm not sure how to reproduce this */\n        blob.l += 8;\n        break;\n\n      /* 2.5.192.116 */\n\n      case 0x01:\n        /* SerNum -- Xnum */\n        val[1] = parse_Xnum(blob, 8);\n        break;\n\n      /* 2.5.192.117 */\n\n      case 0x02:\n        /* SerStr -- XLUnicodeString (<256 chars) */\n        val[1] = parse_XLUnicodeString(blob);\n        break;\n      // default: throw \"Bad SerAr: \" + val[0]; /* Unreachable */\n    }\n\n    return val;\n  }\n  /* 2.5.198.61 */\n\n\n  function parse_PtgExtraMem(blob, cce) {\n    var count = blob.read_shift(2);\n    var out = [];\n\n    for (var i = 0; i != count; ++i) {\n      out.push(parse_Ref8U(blob, 8));\n    }\n\n    return out;\n  }\n  /* 2.5.198.59 */\n\n\n  function parse_PtgExtraArray(blob) {\n    var cols = 1 + blob.read_shift(1); //DColByteU\n\n    var rows = 1 + blob.read_shift(2); //DRw\n\n    for (var i = 0, o = []; i != rows && (o[i] = []); ++i) {\n      for (var j = 0; j != cols; ++j) {\n        o[i][j] = parse_SerAr(blob);\n      }\n    }\n\n    return o;\n  }\n  /* 2.5.198.76 */\n\n\n  function parse_PtgName(blob, length) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var nameindex = blob.read_shift(4);\n    return [type, 0, nameindex];\n  }\n  /* 2.5.198.77 */\n\n\n  function parse_PtgNameX(blob, length) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var ixti = blob.read_shift(2); // XtiIndex\n\n    var nameindex = blob.read_shift(4);\n    return [type, ixti, nameindex];\n  }\n  /* 2.5.198.70 */\n\n\n  function parse_PtgMemArea(blob, length) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    blob.l += 4;\n    var cce = blob.read_shift(2);\n    return [type, cce];\n  }\n  /* 2.5.198.72 */\n\n\n  function parse_PtgMemFunc(blob, length) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var cce = blob.read_shift(2);\n    return [type, cce];\n  }\n  /* 2.5.198.86 */\n\n\n  function parse_PtgRefErr(blob, length) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    blob.l += 4;\n    return [type];\n  }\n  /* 2.5.198.26 */\n\n\n  var parse_PtgAdd = parseread1;\n  /* 2.5.198.45 */\n\n  var parse_PtgDiv = parseread1;\n  /* 2.5.198.56 */\n\n  var parse_PtgEq = parseread1;\n  /* 2.5.198.64 */\n\n  var parse_PtgGe = parseread1;\n  /* 2.5.198.65 */\n\n  var parse_PtgGt = parseread1;\n  /* 2.5.198.67 */\n\n  var parse_PtgIsect = parseread1;\n  /* 2.5.198.68 */\n\n  var parse_PtgLe = parseread1;\n  /* 2.5.198.69 */\n\n  var parse_PtgLt = parseread1;\n  /* 2.5.198.74 */\n\n  var parse_PtgMissArg = parseread1;\n  /* 2.5.198.75 */\n\n  var parse_PtgMul = parseread1;\n  /* 2.5.198.78 */\n\n  var parse_PtgNe = parseread1;\n  /* 2.5.198.80 */\n\n  var parse_PtgParen = parseread1;\n  /* 2.5.198.81 */\n\n  var parse_PtgPercent = parseread1;\n  /* 2.5.198.82 */\n\n  var parse_PtgPower = parseread1;\n  /* 2.5.198.83 */\n\n  var parse_PtgRange = parseread1;\n  /* 2.5.198.90 */\n\n  var parse_PtgSub = parseread1;\n  /* 2.5.198.93 */\n\n  var parse_PtgUminus = parseread1;\n  /* 2.5.198.94 */\n\n  var parse_PtgUnion = parseread1;\n  /* 2.5.198.95 */\n\n  var parse_PtgUplus = parseread1;\n  /* 2.5.198.71 */\n\n  var parse_PtgMemErr = parsenoop;\n  /* 2.5.198.73 */\n\n  var parse_PtgMemNoMem = parsenoop;\n  /* 2.5.198.87 */\n\n  var parse_PtgRefErr3d = parsenoop;\n  /* 2.5.198.92 */\n\n  var parse_PtgTbl = parsenoop;\n  /* 2.5.198.25 */\n\n  var PtgTypes = {\n    0x01: {\n      n: 'PtgExp',\n      f: parse_PtgExp\n    },\n    0x02: {\n      n: 'PtgTbl',\n      f: parse_PtgTbl\n    },\n    0x03: {\n      n: 'PtgAdd',\n      f: parse_PtgAdd\n    },\n    0x04: {\n      n: 'PtgSub',\n      f: parse_PtgSub\n    },\n    0x05: {\n      n: 'PtgMul',\n      f: parse_PtgMul\n    },\n    0x06: {\n      n: 'PtgDiv',\n      f: parse_PtgDiv\n    },\n    0x07: {\n      n: 'PtgPower',\n      f: parse_PtgPower\n    },\n    0x08: {\n      n: 'PtgConcat',\n      f: parse_PtgConcat\n    },\n    0x09: {\n      n: 'PtgLt',\n      f: parse_PtgLt\n    },\n    0x0A: {\n      n: 'PtgLe',\n      f: parse_PtgLe\n    },\n    0x0B: {\n      n: 'PtgEq',\n      f: parse_PtgEq\n    },\n    0x0C: {\n      n: 'PtgGe',\n      f: parse_PtgGe\n    },\n    0x0D: {\n      n: 'PtgGt',\n      f: parse_PtgGt\n    },\n    0x0E: {\n      n: 'PtgNe',\n      f: parse_PtgNe\n    },\n    0x0F: {\n      n: 'PtgIsect',\n      f: parse_PtgIsect\n    },\n    0x10: {\n      n: 'PtgUnion',\n      f: parse_PtgUnion\n    },\n    0x11: {\n      n: 'PtgRange',\n      f: parse_PtgRange\n    },\n    0x12: {\n      n: 'PtgUplus',\n      f: parse_PtgUplus\n    },\n    0x13: {\n      n: 'PtgUminus',\n      f: parse_PtgUminus\n    },\n    0x14: {\n      n: 'PtgPercent',\n      f: parse_PtgPercent\n    },\n    0x15: {\n      n: 'PtgParen',\n      f: parse_PtgParen\n    },\n    0x16: {\n      n: 'PtgMissArg',\n      f: parse_PtgMissArg\n    },\n    0x17: {\n      n: 'PtgStr',\n      f: parse_PtgStr\n    },\n    0x1C: {\n      n: 'PtgErr',\n      f: parse_PtgErr\n    },\n    0x1D: {\n      n: 'PtgBool',\n      f: parse_PtgBool\n    },\n    0x1E: {\n      n: 'PtgInt',\n      f: parse_PtgInt\n    },\n    0x1F: {\n      n: 'PtgNum',\n      f: parse_PtgNum\n    },\n    0x20: {\n      n: 'PtgArray',\n      f: parse_PtgArray\n    },\n    0x21: {\n      n: 'PtgFunc',\n      f: parse_PtgFunc\n    },\n    0x22: {\n      n: 'PtgFuncVar',\n      f: parse_PtgFuncVar\n    },\n    0x23: {\n      n: 'PtgName',\n      f: parse_PtgName\n    },\n    0x24: {\n      n: 'PtgRef',\n      f: parse_PtgRef\n    },\n    0x25: {\n      n: 'PtgArea',\n      f: parse_PtgArea\n    },\n    0x26: {\n      n: 'PtgMemArea',\n      f: parse_PtgMemArea\n    },\n    0x27: {\n      n: 'PtgMemErr',\n      f: parse_PtgMemErr\n    },\n    0x28: {\n      n: 'PtgMemNoMem',\n      f: parse_PtgMemNoMem\n    },\n    0x29: {\n      n: 'PtgMemFunc',\n      f: parse_PtgMemFunc\n    },\n    0x2A: {\n      n: 'PtgRefErr',\n      f: parse_PtgRefErr\n    },\n    0x2B: {\n      n: 'PtgAreaErr',\n      f: parse_PtgAreaErr\n    },\n    0x2C: {\n      n: 'PtgRefN',\n      f: parse_PtgRefN\n    },\n    0x2D: {\n      n: 'PtgAreaN',\n      f: parse_PtgAreaN\n    },\n    0x39: {\n      n: 'PtgNameX',\n      f: parse_PtgNameX\n    },\n    0x3A: {\n      n: 'PtgRef3d',\n      f: parse_PtgRef3d\n    },\n    0x3B: {\n      n: 'PtgArea3d',\n      f: parse_PtgArea3d\n    },\n    0x3C: {\n      n: 'PtgRefErr3d',\n      f: parse_PtgRefErr3d\n    },\n    0x3D: {\n      n: 'PtgAreaErr3d',\n      f: parse_PtgAreaErr3d\n    },\n    0xFF: {}\n  };\n  /* These are duplicated in the PtgTypes table */\n\n  var PtgDupes = {\n    0x40: 0x20,\n    0x60: 0x20,\n    0x41: 0x21,\n    0x61: 0x21,\n    0x42: 0x22,\n    0x62: 0x22,\n    0x43: 0x23,\n    0x63: 0x23,\n    0x44: 0x24,\n    0x64: 0x24,\n    0x45: 0x25,\n    0x65: 0x25,\n    0x46: 0x26,\n    0x66: 0x26,\n    0x47: 0x27,\n    0x67: 0x27,\n    0x48: 0x28,\n    0x68: 0x28,\n    0x49: 0x29,\n    0x69: 0x29,\n    0x4A: 0x2A,\n    0x6A: 0x2A,\n    0x4B: 0x2B,\n    0x6B: 0x2B,\n    0x4C: 0x2C,\n    0x6C: 0x2C,\n    0x4D: 0x2D,\n    0x6D: 0x2D,\n    0x59: 0x39,\n    0x79: 0x39,\n    0x5A: 0x3A,\n    0x7A: 0x3A,\n    0x5B: 0x3B,\n    0x7B: 0x3B,\n    0x5C: 0x3C,\n    0x7C: 0x3C,\n    0x5D: 0x3D,\n    0x7D: 0x3D\n  };\n\n  (function () {\n    for (var y in PtgDupes) {\n      PtgTypes[y] = PtgTypes[PtgDupes[y]];\n    }\n  })();\n\n  var Ptg18 = {};\n  var Ptg19 = {\n    0x01: {\n      n: 'PtgAttrSemi',\n      f: parse_PtgAttrSemi\n    },\n    0x02: {\n      n: 'PtgAttrIf',\n      f: parse_PtgAttrIf\n    },\n    0x04: {\n      n: 'PtgAttrChoose',\n      f: parse_PtgAttrChoose\n    },\n    0x08: {\n      n: 'PtgAttrGoto',\n      f: parse_PtgAttrGoto\n    },\n    0x10: {\n      n: 'PtgAttrSum',\n      f: parse_PtgAttrSum\n    },\n    0x20: {\n      n: 'PtgAttrBaxcel',\n      f: parse_PtgAttrBaxcel\n    },\n    0x40: {\n      n: 'PtgAttrSpace',\n      f: parse_PtgAttrSpace\n    },\n    0x41: {\n      n: 'PtgAttrSpaceSemi',\n      f: parse_PtgAttrSpaceSemi\n    },\n    0xFF: {}\n  };\n  /* 2.4.127 TODO */\n\n  function parse_Formula(blob, length, opts) {\n    var cell = parse_XLSCell(blob, 6);\n    var val = parse_FormulaValue(blob, 8);\n    var flags = blob.read_shift(1);\n    blob.read_shift(1);\n    var chn = blob.read_shift(4);\n    var cbf = \"\";\n    if (opts.biff === 5) blob.l += length - 20;else cbf = parse_XLSCellParsedFormula(blob, length - 20, opts);\n    return {\n      cell: cell,\n      val: val[0],\n      formula: cbf,\n      shared: flags >> 3 & 1,\n      tt: val[1]\n    };\n  }\n  /* 2.5.133 TODO: how to emit empty strings? */\n\n\n  function parse_FormulaValue(blob) {\n    var b;\n    if (__readUInt16LE(blob, blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob), 'n'];\n\n    switch (blob[blob.l]) {\n      case 0x00:\n        blob.l += 8;\n        return [\"String\", 's'];\n\n      case 0x01:\n        b = blob[blob.l + 2] === 0x1;\n        blob.l += 8;\n        return [b, 'b'];\n\n      case 0x02:\n        b = blob[blob.l + 2];\n        blob.l += 8;\n        return [b, 'e'];\n\n      case 0x03:\n        blob.l += 8;\n        return [\"\", 's'];\n    }\n  }\n  /* 2.5.198.103 */\n\n\n  function parse_RgbExtra(blob, length, rgce, opts) {\n    if (opts.biff < 8) return parsenoop(blob, length);\n    var target = blob.l + length;\n    var o = [];\n\n    for (var i = 0; i !== rgce.length; ++i) {\n      switch (rgce[i][0]) {\n        case 'PtgArray':\n          /* PtgArray -> PtgExtraArray */\n          rgce[i][1] = parse_PtgExtraArray(blob);\n          o.push(rgce[i][1]);\n          break;\n\n        case 'PtgMemArea':\n          /* PtgMemArea -> PtgExtraMem */\n          rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]);\n          o.push(rgce[i][2]);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    length = target - blob.l;\n    if (length !== 0) o.push(parsenoop(blob, length));\n    return o;\n  }\n  /* 2.5.198.21 */\n\n\n  function parse_NameParsedFormula(blob, length, opts, cce) {\n    var target = blob.l + length;\n    var rgce = parse_Rgce(blob, cce);\n    var rgcb;\n    if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n    return [rgce, rgcb];\n  }\n  /* 2.5.198.3 TODO */\n\n\n  function parse_XLSCellParsedFormula(blob, length, opts) {\n    var target = blob.l + length;\n    var rgcb,\n        cce = blob.read_shift(2); // length of rgce\n\n    if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];\n    var rgce = parse_Rgce(blob, cce);\n    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, length - cce - 2, rgce, opts);\n    return [rgce, rgcb];\n  }\n  /* 2.5.198.118 TODO */\n\n\n  function parse_SharedParsedFormula(blob, length, opts) {\n    var target = blob.l + length;\n    var rgcb,\n        cce = blob.read_shift(2); // length of rgce\n\n    var rgce = parse_Rgce(blob, cce);\n    if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];\n    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n    return [rgce, rgcb];\n  }\n  /* 2.5.198.1 TODO */\n\n\n  function parse_ArrayParsedFormula(blob, length, opts, ref) {\n    var target = blob.l + length;\n    var rgcb,\n        cce = blob.read_shift(2); // length of rgce\n\n    if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];\n    var rgce = parse_Rgce(blob, cce);\n    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n    return [rgce, rgcb];\n  }\n  /* 2.5.198.104 */\n\n\n  function parse_Rgce(blob, length) {\n    var target = blob.l + length;\n    var R,\n        id,\n        ptgs = [];\n\n    while (target != blob.l) {\n      length = target - blob.l;\n      id = blob[blob.l];\n      R = PtgTypes[id]; //console.log(\"ptg\", id, R)\n\n      if (id === 0x18 || id === 0x19) {\n        id = blob[blob.l + 1];\n        R = (id === 0x18 ? Ptg18 : Ptg19)[id];\n      }\n\n      if (!R || !R.f) {\n        ptgs.push(parsenoop(blob, length));\n      } else {\n        ptgs.push([R.n, R.f(blob, length)]);\n      }\n    }\n\n    return ptgs;\n  }\n\n  function mapper(x) {\n    return x.map(function f2(y) {\n      return y[1];\n    }).join(\",\");\n  }\n  /* 2.2.2 + Magic TODO */\n\n\n  function stringify_formula(formula, range, cell, supbooks, opts) {\n    if (opts !== undefined && opts.biff === 5) return \"BIFF5??\";\n\n    var _range = range !== undefined ? range : {\n      s: {\n        c: 0,\n        r: 0\n      }\n    };\n\n    var stack = [],\n        e1,\n        e2,\n        type,\n        c,\n        ixti,\n        nameidx,\n        r;\n    if (!formula[0] || !formula[0][0]) return \"\"; //console.log(\"--\",cell,formula[0])\n\n    for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {\n      var f = formula[0][ff]; //console.log(\"++\",f, stack)\n\n      switch (f[0]) {\n        /* 2.2.2.1 Unary Operator Tokens */\n\n        /* 2.5.198.93 */\n        case 'PtgUminus':\n          stack.push(\"-\" + stack.pop());\n          break;\n\n        /* 2.5.198.95 */\n\n        case 'PtgUplus':\n          stack.push(\"+\" + stack.pop());\n          break;\n\n        /* 2.5.198.81 */\n\n        case 'PtgPercent':\n          stack.push(stack.pop() + \"%\");\n          break;\n\n        /* 2.2.2.1 Binary Value Operator Token */\n\n        /* 2.5.198.26 */\n\n        case 'PtgAdd':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"+\" + e1);\n          break;\n\n        /* 2.5.198.90 */\n\n        case 'PtgSub':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"-\" + e1);\n          break;\n\n        /* 2.5.198.75 */\n\n        case 'PtgMul':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"*\" + e1);\n          break;\n\n        /* 2.5.198.45 */\n\n        case 'PtgDiv':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"/\" + e1);\n          break;\n\n        /* 2.5.198.82 */\n\n        case 'PtgPower':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"^\" + e1);\n          break;\n\n        /* 2.5.198.43 */\n\n        case 'PtgConcat':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"&\" + e1);\n          break;\n\n        /* 2.5.198.69 */\n\n        case 'PtgLt':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"<\" + e1);\n          break;\n\n        /* 2.5.198.68 */\n\n        case 'PtgLe':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"<=\" + e1);\n          break;\n\n        /* 2.5.198.56 */\n\n        case 'PtgEq':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"=\" + e1);\n          break;\n\n        /* 2.5.198.64 */\n\n        case 'PtgGe':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \">=\" + e1);\n          break;\n\n        /* 2.5.198.65 */\n\n        case 'PtgGt':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \">\" + e1);\n          break;\n\n        /* 2.5.198.78 */\n\n        case 'PtgNe':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \"<>\" + e1);\n          break;\n\n        /* 2.2.2.1 Binary Reference Operator Token */\n\n        /* 2.5.198.67 */\n\n        case 'PtgIsect':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \" \" + e1);\n          break;\n\n        case 'PtgUnion':\n          e1 = stack.pop();\n          e2 = stack.pop();\n          stack.push(e2 + \",\" + e1);\n          break;\n\n        case 'PtgRange':\n          break;\n\n        /* 2.2.2.3 Control Tokens \"can be ignored\" */\n\n        /* 2.5.198.34 */\n\n        case 'PtgAttrChoose':\n          break;\n\n        /* 2.5.198.35 */\n\n        case 'PtgAttrGoto':\n          break;\n\n        /* 2.5.198.36 */\n\n        case 'PtgAttrIf':\n          break;\n\n        /* 2.5.198.84 */\n\n        case 'PtgRef':\n          type = f[1][0];\n          c = shift_cell_xls(decode_cell(encode_cell(f[1][1])), _range);\n          stack.push(encode_cell(c));\n          break;\n\n        /* 2.5.198.88 */\n\n        case 'PtgRefN':\n          type = f[1][0];\n          c = shift_cell_xls(decode_cell(encode_cell(f[1][1])), cell);\n          stack.push(encode_cell(c));\n          break;\n\n        case 'PtgRef3d':\n          // TODO: lots of stuff\n          type = f[1][0];\n          ixti = f[1][1];\n          c = shift_cell_xls(f[1][2], _range);\n          stack.push(supbooks[1][ixti + 1] + \"!\" + encode_cell(c));\n          break;\n\n        /* Function Call */\n\n        /* 2.5.198.62 */\n\n        case 'PtgFunc':\n        /* 2.5.198.63 */\n\n        case 'PtgFuncVar':\n          /* f[1] = [argc, func] */\n          var argc = f[1][0],\n              func = f[1][1];\n          if (!argc) argc = 0;\n          var args = stack.slice(-argc);\n          stack.length -= argc;\n          if (func === 'User') func = args.shift();\n          stack.push(func + \"(\" + args.join(\",\") + \")\");\n          break;\n\n        /* 2.5.198.42 */\n\n        case 'PtgBool':\n          stack.push(f[1] ? \"TRUE\" : \"FALSE\");\n          break;\n\n        /* 2.5.198.66 */\n\n        case 'PtgInt':\n          stack.push(f[1]);\n          break;\n\n        /* 2.5.198.79 TODO: precision? */\n\n        case 'PtgNum':\n          stack.push(String(f[1]));\n          break;\n\n        /* 2.5.198.89 */\n\n        case 'PtgStr':\n          stack.push('\"' + f[1] + '\"');\n          break;\n\n        /* 2.5.198.57 */\n\n        case 'PtgErr':\n          stack.push(f[1]);\n          break;\n\n        /* 2.5.198.27 TODO: fixed points */\n\n        case 'PtgArea':\n          type = f[1][0];\n          r = shift_range_xls(f[1][1], _range);\n          stack.push(encode_range(r));\n          break;\n\n        /* 2.5.198.28 */\n\n        case 'PtgArea3d':\n          // TODO: lots of stuff\n          type = f[1][0];\n          ixti = f[1][1];\n          r = f[1][2];\n          stack.push(supbooks[1][ixti + 1] + \"!\" + encode_range(r));\n          break;\n\n        /* 2.5.198.41 */\n\n        case 'PtgAttrSum':\n          stack.push(\"SUM(\" + stack.pop() + \")\");\n          break;\n\n        /* Expression Prefixes */\n\n        /* 2.5.198.37 */\n\n        case 'PtgAttrSemi':\n          break;\n\n        /* 2.5.97.60 TODO: do something different for revisions */\n\n        case 'PtgName':\n          /* f[1] = type, 0, nameindex */\n          nameidx = f[1][2];\n          var lbl = supbooks[0][nameidx];\n          var name = lbl.Name;\n          if (name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];\n          stack.push(name);\n          break;\n\n        /* 2.5.97.61 TODO: do something different for revisions */\n\n        case 'PtgNameX':\n          /* f[1] = type, ixti, nameindex */\n          var bookidx = f[1][1];\n          nameidx = f[1][2];\n          var externbook;\n          /* TODO: Properly handle missing values */\n\n          if (supbooks[bookidx + 1]) externbook = supbooks[bookidx + 1][nameidx];else if (supbooks[bookidx - 1]) externbook = supbooks[bookidx - 1][nameidx];\n          if (!externbook) externbook = {\n            body: \"??NAMEX??\"\n          };\n          stack.push(externbook.body);\n          break;\n\n        /* 2.2.2.4 Display Tokens */\n\n        /* 2.5.198.80 */\n\n        case 'PtgParen':\n          stack.push('(' + stack.pop() + ')');\n          break;\n\n        /* 2.5.198.86 */\n\n        case 'PtgRefErr':\n          stack.push('#REF!');\n          break;\n\n        /* */\n\n        /* 2.5.198.58 TODO */\n\n        case 'PtgExp':\n          c = {\n            c: f[1][1],\n            r: f[1][0]\n          };\n          var q = {\n            c: cell.c,\n            r: cell.r\n          };\n\n          if (supbooks.sharedf[encode_cell(c)]) {\n            var parsedf = supbooks.sharedf[encode_cell(c)];\n            stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));\n          } else {\n            var fnd = false;\n\n            for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {\n              /* TODO: should be something like range_has */\n              e2 = supbooks.arrayf[e1];\n              if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;\n              if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;\n              stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));\n            }\n\n            if (!fnd) stack.push(f[1]);\n          }\n\n          break;\n\n        /* 2.5.198.32 TODO */\n\n        case 'PtgArray':\n          stack.push(\"{\" + f[1].map(mapper).join(\";\") + \"}\");\n          break;\n\n        /* 2.2.2.5 Mem Tokens */\n\n        /* 2.5.198.70 TODO: confirm this is a non-display */\n\n        case 'PtgMemArea':\n          //stack.push(\"(\" + f[2].map(encode_range).join(\",\") + \")\");\n          break;\n\n        /* 2.5.198.38 TODO */\n\n        case 'PtgAttrSpace':\n          break;\n\n        /* 2.5.198.92 TODO */\n\n        case 'PtgTbl':\n          break;\n\n        /* 2.5.198.71 */\n\n        case 'PtgMemErr':\n          break;\n\n        /* 2.5.198.74 */\n\n        case 'PtgMissArg':\n          stack.push(\"\");\n          break;\n\n        /* 2.5.198.29 TODO */\n\n        case 'PtgAreaErr':\n          break;\n\n        /* 2.5.198.31 TODO */\n\n        case 'PtgAreaN':\n          stack.push(\"\");\n          break;\n\n        /* 2.5.198.87 TODO */\n\n        case 'PtgRefErr3d':\n          break;\n\n        /* 2.5.198.72 TODO */\n\n        case 'PtgMemFunc':\n          break;\n\n        default:\n          throw 'Unrecognized Formula Token: ' + f;\n      } //console.log(\"::\",f, stack)\n\n    } //console.log(\"--\",stack);\n\n\n    return stack[0];\n  }\n  /* [MS-XLSB] 2.5.97.4 CellParsedFormula TODO: use similar logic to js-xls */\n\n\n  function parse_XLSBCellParsedFormula(data, length) {\n    var cce = data.read_shift(4);\n    return parsenoop(data, length - 4);\n  }\n  /* [MS-XLS] 2.5.198.44 */\n\n\n  var PtgDataType = {\n    0x1: \"REFERENCE\",\n    // reference to range\n    0x2: \"VALUE\",\n    // single value\n    0x3: \"ARRAY\" // array of values\n\n  };\n  /* [MS-XLS] 2.5.198.4 */\n\n  var Cetab = {\n    0x0000: 'BEEP',\n    0x0001: 'OPEN',\n    0x0002: 'OPEN.LINKS',\n    0x0003: 'CLOSE.ALL',\n    0x0004: 'SAVE',\n    0x0005: 'SAVE.AS',\n    0x0006: 'FILE.DELETE',\n    0x0007: 'PAGE.SETUP',\n    0x0008: 'PRINT',\n    0x0009: 'PRINTER.SETUP',\n    0x000A: 'QUIT',\n    0x000B: 'NEW.WINDOW',\n    0x000C: 'ARRANGE.ALL',\n    0x000D: 'WINDOW.SIZE',\n    0x000E: 'WINDOW.MOVE',\n    0x000F: 'FULL',\n    0x0010: 'CLOSE',\n    0x0011: 'RUN',\n    0x0016: 'SET.PRINT.AREA',\n    0x0017: 'SET.PRINT.TITLES',\n    0x0018: 'SET.PAGE.BREAK',\n    0x0019: 'REMOVE.PAGE.BREAK',\n    0x001A: 'FONT',\n    0x001B: 'DISPLAY',\n    0x001C: 'PROTECT.DOCUMENT',\n    0x001D: 'PRECISION',\n    0x001E: 'A1.R1C1',\n    0x001F: 'CALCULATE.NOW',\n    0x0020: 'CALCULATION',\n    0x0022: 'DATA.FIND',\n    0x0023: 'EXTRACT',\n    0x0024: 'DATA.DELETE',\n    0x0025: 'SET.DATABASE',\n    0x0026: 'SET.CRITERIA',\n    0x0027: 'SORT',\n    0x0028: 'DATA.SERIES',\n    0x0029: 'TABLE',\n    0x002A: 'FORMAT.NUMBER',\n    0x002B: 'ALIGNMENT',\n    0x002C: 'STYLE',\n    0x002D: 'BORDER',\n    0x002E: 'CELL.PROTECTION',\n    0x002F: 'COLUMN.WIDTH',\n    0x0030: 'UNDO',\n    0x0031: 'CUT',\n    0x0032: 'COPY',\n    0x0033: 'PASTE',\n    0x0034: 'CLEAR',\n    0x0035: 'PASTE.SPECIAL',\n    0x0036: 'EDIT.DELETE',\n    0x0037: 'INSERT',\n    0x0038: 'FILL.RIGHT',\n    0x0039: 'FILL.DOWN',\n    0x003D: 'DEFINE.NAME',\n    0x003E: 'CREATE.NAMES',\n    0x003F: 'FORMULA.GOTO',\n    0x0040: 'FORMULA.FIND',\n    0x0041: 'SELECT.LAST.CELL',\n    0x0042: 'SHOW.ACTIVE.CELL',\n    0x0043: 'GALLERY.AREA',\n    0x0044: 'GALLERY.BAR',\n    0x0045: 'GALLERY.COLUMN',\n    0x0046: 'GALLERY.LINE',\n    0x0047: 'GALLERY.PIE',\n    0x0048: 'GALLERY.SCATTER',\n    0x0049: 'COMBINATION',\n    0x004A: 'PREFERRED',\n    0x004B: 'ADD.OVERLAY',\n    0x004C: 'GRIDLINES',\n    0x004D: 'SET.PREFERRED',\n    0x004E: 'AXES',\n    0x004F: 'LEGEND',\n    0x0050: 'ATTACH.TEXT',\n    0x0051: 'ADD.ARROW',\n    0x0052: 'SELECT.CHART',\n    0x0053: 'SELECT.PLOT.AREA',\n    0x0054: 'PATTERNS',\n    0x0055: 'MAIN.CHART',\n    0x0056: 'OVERLAY',\n    0x0057: 'SCALE',\n    0x0058: 'FORMAT.LEGEND',\n    0x0059: 'FORMAT.TEXT',\n    0x005A: 'EDIT.REPEAT',\n    0x005B: 'PARSE',\n    0x005C: 'JUSTIFY',\n    0x005D: 'HIDE',\n    0x005E: 'UNHIDE',\n    0x005F: 'WORKSPACE',\n    0x0060: 'FORMULA',\n    0x0061: 'FORMULA.FILL',\n    0x0062: 'FORMULA.ARRAY',\n    0x0063: 'DATA.FIND.NEXT',\n    0x0064: 'DATA.FIND.PREV',\n    0x0065: 'FORMULA.FIND.NEXT',\n    0x0066: 'FORMULA.FIND.PREV',\n    0x0067: 'ACTIVATE',\n    0x0068: 'ACTIVATE.NEXT',\n    0x0069: 'ACTIVATE.PREV',\n    0x006A: 'UNLOCKED.NEXT',\n    0x006B: 'UNLOCKED.PREV',\n    0x006C: 'COPY.PICTURE',\n    0x006D: 'SELECT',\n    0x006E: 'DELETE.NAME',\n    0x006F: 'DELETE.FORMAT',\n    0x0070: 'VLINE',\n    0x0071: 'HLINE',\n    0x0072: 'VPAGE',\n    0x0073: 'HPAGE',\n    0x0074: 'VSCROLL',\n    0x0075: 'HSCROLL',\n    0x0076: 'ALERT',\n    0x0077: 'NEW',\n    0x0078: 'CANCEL.COPY',\n    0x0079: 'SHOW.CLIPBOARD',\n    0x007A: 'MESSAGE',\n    0x007C: 'PASTE.LINK',\n    0x007D: 'APP.ACTIVATE',\n    0x007E: 'DELETE.ARROW',\n    0x007F: 'ROW.HEIGHT',\n    0x0080: 'FORMAT.MOVE',\n    0x0081: 'FORMAT.SIZE',\n    0x0082: 'FORMULA.REPLACE',\n    0x0083: 'SEND.KEYS',\n    0x0084: 'SELECT.SPECIAL',\n    0x0085: 'APPLY.NAMES',\n    0x0086: 'REPLACE.FONT',\n    0x0087: 'FREEZE.PANES',\n    0x0088: 'SHOW.INFO',\n    0x0089: 'SPLIT',\n    0x008A: 'ON.WINDOW',\n    0x008B: 'ON.DATA',\n    0x008C: 'DISABLE.INPUT',\n    0x008E: 'OUTLINE',\n    0x008F: 'LIST.NAMES',\n    0x0090: 'FILE.CLOSE',\n    0x0091: 'SAVE.WORKBOOK',\n    0x0092: 'DATA.FORM',\n    0x0093: 'COPY.CHART',\n    0x0094: 'ON.TIME',\n    0x0095: 'WAIT',\n    0x0096: 'FORMAT.FONT',\n    0x0097: 'FILL.UP',\n    0x0098: 'FILL.LEFT',\n    0x0099: 'DELETE.OVERLAY',\n    0x009B: 'SHORT.MENUS',\n    0x009F: 'SET.UPDATE.STATUS',\n    0x00A1: 'COLOR.PALETTE',\n    0x00A2: 'DELETE.STYLE',\n    0x00A3: 'WINDOW.RESTORE',\n    0x00A4: 'WINDOW.MAXIMIZE',\n    0x00A6: 'CHANGE.LINK',\n    0x00A7: 'CALCULATE.DOCUMENT',\n    0x00A8: 'ON.KEY',\n    0x00A9: 'APP.RESTORE',\n    0x00AA: 'APP.MOVE',\n    0x00AB: 'APP.SIZE',\n    0x00AC: 'APP.MINIMIZE',\n    0x00AD: 'APP.MAXIMIZE',\n    0x00AE: 'BRING.TO.FRONT',\n    0x00AF: 'SEND.TO.BACK',\n    0x00B9: 'MAIN.CHART.TYPE',\n    0x00BA: 'OVERLAY.CHART.TYPE',\n    0x00BB: 'SELECT.END',\n    0x00BC: 'OPEN.MAIL',\n    0x00BD: 'SEND.MAIL',\n    0x00BE: 'STANDARD.FONT',\n    0x00BF: 'CONSOLIDATE',\n    0x00C0: 'SORT.SPECIAL',\n    0x00C1: 'GALLERY.3D.AREA',\n    0x00C2: 'GALLERY.3D.COLUMN',\n    0x00C3: 'GALLERY.3D.LINE',\n    0x00C4: 'GALLERY.3D.PIE',\n    0x00C5: 'VIEW.3D',\n    0x00C6: 'GOAL.SEEK',\n    0x00C7: 'WORKGROUP',\n    0x00C8: 'FILL.GROUP',\n    0x00C9: 'UPDATE.LINK',\n    0x00CA: 'PROMOTE',\n    0x00CB: 'DEMOTE',\n    0x00CC: 'SHOW.DETAIL',\n    0x00CE: 'UNGROUP',\n    0x00CF: 'OBJECT.PROPERTIES',\n    0x00D0: 'SAVE.NEW.OBJECT',\n    0x00D1: 'SHARE',\n    0x00D2: 'SHARE.NAME',\n    0x00D3: 'DUPLICATE',\n    0x00D4: 'APPLY.STYLE',\n    0x00D5: 'ASSIGN.TO.OBJECT',\n    0x00D6: 'OBJECT.PROTECTION',\n    0x00D7: 'HIDE.OBJECT',\n    0x00D8: 'SET.EXTRACT',\n    0x00D9: 'CREATE.PUBLISHER',\n    0x00DA: 'SUBSCRIBE.TO',\n    0x00DB: 'ATTRIBUTES',\n    0x00DC: 'SHOW.TOOLBAR',\n    0x00DE: 'PRINT.PREVIEW',\n    0x00DF: 'EDIT.COLOR',\n    0x00E0: 'SHOW.LEVELS',\n    0x00E1: 'FORMAT.MAIN',\n    0x00E2: 'FORMAT.OVERLAY',\n    0x00E3: 'ON.RECALC',\n    0x00E4: 'EDIT.SERIES',\n    0x00E5: 'DEFINE.STYLE',\n    0x00F0: 'LINE.PRINT',\n    0x00F3: 'ENTER.DATA',\n    0x00F9: 'GALLERY.RADAR',\n    0x00FA: 'MERGE.STYLES',\n    0x00FB: 'EDITION.OPTIONS',\n    0x00FC: 'PASTE.PICTURE',\n    0x00FD: 'PASTE.PICTURE.LINK',\n    0x00FE: 'SPELLING',\n    0x0100: 'ZOOM',\n    0x0103: 'INSERT.OBJECT',\n    0x0104: 'WINDOW.MINIMIZE',\n    0x0109: 'SOUND.NOTE',\n    0x010A: 'SOUND.PLAY',\n    0x010B: 'FORMAT.SHAPE',\n    0x010C: 'EXTEND.POLYGON',\n    0x010D: 'FORMAT.AUTO',\n    0x0110: 'GALLERY.3D.BAR',\n    0x0111: 'GALLERY.3D.SURFACE',\n    0x0112: 'FILL.AUTO',\n    0x0114: 'CUSTOMIZE.TOOLBAR',\n    0x0115: 'ADD.TOOL',\n    0x0116: 'EDIT.OBJECT',\n    0x0117: 'ON.DOUBLECLICK',\n    0x0118: 'ON.ENTRY',\n    0x0119: 'WORKBOOK.ADD',\n    0x011A: 'WORKBOOK.MOVE',\n    0x011B: 'WORKBOOK.COPY',\n    0x011C: 'WORKBOOK.OPTIONS',\n    0x011D: 'SAVE.WORKSPACE',\n    0x0120: 'CHART.WIZARD',\n    0x0121: 'DELETE.TOOL',\n    0x0122: 'MOVE.TOOL',\n    0x0123: 'WORKBOOK.SELECT',\n    0x0124: 'WORKBOOK.ACTIVATE',\n    0x0125: 'ASSIGN.TO.TOOL',\n    0x0127: 'COPY.TOOL',\n    0x0128: 'RESET.TOOL',\n    0x0129: 'CONSTRAIN.NUMERIC',\n    0x012A: 'PASTE.TOOL',\n    0x012E: 'WORKBOOK.NEW',\n    0x0131: 'SCENARIO.CELLS',\n    0x0132: 'SCENARIO.DELETE',\n    0x0133: 'SCENARIO.ADD',\n    0x0134: 'SCENARIO.EDIT',\n    0x0135: 'SCENARIO.SHOW',\n    0x0136: 'SCENARIO.SHOW.NEXT',\n    0x0137: 'SCENARIO.SUMMARY',\n    0x0138: 'PIVOT.TABLE.WIZARD',\n    0x0139: 'PIVOT.FIELD.PROPERTIES',\n    0x013A: 'PIVOT.FIELD',\n    0x013B: 'PIVOT.ITEM',\n    0x013C: 'PIVOT.ADD.FIELDS',\n    0x013E: 'OPTIONS.CALCULATION',\n    0x013F: 'OPTIONS.EDIT',\n    0x0140: 'OPTIONS.VIEW',\n    0x0141: 'ADDIN.MANAGER',\n    0x0142: 'MENU.EDITOR',\n    0x0143: 'ATTACH.TOOLBARS',\n    0x0144: 'VBAActivate',\n    0x0145: 'OPTIONS.CHART',\n    0x0148: 'VBA.INSERT.FILE',\n    0x014A: 'VBA.PROCEDURE.DEFINITION',\n    0x0150: 'ROUTING.SLIP',\n    0x0152: 'ROUTE.DOCUMENT',\n    0x0153: 'MAIL.LOGON',\n    0x0156: 'INSERT.PICTURE',\n    0x0157: 'EDIT.TOOL',\n    0x0158: 'GALLERY.DOUGHNUT',\n    0x015E: 'CHART.TREND',\n    0x0160: 'PIVOT.ITEM.PROPERTIES',\n    0x0162: 'WORKBOOK.INSERT',\n    0x0163: 'OPTIONS.TRANSITION',\n    0x0164: 'OPTIONS.GENERAL',\n    0x0172: 'FILTER.ADVANCED',\n    0x0175: 'MAIL.ADD.MAILER',\n    0x0176: 'MAIL.DELETE.MAILER',\n    0x0177: 'MAIL.REPLY',\n    0x0178: 'MAIL.REPLY.ALL',\n    0x0179: 'MAIL.FORWARD',\n    0x017A: 'MAIL.NEXT.LETTER',\n    0x017B: 'DATA.LABEL',\n    0x017C: 'INSERT.TITLE',\n    0x017D: 'FONT.PROPERTIES',\n    0x017E: 'MACRO.OPTIONS',\n    0x017F: 'WORKBOOK.HIDE',\n    0x0180: 'WORKBOOK.UNHIDE',\n    0x0181: 'WORKBOOK.DELETE',\n    0x0182: 'WORKBOOK.NAME',\n    0x0184: 'GALLERY.CUSTOM',\n    0x0186: 'ADD.CHART.AUTOFORMAT',\n    0x0187: 'DELETE.CHART.AUTOFORMAT',\n    0x0188: 'CHART.ADD.DATA',\n    0x0189: 'AUTO.OUTLINE',\n    0x018A: 'TAB.ORDER',\n    0x018B: 'SHOW.DIALOG',\n    0x018C: 'SELECT.ALL',\n    0x018D: 'UNGROUP.SHEETS',\n    0x018E: 'SUBTOTAL.CREATE',\n    0x018F: 'SUBTOTAL.REMOVE',\n    0x0190: 'RENAME.OBJECT',\n    0x019C: 'WORKBOOK.SCROLL',\n    0x019D: 'WORKBOOK.NEXT',\n    0x019E: 'WORKBOOK.PREV',\n    0x019F: 'WORKBOOK.TAB.SPLIT',\n    0x01A0: 'FULL.SCREEN',\n    0x01A1: 'WORKBOOK.PROTECT',\n    0x01A4: 'SCROLLBAR.PROPERTIES',\n    0x01A5: 'PIVOT.SHOW.PAGES',\n    0x01A6: 'TEXT.TO.COLUMNS',\n    0x01A7: 'FORMAT.CHARTTYPE',\n    0x01A8: 'LINK.FORMAT',\n    0x01A9: 'TRACER.DISPLAY',\n    0x01AE: 'TRACER.NAVIGATE',\n    0x01AF: 'TRACER.CLEAR',\n    0x01B0: 'TRACER.ERROR',\n    0x01B1: 'PIVOT.FIELD.GROUP',\n    0x01B2: 'PIVOT.FIELD.UNGROUP',\n    0x01B3: 'CHECKBOX.PROPERTIES',\n    0x01B4: 'LABEL.PROPERTIES',\n    0x01B5: 'LISTBOX.PROPERTIES',\n    0x01B6: 'EDITBOX.PROPERTIES',\n    0x01B7: 'PIVOT.REFRESH',\n    0x01B8: 'LINK.COMBO',\n    0x01B9: 'OPEN.TEXT',\n    0x01BA: 'HIDE.DIALOG',\n    0x01BB: 'SET.DIALOG.FOCUS',\n    0x01BC: 'ENABLE.OBJECT',\n    0x01BD: 'PUSHBUTTON.PROPERTIES',\n    0x01BE: 'SET.DIALOG.DEFAULT',\n    0x01BF: 'FILTER',\n    0x01C0: 'FILTER.SHOW.ALL',\n    0x01C1: 'CLEAR.OUTLINE',\n    0x01C2: 'FUNCTION.WIZARD',\n    0x01C3: 'ADD.LIST.ITEM',\n    0x01C4: 'SET.LIST.ITEM',\n    0x01C5: 'REMOVE.LIST.ITEM',\n    0x01C6: 'SELECT.LIST.ITEM',\n    0x01C7: 'SET.CONTROL.VALUE',\n    0x01C8: 'SAVE.COPY.AS',\n    0x01CA: 'OPTIONS.LISTS.ADD',\n    0x01CB: 'OPTIONS.LISTS.DELETE',\n    0x01CC: 'SERIES.AXES',\n    0x01CD: 'SERIES.X',\n    0x01CE: 'SERIES.Y',\n    0x01CF: 'ERRORBAR.X',\n    0x01D0: 'ERRORBAR.Y',\n    0x01D1: 'FORMAT.CHART',\n    0x01D2: 'SERIES.ORDER',\n    0x01D3: 'MAIL.LOGOFF',\n    0x01D4: 'CLEAR.ROUTING.SLIP',\n    0x01D5: 'APP.ACTIVATE.MICROSOFT',\n    0x01D6: 'MAIL.EDIT.MAILER',\n    0x01D7: 'ON.SHEET',\n    0x01D8: 'STANDARD.WIDTH',\n    0x01D9: 'SCENARIO.MERGE',\n    0x01DA: 'SUMMARY.INFO',\n    0x01DB: 'FIND.FILE',\n    0x01DC: 'ACTIVE.CELL.FONT',\n    0x01DD: 'ENABLE.TIPWIZARD',\n    0x01DE: 'VBA.MAKE.ADDIN',\n    0x01E0: 'INSERTDATATABLE',\n    0x01E1: 'WORKGROUP.OPTIONS',\n    0x01E2: 'MAIL.SEND.MAILER',\n    0x01E5: 'AUTOCORRECT',\n    0x01E9: 'POST.DOCUMENT',\n    0x01EB: 'PICKLIST',\n    0x01ED: 'VIEW.SHOW',\n    0x01EE: 'VIEW.DEFINE',\n    0x01EF: 'VIEW.DELETE',\n    0x01FD: 'SHEET.BACKGROUND',\n    0x01FE: 'INSERT.MAP.OBJECT',\n    0x01FF: 'OPTIONS.MENONO',\n    0x0205: 'MSOCHECKS',\n    0x0206: 'NORMAL',\n    0x0207: 'LAYOUT',\n    0x0208: 'RM.PRINT.AREA',\n    0x0209: 'CLEAR.PRINT.AREA',\n    0x020A: 'ADD.PRINT.AREA',\n    0x020B: 'MOVE.BRK',\n    0x0221: 'HIDECURR.NOTE',\n    0x0222: 'HIDEALL.NOTES',\n    0x0223: 'DELETE.NOTE',\n    0x0224: 'TRAVERSE.NOTES',\n    0x0225: 'ACTIVATE.NOTES',\n    0x026C: 'PROTECT.REVISIONS',\n    0x026D: 'UNPROTECT.REVISIONS',\n    0x0287: 'OPTIONS.ME',\n    0x028D: 'WEB.PUBLISH',\n    0x029B: 'NEWWEBQUERY',\n    0x02A1: 'PIVOT.TABLE.CHART',\n    0x02F1: 'OPTIONS.SAVE',\n    0x02F3: 'OPTIONS.SPELL',\n    0x0328: 'HIDEALL.INKANNOTS'\n  };\n  /* [MS-XLS] 2.5.198.17 */\n\n  var Ftab = {\n    0x0000: 'COUNT',\n    0x0001: 'IF',\n    0x0002: 'ISNA',\n    0x0003: 'ISERROR',\n    0x0004: 'SUM',\n    0x0005: 'AVERAGE',\n    0x0006: 'MIN',\n    0x0007: 'MAX',\n    0x0008: 'ROW',\n    0x0009: 'COLUMN',\n    0x000A: 'NA',\n    0x000B: 'NPV',\n    0x000C: 'STDEV',\n    0x000D: 'DOLLAR',\n    0x000E: 'FIXED',\n    0x000F: 'SIN',\n    0x0010: 'COS',\n    0x0011: 'TAN',\n    0x0012: 'ATAN',\n    0x0013: 'PI',\n    0x0014: 'SQRT',\n    0x0015: 'EXP',\n    0x0016: 'LN',\n    0x0017: 'LOG10',\n    0x0018: 'ABS',\n    0x0019: 'INT',\n    0x001A: 'SIGN',\n    0x001B: 'ROUND',\n    0x001C: 'LOOKUP',\n    0x001D: 'INDEX',\n    0x001E: 'REPT',\n    0x001F: 'MID',\n    0x0020: 'LEN',\n    0x0021: 'VALUE',\n    0x0022: 'TRUE',\n    0x0023: 'FALSE',\n    0x0024: 'AND',\n    0x0025: 'OR',\n    0x0026: 'NOT',\n    0x0027: 'MOD',\n    0x0028: 'DCOUNT',\n    0x0029: 'DSUM',\n    0x002A: 'DAVERAGE',\n    0x002B: 'DMIN',\n    0x002C: 'DMAX',\n    0x002D: 'DSTDEV',\n    0x002E: 'VAR',\n    0x002F: 'DVAR',\n    0x0030: 'TEXT',\n    0x0031: 'LINEST',\n    0x0032: 'TREND',\n    0x0033: 'LOGEST',\n    0x0034: 'GROWTH',\n    0x0035: 'GOTO',\n    0x0036: 'HALT',\n    0x0037: 'RETURN',\n    0x0038: 'PV',\n    0x0039: 'FV',\n    0x003A: 'NPER',\n    0x003B: 'PMT',\n    0x003C: 'RATE',\n    0x003D: 'MIRR',\n    0x003E: 'IRR',\n    0x003F: 'RAND',\n    0x0040: 'MATCH',\n    0x0041: 'DATE',\n    0x0042: 'TIME',\n    0x0043: 'DAY',\n    0x0044: 'MONTH',\n    0x0045: 'YEAR',\n    0x0046: 'WEEKDAY',\n    0x0047: 'HOUR',\n    0x0048: 'MINUTE',\n    0x0049: 'SECOND',\n    0x004A: 'NOW',\n    0x004B: 'AREAS',\n    0x004C: 'ROWS',\n    0x004D: 'COLUMNS',\n    0x004E: 'OFFSET',\n    0x004F: 'ABSREF',\n    0x0050: 'RELREF',\n    0x0051: 'ARGUMENT',\n    0x0052: 'SEARCH',\n    0x0053: 'TRANSPOSE',\n    0x0054: 'ERROR',\n    0x0055: 'STEP',\n    0x0056: 'TYPE',\n    0x0057: 'ECHO',\n    0x0058: 'SET.NAME',\n    0x0059: 'CALLER',\n    0x005A: 'DEREF',\n    0x005B: 'WINDOWS',\n    0x005C: 'SERIES',\n    0x005D: 'DOCUMENTS',\n    0x005E: 'ACTIVE.CELL',\n    0x005F: 'SELECTION',\n    0x0060: 'RESULT',\n    0x0061: 'ATAN2',\n    0x0062: 'ASIN',\n    0x0063: 'ACOS',\n    0x0064: 'CHOOSE',\n    0x0065: 'HLOOKUP',\n    0x0066: 'VLOOKUP',\n    0x0067: 'LINKS',\n    0x0068: 'INPUT',\n    0x0069: 'ISREF',\n    0x006A: 'GET.FORMULA',\n    0x006B: 'GET.NAME',\n    0x006C: 'SET.VALUE',\n    0x006D: 'LOG',\n    0x006E: 'EXEC',\n    0x006F: 'CHAR',\n    0x0070: 'LOWER',\n    0x0071: 'UPPER',\n    0x0072: 'PROPER',\n    0x0073: 'LEFT',\n    0x0074: 'RIGHT',\n    0x0075: 'EXACT',\n    0x0076: 'TRIM',\n    0x0077: 'REPLACE',\n    0x0078: 'SUBSTITUTE',\n    0x0079: 'CODE',\n    0x007A: 'NAMES',\n    0x007B: 'DIRECTORY',\n    0x007C: 'FIND',\n    0x007D: 'CELL',\n    0x007E: 'ISERR',\n    0x007F: 'ISTEXT',\n    0x0080: 'ISNUMBER',\n    0x0081: 'ISBLANK',\n    0x0082: 'T',\n    0x0083: 'N',\n    0x0084: 'FOPEN',\n    0x0085: 'FCLOSE',\n    0x0086: 'FSIZE',\n    0x0087: 'FREADLN',\n    0x0088: 'FREAD',\n    0x0089: 'FWRITELN',\n    0x008A: 'FWRITE',\n    0x008B: 'FPOS',\n    0x008C: 'DATEVALUE',\n    0x008D: 'TIMEVALUE',\n    0x008E: 'SLN',\n    0x008F: 'SYD',\n    0x0090: 'DDB',\n    0x0091: 'GET.DEF',\n    0x0092: 'REFTEXT',\n    0x0093: 'TEXTREF',\n    0x0094: 'INDIRECT',\n    0x0095: 'REGISTER',\n    0x0096: 'CALL',\n    0x0097: 'ADD.BAR',\n    0x0098: 'ADD.MENU',\n    0x0099: 'ADD.COMMAND',\n    0x009A: 'ENABLE.COMMAND',\n    0x009B: 'CHECK.COMMAND',\n    0x009C: 'RENAME.COMMAND',\n    0x009D: 'SHOW.BAR',\n    0x009E: 'DELETE.MENU',\n    0x009F: 'DELETE.COMMAND',\n    0x00A0: 'GET.CHART.ITEM',\n    0x00A1: 'DIALOG.BOX',\n    0x00A2: 'CLEAN',\n    0x00A3: 'MDETERM',\n    0x00A4: 'MINVERSE',\n    0x00A5: 'MMULT',\n    0x00A6: 'FILES',\n    0x00A7: 'IPMT',\n    0x00A8: 'PPMT',\n    0x00A9: 'COUNTA',\n    0x00AA: 'CANCEL.KEY',\n    0x00AB: 'FOR',\n    0x00AC: 'WHILE',\n    0x00AD: 'BREAK',\n    0x00AE: 'NEXT',\n    0x00AF: 'INITIATE',\n    0x00B0: 'REQUEST',\n    0x00B1: 'POKE',\n    0x00B2: 'EXECUTE',\n    0x00B3: 'TERMINATE',\n    0x00B4: 'RESTART',\n    0x00B5: 'HELP',\n    0x00B6: 'GET.BAR',\n    0x00B7: 'PRODUCT',\n    0x00B8: 'FACT',\n    0x00B9: 'GET.CELL',\n    0x00BA: 'GET.WORKSPACE',\n    0x00BB: 'GET.WINDOW',\n    0x00BC: 'GET.DOCUMENT',\n    0x00BD: 'DPRODUCT',\n    0x00BE: 'ISNONTEXT',\n    0x00BF: 'GET.NOTE',\n    0x00C0: 'NOTE',\n    0x00C1: 'STDEVP',\n    0x00C2: 'VARP',\n    0x00C3: 'DSTDEVP',\n    0x00C4: 'DVARP',\n    0x00C5: 'TRUNC',\n    0x00C6: 'ISLOGICAL',\n    0x00C7: 'DCOUNTA',\n    0x00C8: 'DELETE.BAR',\n    0x00C9: 'UNREGISTER',\n    0x00CC: 'USDOLLAR',\n    0x00CD: 'FINDB',\n    0x00CE: 'SEARCHB',\n    0x00CF: 'REPLACEB',\n    0x00D0: 'LEFTB',\n    0x00D1: 'RIGHTB',\n    0x00D2: 'MIDB',\n    0x00D3: 'LENB',\n    0x00D4: 'ROUNDUP',\n    0x00D5: 'ROUNDDOWN',\n    0x00D6: 'ASC',\n    0x00D7: 'DBCS',\n    0x00D8: 'RANK',\n    0x00DB: 'ADDRESS',\n    0x00DC: 'DAYS360',\n    0x00DD: 'TODAY',\n    0x00DE: 'VDB',\n    0x00DF: 'ELSE',\n    0x00E0: 'ELSE.IF',\n    0x00E1: 'END.IF',\n    0x00E2: 'FOR.CELL',\n    0x00E3: 'MEDIAN',\n    0x00E4: 'SUMPRODUCT',\n    0x00E5: 'SINH',\n    0x00E6: 'COSH',\n    0x00E7: 'TANH',\n    0x00E8: 'ASINH',\n    0x00E9: 'ACOSH',\n    0x00EA: 'ATANH',\n    0x00EB: 'DGET',\n    0x00EC: 'CREATE.OBJECT',\n    0x00ED: 'VOLATILE',\n    0x00EE: 'LAST.ERROR',\n    0x00EF: 'CUSTOM.UNDO',\n    0x00F0: 'CUSTOM.REPEAT',\n    0x00F1: 'FORMULA.CONVERT',\n    0x00F2: 'GET.LINK.INFO',\n    0x00F3: 'TEXT.BOX',\n    0x00F4: 'INFO',\n    0x00F5: 'GROUP',\n    0x00F6: 'GET.OBJECT',\n    0x00F7: 'DB',\n    0x00F8: 'PAUSE',\n    0x00FB: 'RESUME',\n    0x00FC: 'FREQUENCY',\n    0x00FD: 'ADD.TOOLBAR',\n    0x00FE: 'DELETE.TOOLBAR',\n    0x00FF: 'User',\n    0x0100: 'RESET.TOOLBAR',\n    0x0101: 'EVALUATE',\n    0x0102: 'GET.TOOLBAR',\n    0x0103: 'GET.TOOL',\n    0x0104: 'SPELLING.CHECK',\n    0x0105: 'ERROR.TYPE',\n    0x0106: 'APP.TITLE',\n    0x0107: 'WINDOW.TITLE',\n    0x0108: 'SAVE.TOOLBAR',\n    0x0109: 'ENABLE.TOOL',\n    0x010A: 'PRESS.TOOL',\n    0x010B: 'REGISTER.ID',\n    0x010C: 'GET.WORKBOOK',\n    0x010D: 'AVEDEV',\n    0x010E: 'BETADIST',\n    0x010F: 'GAMMALN',\n    0x0110: 'BETAINV',\n    0x0111: 'BINOMDIST',\n    0x0112: 'CHIDIST',\n    0x0113: 'CHIINV',\n    0x0114: 'COMBIN',\n    0x0115: 'CONFIDENCE',\n    0x0116: 'CRITBINOM',\n    0x0117: 'EVEN',\n    0x0118: 'EXPONDIST',\n    0x0119: 'FDIST',\n    0x011A: 'FINV',\n    0x011B: 'FISHER',\n    0x011C: 'FISHERINV',\n    0x011D: 'FLOOR',\n    0x011E: 'GAMMADIST',\n    0x011F: 'GAMMAINV',\n    0x0120: 'CEILING',\n    0x0121: 'HYPGEOMDIST',\n    0x0122: 'LOGNORMDIST',\n    0x0123: 'LOGINV',\n    0x0124: 'NEGBINOMDIST',\n    0x0125: 'NORMDIST',\n    0x0126: 'NORMSDIST',\n    0x0127: 'NORMINV',\n    0x0128: 'NORMSINV',\n    0x0129: 'STANDARDIZE',\n    0x012A: 'ODD',\n    0x012B: 'PERMUT',\n    0x012C: 'POISSON',\n    0x012D: 'TDIST',\n    0x012E: 'WEIBULL',\n    0x012F: 'SUMXMY2',\n    0x0130: 'SUMX2MY2',\n    0x0131: 'SUMX2PY2',\n    0x0132: 'CHITEST',\n    0x0133: 'CORREL',\n    0x0134: 'COVAR',\n    0x0135: 'FORECAST',\n    0x0136: 'FTEST',\n    0x0137: 'INTERCEPT',\n    0x0138: 'PEARSON',\n    0x0139: 'RSQ',\n    0x013A: 'STEYX',\n    0x013B: 'SLOPE',\n    0x013C: 'TTEST',\n    0x013D: 'PROB',\n    0x013E: 'DEVSQ',\n    0x013F: 'GEOMEAN',\n    0x0140: 'HARMEAN',\n    0x0141: 'SUMSQ',\n    0x0142: 'KURT',\n    0x0143: 'SKEW',\n    0x0144: 'ZTEST',\n    0x0145: 'LARGE',\n    0x0146: 'SMALL',\n    0x0147: 'QUARTILE',\n    0x0148: 'PERCENTILE',\n    0x0149: 'PERCENTRANK',\n    0x014A: 'MODE',\n    0x014B: 'TRIMMEAN',\n    0x014C: 'TINV',\n    0x014E: 'MOVIE.COMMAND',\n    0x014F: 'GET.MOVIE',\n    0x0150: 'CONCATENATE',\n    0x0151: 'POWER',\n    0x0152: 'PIVOT.ADD.DATA',\n    0x0153: 'GET.PIVOT.TABLE',\n    0x0154: 'GET.PIVOT.FIELD',\n    0x0155: 'GET.PIVOT.ITEM',\n    0x0156: 'RADIANS',\n    0x0157: 'DEGREES',\n    0x0158: 'SUBTOTAL',\n    0x0159: 'SUMIF',\n    0x015A: 'COUNTIF',\n    0x015B: 'COUNTBLANK',\n    0x015C: 'SCENARIO.GET',\n    0x015D: 'OPTIONS.LISTS.GET',\n    0x015E: 'ISPMT',\n    0x015F: 'DATEDIF',\n    0x0160: 'DATESTRING',\n    0x0161: 'NUMBERSTRING',\n    0x0162: 'ROMAN',\n    0x0163: 'OPEN.DIALOG',\n    0x0164: 'SAVE.DIALOG',\n    0x0165: 'VIEW.GET',\n    0x0166: 'GETPIVOTDATA',\n    0x0167: 'HYPERLINK',\n    0x0168: 'PHONETIC',\n    0x0169: 'AVERAGEA',\n    0x016A: 'MAXA',\n    0x016B: 'MINA',\n    0x016C: 'STDEVPA',\n    0x016D: 'VARPA',\n    0x016E: 'STDEVA',\n    0x016F: 'VARA',\n    0x0170: 'BAHTTEXT',\n    0x0171: 'THAIDAYOFWEEK',\n    0x0172: 'THAIDIGIT',\n    0x0173: 'THAIMONTHOFYEAR',\n    0x0174: 'THAINUMSOUND',\n    0x0175: 'THAINUMSTRING',\n    0x0176: 'THAISTRINGLENGTH',\n    0x0177: 'ISTHAIDIGIT',\n    0x0178: 'ROUNDBAHTDOWN',\n    0x0179: 'ROUNDBAHTUP',\n    0x017A: 'THAIYEAR',\n    0x017B: 'RTD'\n  };\n  var FtabArgc = {\n    0x0002: 1,\n\n    /* ISNA */\n    0x0003: 1,\n\n    /* ISERROR */\n    0x000F: 1,\n\n    /* SIN */\n    0x0010: 1,\n\n    /* COS */\n    0x0011: 1,\n\n    /* TAN */\n    0x0012: 1,\n\n    /* ATAN */\n    0x0014: 1,\n\n    /* SQRT */\n    0x0015: 1,\n\n    /* EXP */\n    0x0016: 1,\n\n    /* LN */\n    0x0017: 1,\n\n    /* LOG10 */\n    0x0018: 1,\n\n    /* ABS */\n    0x0019: 1,\n\n    /* INT */\n    0x001A: 1,\n\n    /* SIGN */\n    0x001B: 2,\n\n    /* ROUND */\n    0x001E: 2,\n\n    /* REPT */\n    0x001F: 3,\n\n    /* MID */\n    0x0020: 1,\n\n    /* LEN */\n    0x0021: 1,\n\n    /* VALUE */\n    0x0026: 1,\n\n    /* NOT */\n    0x0027: 2,\n\n    /* MOD */\n    0x0028: 3,\n\n    /* DCOUNT */\n    0x0029: 3,\n\n    /* DSUM */\n    0x002A: 3,\n\n    /* DAVERAGE */\n    0x002B: 3,\n\n    /* DMIN */\n    0x002C: 3,\n\n    /* DMAX */\n    0x002D: 3,\n\n    /* DSTDEV */\n    0x002F: 3,\n\n    /* DVAR */\n    0x0030: 2,\n\n    /* TEXT */\n    0x0035: 1,\n\n    /* GOTO */\n    0x003D: 3,\n\n    /* MIRR */\n    0x0041: 3,\n\n    /* DATE */\n    0x0042: 3,\n\n    /* TIME */\n    0x0043: 1,\n\n    /* DAY */\n    0x0044: 1,\n\n    /* MONTH */\n    0x0045: 1,\n\n    /* YEAR */\n    0x0047: 1,\n\n    /* HOUR */\n    0x0048: 1,\n\n    /* MINUTE */\n    0x0049: 1,\n\n    /* SECOND */\n    0x004B: 1,\n\n    /* AREAS */\n    0x004C: 1,\n\n    /* ROWS */\n    0x004D: 1,\n\n    /* COLUMNS */\n    0x004F: 2,\n\n    /* ABSREF */\n    0x0050: 2,\n\n    /* RELREF */\n    0x0053: 1,\n\n    /* TRANSPOSE */\n    0x0056: 1,\n\n    /* TYPE */\n    0x005A: 1,\n\n    /* DEREF */\n    0x0061: 2,\n\n    /* ATAN2 */\n    0x0062: 1,\n\n    /* ASIN */\n    0x0063: 1,\n\n    /* ACOS */\n    0x0069: 1,\n\n    /* ISREF */\n    0x006F: 1,\n\n    /* CHAR */\n    0x0070: 1,\n\n    /* LOWER */\n    0x0071: 1,\n\n    /* UPPER */\n    0x0072: 1,\n\n    /* PROPER */\n    0x0075: 2,\n\n    /* EXACT */\n    0x0076: 1,\n\n    /* TRIM */\n    0x0077: 4,\n\n    /* REPLACE */\n    0x0079: 1,\n\n    /* CODE */\n    0x007E: 1,\n\n    /* ISERR */\n    0x007F: 1,\n\n    /* ISTEXT */\n    0x0080: 1,\n\n    /* ISNUMBER */\n    0x0081: 1,\n\n    /* ISBLANK */\n    0x0082: 1,\n\n    /* T */\n    0x0083: 1,\n\n    /* N */\n    0x0085: 1,\n\n    /* FCLOSE */\n    0x0086: 1,\n\n    /* FSIZE */\n    0x0087: 1,\n\n    /* FREADLN */\n    0x0088: 2,\n\n    /* FREAD */\n    0x0089: 2,\n\n    /* FWRITELN */\n    0x008A: 2,\n\n    /* FWRITE */\n    0x008C: 1,\n\n    /* DATEVALUE */\n    0x008D: 1,\n\n    /* TIMEVALUE */\n    0x008E: 3,\n\n    /* SLN */\n    0x008F: 4,\n\n    /* SYD */\n    0x00A2: 1,\n\n    /* CLEAN */\n    0x00A3: 1,\n\n    /* MDETERM */\n    0x00A4: 1,\n\n    /* MINVERSE */\n    0x00A5: 2,\n\n    /* MMULT */\n    0x00AC: 1,\n\n    /* WHILE */\n    0x00AF: 2,\n\n    /* INITIATE */\n    0x00B0: 2,\n\n    /* REQUEST */\n    0x00B1: 3,\n\n    /* POKE */\n    0x00B2: 2,\n\n    /* EXECUTE */\n    0x00B3: 1,\n\n    /* TERMINATE */\n    0x00B8: 1,\n\n    /* FACT */\n    0x00BD: 3,\n\n    /* DPRODUCT */\n    0x00BE: 1,\n\n    /* ISNONTEXT */\n    0x00C3: 3,\n\n    /* DSTDEVP */\n    0x00C4: 3,\n\n    /* DVARP */\n    0x00C6: 1,\n\n    /* ISLOGICAL */\n    0x00C7: 3,\n\n    /* DCOUNTA */\n    0x00C9: 1,\n\n    /* UNREGISTER */\n    0x00CF: 4,\n\n    /* REPLACEB */\n    0x00D2: 3,\n\n    /* MIDB */\n    0x00D3: 1,\n\n    /* LENB */\n    0x00D4: 2,\n\n    /* ROUNDUP */\n    0x00D5: 2,\n\n    /* ROUNDDOWN */\n    0x00D6: 1,\n\n    /* ASC */\n    0x00D7: 1,\n\n    /* DBCS */\n    0x00E5: 1,\n\n    /* SINH */\n    0x00E6: 1,\n\n    /* COSH */\n    0x00E7: 1,\n\n    /* TANH */\n    0x00E8: 1,\n\n    /* ASINH */\n    0x00E9: 1,\n\n    /* ACOSH */\n    0x00EA: 1,\n\n    /* ATANH */\n    0x00EB: 3,\n\n    /* DGET */\n    0x00F4: 1,\n\n    /* INFO */\n    0x00FC: 2,\n\n    /* FREQUENCY */\n    0x0101: 1,\n\n    /* EVALUATE */\n    0x0105: 1,\n\n    /* ERROR.TYPE */\n    0x010F: 1,\n\n    /* GAMMALN */\n    0x0111: 4,\n\n    /* BINOMDIST */\n    0x0112: 2,\n\n    /* CHIDIST */\n    0x0113: 2,\n\n    /* CHIINV */\n    0x0114: 2,\n\n    /* COMBIN */\n    0x0115: 3,\n\n    /* CONFIDENCE */\n    0x0116: 3,\n\n    /* CRITBINOM */\n    0x0117: 1,\n\n    /* EVEN */\n    0x0118: 3,\n\n    /* EXPONDIST */\n    0x0119: 3,\n\n    /* FDIST */\n    0x011A: 3,\n\n    /* FINV */\n    0x011B: 1,\n\n    /* FISHER */\n    0x011C: 1,\n\n    /* FISHERINV */\n    0x011D: 2,\n\n    /* FLOOR */\n    0x011E: 4,\n\n    /* GAMMADIST */\n    0x011F: 3,\n\n    /* GAMMAINV */\n    0x0120: 2,\n\n    /* CEILING */\n    0x0121: 4,\n\n    /* HYPGEOMDIST */\n    0x0122: 3,\n\n    /* LOGNORMDIST */\n    0x0123: 3,\n\n    /* LOGINV */\n    0x0124: 3,\n\n    /* NEGBINOMDIST */\n    0x0125: 4,\n\n    /* NORMDIST */\n    0x0126: 1,\n\n    /* NORMSDIST */\n    0x0127: 3,\n\n    /* NORMINV */\n    0x0128: 1,\n\n    /* NORMSINV */\n    0x0129: 3,\n\n    /* STANDARDIZE */\n    0x012A: 1,\n\n    /* ODD */\n    0x012B: 2,\n\n    /* PERMUT */\n    0x012C: 3,\n\n    /* POISSON */\n    0x012D: 3,\n\n    /* TDIST */\n    0x012E: 4,\n\n    /* WEIBULL */\n    0x012F: 2,\n\n    /* SUMXMY2 */\n    0x0130: 2,\n\n    /* SUMX2MY2 */\n    0x0131: 2,\n\n    /* SUMX2PY2 */\n    0x0132: 2,\n\n    /* CHITEST */\n    0x0133: 2,\n\n    /* CORREL */\n    0x0134: 2,\n\n    /* COVAR */\n    0x0135: 3,\n\n    /* FORECAST */\n    0x0136: 2,\n\n    /* FTEST */\n    0x0137: 2,\n\n    /* INTERCEPT */\n    0x0138: 2,\n\n    /* PEARSON */\n    0x0139: 2,\n\n    /* RSQ */\n    0x013A: 2,\n\n    /* STEYX */\n    0x013B: 2,\n\n    /* SLOPE */\n    0x013C: 4,\n\n    /* TTEST */\n    0x0145: 2,\n\n    /* LARGE */\n    0x0146: 2,\n\n    /* SMALL */\n    0x0147: 2,\n\n    /* QUARTILE */\n    0x0148: 2,\n\n    /* PERCENTILE */\n    0x014B: 2,\n\n    /* TRIMMEAN */\n    0x014C: 2,\n\n    /* TINV */\n    0x0151: 2,\n\n    /* POWER */\n    0x0156: 1,\n\n    /* RADIANS */\n    0x0157: 1,\n\n    /* DEGREES */\n    0x015A: 2,\n\n    /* COUNTIF */\n    0x015B: 1,\n\n    /* COUNTBLANK */\n    0x015E: 4,\n\n    /* ISPMT */\n    0x015F: 3,\n\n    /* DATEDIF */\n    0x0160: 1,\n\n    /* DATESTRING */\n    0x0161: 2,\n\n    /* NUMBERSTRING */\n    0x0168: 1,\n\n    /* PHONETIC */\n    0x0170: 1,\n\n    /* BAHTTEXT */\n    0x0171: 1,\n\n    /* THAIDAYOFWEEK */\n    0x0172: 1,\n\n    /* THAIDIGIT */\n    0x0173: 1,\n\n    /* THAIMONTHOFYEAR */\n    0x0174: 1,\n\n    /* THAINUMSOUND */\n    0x0175: 1,\n\n    /* THAINUMSTRING */\n    0x0176: 1,\n\n    /* THAISTRINGLENGTH */\n    0x0177: 1,\n\n    /* ISTHAIDIGIT */\n    0x0178: 1,\n\n    /* ROUNDBAHTDOWN */\n    0x0179: 1,\n\n    /* ROUNDBAHTUP */\n    0x017A: 1,\n\n    /* THAIYEAR */\n    0xFFFF: 0\n  };\n  /* [MS-XLSX] 2.2.3 Functions */\n\n  var XLSXFutureFunctions = {\n    \"_xlfn.ACOT\": \"ACOT\",\n    \"_xlfn.ACOTH\": \"ACOTH\",\n    \"_xlfn.AGGREGATE\": \"AGGREGATE\",\n    \"_xlfn.ARABIC\": \"ARABIC\",\n    \"_xlfn.AVERAGEIF\": \"AVERAGEIF\",\n    \"_xlfn.AVERAGEIFS\": \"AVERAGEIFS\",\n    \"_xlfn.BASE\": \"BASE\",\n    \"_xlfn.BETA.DIST\": \"BETA.DIST\",\n    \"_xlfn.BETA.INV\": \"BETA.INV\",\n    \"_xlfn.BINOM.DIST\": \"BINOM.DIST\",\n    \"_xlfn.BINOM.DIST.RANGE\": \"BINOM.DIST.RANGE\",\n    \"_xlfn.BINOM.INV\": \"BINOM.INV\",\n    \"_xlfn.BITAND\": \"BITAND\",\n    \"_xlfn.BITLSHIFT\": \"BITLSHIFT\",\n    \"_xlfn.BITOR\": \"BITOR\",\n    \"_xlfn.BITRSHIFT\": \"BITRSHIFT\",\n    \"_xlfn.BITXOR\": \"BITXOR\",\n    \"_xlfn.CEILING.MATH\": \"CEILING.MATH\",\n    \"_xlfn.CEILING.PRECISE\": \"CEILING.PRECISE\",\n    \"_xlfn.CHISQ.DIST\": \"CHISQ.DIST\",\n    \"_xlfn.CHISQ.DIST.RT\": \"CHISQ.DIST.RT\",\n    \"_xlfn.CHISQ.INV\": \"CHISQ.INV\",\n    \"_xlfn.CHISQ.INV.RT\": \"CHISQ.INV.RT\",\n    \"_xlfn.CHISQ.TEST\": \"CHISQ.TEST\",\n    \"_xlfn.COMBINA\": \"COMBINA\",\n    \"_xlfn.CONFIDENCE.NORM\": \"CONFIDENCE.NORM\",\n    \"_xlfn.CONFIDENCE.T\": \"CONFIDENCE.T\",\n    \"_xlfn.COT\": \"COT\",\n    \"_xlfn.COTH\": \"COTH\",\n    \"_xlfn.COUNTIFS\": \"COUNTIFS\",\n    \"_xlfn.COVARIANCE.P\": \"COVARIANCE.P\",\n    \"_xlfn.COVARIANCE.S\": \"COVARIANCE.S\",\n    \"_xlfn.CSC\": \"CSC\",\n    \"_xlfn.CSCH\": \"CSCH\",\n    \"_xlfn.DAYS\": \"DAYS\",\n    \"_xlfn.DECIMAL\": \"DECIMAL\",\n    \"_xlfn.ECMA.CEILING\": \"ECMA.CEILING\",\n    \"_xlfn.ERF.PRECISE\": \"ERF.PRECISE\",\n    \"_xlfn.ERFC.PRECISE\": \"ERFC.PRECISE\",\n    \"_xlfn.EXPON.DIST\": \"EXPON.DIST\",\n    \"_xlfn.F.DIST\": \"F.DIST\",\n    \"_xlfn.F.DIST.RT\": \"F.DIST.RT\",\n    \"_xlfn.F.INV\": \"F.INV\",\n    \"_xlfn.F.INV.RT\": \"F.INV.RT\",\n    \"_xlfn.F.TEST\": \"F.TEST\",\n    \"_xlfn.FILTERXML\": \"FILTERXML\",\n    \"_xlfn.FLOOR.MATH\": \"FLOOR.MATH\",\n    \"_xlfn.FLOOR.PRECISE\": \"FLOOR.PRECISE\",\n    \"_xlfn.FORMULATEXT\": \"FORMULATEXT\",\n    \"_xlfn.GAMMA\": \"GAMMA\",\n    \"_xlfn.GAMMA.DIST\": \"GAMMA.DIST\",\n    \"_xlfn.GAMMA.INV\": \"GAMMA.INV\",\n    \"_xlfn.GAMMALN.PRECISE\": \"GAMMALN.PRECISE\",\n    \"_xlfn.GAUSS\": \"GAUSS\",\n    \"_xlfn.HYPGEOM.DIST\": \"HYPGEOM.DIST\",\n    \"_xlfn.IFNA\": \"IFNA\",\n    \"_xlfn.IFERROR\": \"IFERROR\",\n    \"_xlfn.IMCOSH\": \"IMCOSH\",\n    \"_xlfn.IMCOT\": \"IMCOT\",\n    \"_xlfn.IMCSC\": \"IMCSC\",\n    \"_xlfn.IMCSCH\": \"IMCSCH\",\n    \"_xlfn.IMSEC\": \"IMSEC\",\n    \"_xlfn.IMSECH\": \"IMSECH\",\n    \"_xlfn.IMSINH\": \"IMSINH\",\n    \"_xlfn.IMTAN\": \"IMTAN\",\n    \"_xlfn.ISFORMULA\": \"ISFORMULA\",\n    \"_xlfn.ISO.CEILING\": \"ISO.CEILING\",\n    \"_xlfn.ISOWEEKNUM\": \"ISOWEEKNUM\",\n    \"_xlfn.LOGNORM.DIST\": \"LOGNORM.DIST\",\n    \"_xlfn.LOGNORM.INV\": \"LOGNORM.INV\",\n    \"_xlfn.MODE.MULT\": \"MODE.MULT\",\n    \"_xlfn.MODE.SNGL\": \"MODE.SNGL\",\n    \"_xlfn.MUNIT\": \"MUNIT\",\n    \"_xlfn.NEGBINOM.DIST\": \"NEGBINOM.DIST\",\n    \"_xlfn.NETWORKDAYS.INTL\": \"NETWORKDAYS.INTL\",\n    \"_xlfn.NIGBINOM\": \"NIGBINOM\",\n    \"_xlfn.NORM.DIST\": \"NORM.DIST\",\n    \"_xlfn.NORM.INV\": \"NORM.INV\",\n    \"_xlfn.NORM.S.DIST\": \"NORM.S.DIST\",\n    \"_xlfn.NORM.S.INV\": \"NORM.S.INV\",\n    \"_xlfn.NUMBERVALUE\": \"NUMBERVALUE\",\n    \"_xlfn.PDURATION\": \"PDURATION\",\n    \"_xlfn.PERCENTILE.EXC\": \"PERCENTILE.EXC\",\n    \"_xlfn.PERCENTILE.INC\": \"PERCENTILE.INC\",\n    \"_xlfn.PERCENTRANK.EXC\": \"PERCENTRANK.EXC\",\n    \"_xlfn.PERCENTRANK.INC\": \"PERCENTRANK.INC\",\n    \"_xlfn.PERMUTATIONA\": \"PERMUTATIONA\",\n    \"_xlfn.PHI\": \"PHI\",\n    \"_xlfn.POISSON.DIST\": \"POISSON.DIST\",\n    \"_xlfn.QUARTILE.EXC\": \"QUARTILE.EXC\",\n    \"_xlfn.QUARTILE.INC\": \"QUARTILE.INC\",\n    \"_xlfn.QUERYSTRING\": \"QUERYSTRING\",\n    \"_xlfn.RANK.AVG\": \"RANK.AVG\",\n    \"_xlfn.RANK.EQ\": \"RANK.EQ\",\n    \"_xlfn.RRI\": \"RRI\",\n    \"_xlfn.SEC\": \"SEC\",\n    \"_xlfn.SECH\": \"SECH\",\n    \"_xlfn.SHEET\": \"SHEET\",\n    \"_xlfn.SHEETS\": \"SHEETS\",\n    \"_xlfn.SKEW.P\": \"SKEW.P\",\n    \"_xlfn.STDEV.P\": \"STDEV.P\",\n    \"_xlfn.STDEV.S\": \"STDEV.S\",\n    \"_xlfn.SUMIFS\": \"SUMIFS\",\n    \"_xlfn.T.DIST\": \"T.DIST\",\n    \"_xlfn.T.DIST.2T\": \"T.DIST.2T\",\n    \"_xlfn.T.DIST.RT\": \"T.DIST.RT\",\n    \"_xlfn.T.INV\": \"T.INV\",\n    \"_xlfn.T.INV.2T\": \"T.INV.2T\",\n    \"_xlfn.T.TEST\": \"T.TEST\",\n    \"_xlfn.UNICHAR\": \"UNICHAR\",\n    \"_xlfn.UNICODE\": \"UNICODE\",\n    \"_xlfn.VAR.P\": \"VAR.P\",\n    \"_xlfn.VAR.S\": \"VAR.S\",\n    \"_xlfn.WEBSERVICE\": \"WEBSERVICE\",\n    \"_xlfn.WEIBULL.DIST\": \"WEIBULL.DIST\",\n    \"_xlfn.WORKDAY.INTL\": \"WORKDAY.INTL\",\n    \"_xlfn.XOR\": \"XOR\",\n    \"_xlfn.Z.TEST\": \"Z.TEST\"\n  };\n  var strs = {}; // shared strings\n\n  var _ssfopts = {}; // spreadsheet formatting options\n\n  RELS.WS = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\";\n\n  function get_sst_id(sst, str) {\n    for (var i = 0, len = sst.length; i < len; ++i) {\n      if (sst[i].t === str) {\n        sst.Count++;\n        return i;\n      }\n    }\n\n    sst[len] = {\n      t: str\n    };\n    sst.Count++;\n    sst.Unique++;\n    return len;\n  }\n\n  function get_cell_style(styles, cell, opts) {\n    if (typeof style_builder != 'undefined') {\n      if (/^\\d+$/.exec(cell.s)) {\n        return cell.s;\n      } // if its already an integer index, let it be\n\n\n      if (cell.s && cell.s == +cell.s) {\n        return cell.s;\n      } // if its already an integer index, let it be\n\n\n      var s = cell.s || {};\n      if (cell.z) s.numFmt = cell.z;\n      return style_builder.addStyle(s);\n    } else {\n      var z = opts.revssf[cell.z != null ? cell.z : \"General\"];\n\n      for (var i = 0, len = styles.length; i != len; ++i) {\n        if (styles[i].numFmtId === z) return i;\n      }\n\n      styles[len] = {\n        numFmtId: z,\n        fontId: 0,\n        fillId: 0,\n        borderId: 0,\n        xfId: 0,\n        applyNumberFormat: 1\n      };\n      return len;\n    }\n  }\n\n  function get_cell_style_csf(cellXf) {\n    if (cellXf) {\n      var s = {};\n\n      if (typeof cellXf.numFmtId != undefined) {\n        s.numFmt = SSF._table[cellXf.numFmtId];\n      }\n\n      if (cellXf.fillId) {\n        s.fill = styles.Fills[cellXf.fillId];\n      }\n\n      if (cellXf.fontId) {\n        s.font = styles.Fonts[cellXf.fontId];\n      }\n\n      if (cellXf.borderId) {\n        s.border = styles.Borders[cellXf.borderId];\n      }\n\n      if (cellXf.applyAlignment == 1) {\n        s.alignment = cellXf.alignment;\n      }\n\n      return JSON.parse(JSON.stringify(s));\n    }\n\n    return null;\n  }\n\n  function safe_format(p, fmtid, fillid, opts) {\n    try {\n      if (p.t === 'e') p.w = p.w || BErr[p.v];else if (fmtid === 0) {\n        if (p.t === 'n') {\n          if ((p.v | 0) === p.v) p.w = SSF._general_int(p.v, _ssfopts);else p.w = SSF._general_num(p.v, _ssfopts);\n        } else if (p.t === 'd') {\n          var dd = datenum(p.v);\n          if ((dd | 0) === dd) p.w = SSF._general_int(dd, _ssfopts);else p.w = SSF._general_num(dd, _ssfopts);\n        } else if (p.v === undefined) return \"\";else p.w = SSF._general(p.v, _ssfopts);\n      } else if (p.t === 'd') p.w = SSF.format(fmtid, datenum(p.v), _ssfopts);else p.w = SSF.format(fmtid, p.v, _ssfopts);\n      if (opts.cellNF) p.z = SSF._table[fmtid];\n    } catch (e) {\n      if (opts.WTF) throw e;\n    }\n  }\n\n  function parse_ws_xml_dim(ws, s) {\n    var d = safe_decode_range(s);\n    if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws[\"!ref\"] = encode_range(d);\n  }\n\n  var mergecregex = /<mergeCell ref=\"[A-Z0-9:]+\"\\s*\\/>/g;\n  var sheetdataregex = /<(?:\\w+:)?sheetData>([^\\u2603]*)<\\/(?:\\w+:)?sheetData>/;\n  var hlinkregex = /<hyperlink[^>]*\\/>/g;\n  var dimregex = /\"(\\w*:\\w*)\"/;\n  var colregex = /<col[^>]*\\/>/g;\n  /* 18.3 Worksheets */\n\n  function parse_ws_xml(data, opts, rels) {\n    if (!data) return data;\n    /* 18.3.1.99 worksheet CT_Worksheet */\n\n    var s = {};\n    /* 18.3.1.35 dimension CT_SheetDimension ? */\n\n    var ridx = data.indexOf(\"<dimension\");\n\n    if (ridx > 0) {\n      var ref = data.substr(ridx, 50).match(dimregex);\n      if (ref != null) parse_ws_xml_dim(s, ref[1]);\n    }\n    /* 18.3.1.55 mergeCells CT_MergeCells */\n\n\n    var mergecells = [];\n\n    if (data.indexOf(\"</mergeCells>\") !== -1) {\n      var merges = data.match(mergecregex);\n\n      for (ridx = 0; ridx != merges.length; ++ridx) {\n        mergecells[ridx] = safe_decode_range(merges[ridx].substr(merges[ridx].indexOf(\"\\\"\") + 1));\n      }\n    }\n    /* 18.3.1.17 cols CT_Cols */\n\n\n    var columns = [];\n\n    if (opts.cellStyles && data.indexOf(\"</cols>\") !== -1) {\n      /* 18.3.1.13 col CT_Col */\n      var cols = data.match(colregex);\n      parse_ws_xml_cols(columns, cols);\n    }\n\n    var refguess = {\n      s: {\n        r: 1000000,\n        c: 1000000\n      },\n      e: {\n        r: 0,\n        c: 0\n      }\n    };\n    /* 18.3.1.80 sheetData CT_SheetData ? */\n\n    var mtch = data.match(sheetdataregex);\n    if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess);\n    /* 18.3.1.48 hyperlinks CT_Hyperlinks */\n\n    if (data.indexOf(\"</hyperlinks>\") !== -1) parse_ws_xml_hlinks(s, data.match(hlinkregex), rels);\n    if (!s[\"!ref\"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s[\"!ref\"] = encode_range(refguess);\n\n    if (opts.sheetRows > 0 && s[\"!ref\"]) {\n      var tmpref = safe_decode_range(s[\"!ref\"]);\n\n      if (opts.sheetRows < +tmpref.e.r) {\n        tmpref.e.r = opts.sheetRows - 1;\n        if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n        if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n        if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n        if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n        s[\"!fullref\"] = s[\"!ref\"];\n        s[\"!ref\"] = encode_range(tmpref);\n      }\n    }\n\n    if (mergecells.length > 0) s[\"!merges\"] = mergecells;\n    if (columns.length > 0) s[\"!cols\"] = columns;\n    return s;\n  }\n\n  function write_ws_xml_merges(merges) {\n    if (merges.length == 0) return \"\";\n    var o = '<mergeCells count=\"' + merges.length + '\">';\n\n    for (var i = 0; i != merges.length; ++i) {\n      o += '<mergeCell ref=\"' + encode_range(merges[i]) + '\"/>';\n    }\n\n    return o + '</mergeCells>';\n  }\n\n  function write_ws_xml_pagesetup(setup) {\n    var pageSetup = writextag('pageSetup', null, {\n      scale: setup.scale || '100',\n      orientation: setup.orientation || 'portrait',\n      horizontalDpi: setup.horizontalDpi || '4294967292',\n      verticalDpi: setup.verticalDpi || '4294967292'\n    });\n    return pageSetup;\n  }\n\n  function parse_ws_xml_hlinks(s, data, rels) {\n    for (var i = 0; i != data.length; ++i) {\n      var val = parsexmltag(data[i], true);\n      if (!val.ref) return;\n      var rel = rels ? rels['!id'][val.id] : null;\n\n      if (rel) {\n        val.Target = rel.Target;\n        if (val.location) val.Target += \"#\" + val.location;\n        val.Rel = rel;\n      } else {\n        val.Target = val.location;\n        rel = {\n          Target: val.location,\n          TargetMode: 'Internal'\n        };\n        val.Rel = rel;\n      }\n\n      var rng = safe_decode_range(val.ref);\n\n      for (var R = rng.s.r; R <= rng.e.r; ++R) {\n        for (var C = rng.s.c; C <= rng.e.c; ++C) {\n          var addr = encode_cell({\n            c: C,\n            r: R\n          });\n          if (!s[addr]) s[addr] = {\n            t: \"stub\",\n            v: undefined\n          };\n          s[addr].l = val;\n        }\n      }\n    }\n  }\n\n  function parse_ws_xml_cols(columns, cols) {\n    var seencol = false;\n\n    for (var coli = 0; coli != cols.length; ++coli) {\n      var coll = parsexmltag(cols[coli], true);\n      var colm = parseInt(coll.min, 10) - 1,\n          colM = parseInt(coll.max, 10) - 1;\n      delete coll.min;\n      delete coll.max;\n\n      if (!seencol && coll.width) {\n        seencol = true;\n        find_mdw(+coll.width, coll);\n      }\n\n      if (coll.width) {\n        coll.wpx = width2px(+coll.width);\n        coll.wch = px2char(coll.wpx);\n        coll.MDW = MDW;\n      }\n\n      while (colm <= colM) {\n        columns[colm++] = coll;\n      }\n    }\n  }\n\n  function write_ws_xml_cols(ws, cols) {\n    var o = [\"<cols>\"],\n        col,\n        width;\n\n    for (var i = 0; i != cols.length; ++i) {\n      if (!(col = cols[i])) continue;\n      var p = {\n        min: i + 1,\n        max: i + 1\n      };\n      /* wch (chars), wpx (pixels) */\n\n      width = -1;\n      if (col.wpx) width = px2char(col.wpx);else if (col.wch) width = col.wch;\n\n      if (width > -1) {\n        p.width = char2width(width);\n        p.customWidth = 1;\n      }\n\n      o[o.length] = writextag('col', null, p);\n    }\n\n    o[o.length] = \"</cols>\";\n    return o.join(\"\");\n  }\n\n  function write_ws_xml_cell(cell, ref, ws, opts, idx, wb) {\n    if (cell.v === undefined && cell.s === undefined) return \"\";\n    var vv = \"\";\n    var oldt = cell.t,\n        oldv = cell.v;\n\n    switch (cell.t) {\n      case 'b':\n        vv = cell.v ? \"1\" : \"0\";\n        break;\n\n      case 'n':\n        vv = '' + cell.v;\n        break;\n\n      case 'e':\n        vv = BErr[cell.v];\n        break;\n\n      case 'd':\n        if (opts.cellDates) vv = new Date(cell.v).toISOString();else {\n          cell.t = 'n';\n          vv = '' + (cell.v = datenum(cell.v));\n          if (typeof cell.z === 'undefined') cell.z = SSF._table[14];\n        }\n        break;\n\n      default:\n        vv = cell.v;\n        break;\n    }\n\n    var v = writetag('v', escapexml(vv)),\n        o = {\n      r: ref\n    };\n    /* TODO: cell style */\n\n    var os = get_cell_style(opts.cellXfs, cell, opts);\n    if (os !== 0) o.s = os;\n\n    switch (cell.t) {\n      case 'n':\n        break;\n\n      case 'd':\n        o.t = \"d\";\n        break;\n\n      case 'b':\n        o.t = \"b\";\n        break;\n\n      case 'e':\n        o.t = \"e\";\n        break;\n\n      default:\n        if (opts.bookSST) {\n          v = writetag('v', '' + get_sst_id(opts.Strings, cell.v));\n          o.t = \"s\";\n          break;\n        }\n\n        o.t = \"str\";\n        break;\n    }\n\n    if (cell.t != oldt) {\n      cell.t = oldt;\n      cell.v = oldv;\n    }\n\n    return writextag('c', v, o);\n  }\n\n  var parse_ws_xml_data = function parse_ws_xml_data_factory() {\n    var cellregex = /<(?:\\w+:)?c[ >]/,\n        rowregex = /<\\/(?:\\w+:)?row>/;\n    var rregex = /r=[\"']([^\"']*)[\"']/,\n        isregex = /<is>([\\S\\s]*?)<\\/is>/;\n    var match_v = matchtag(\"v\"),\n        match_f = matchtag(\"f\");\n    return function parse_ws_xml_data(sdata, s, opts, guess) {\n      var ri = 0,\n          x = \"\",\n          cells = [],\n          cref = [],\n          idx = 0,\n          i = 0,\n          cc = 0,\n          d = \"\",\n          p;\n      var tag,\n          tagr = 0,\n          tagc = 0;\n      var sstr;\n      var fmtid = 0,\n          fillid = 0,\n          do_format = Array.isArray(styles.CellXf),\n          cf;\n\n      for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {\n        x = marr[mt].trim();\n        var xlen = x.length;\n        if (xlen === 0) continue;\n        /* 18.3.1.73 row CT_Row */\n\n        for (ri = 0; ri < xlen; ++ri) {\n          if (x.charCodeAt(ri) === 62) break;\n        }\n\n        ++ri;\n        tag = parsexmltag(x.substr(0, ri), true);\n        /* SpreadSheetGear uses implicit r/c */\n\n        tagr = typeof tag.r !== 'undefined' ? parseInt(tag.r, 10) : tagr + 1;\n        tagc = -1;\n        if (opts.sheetRows && opts.sheetRows < tagr) continue;\n        if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;\n        if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;\n        /* 18.3.1.4 c CT_Cell */\n\n        cells = x.substr(ri).split(cellregex);\n\n        for (ri = typeof tag.r === 'undefined' ? 0 : 1; ri != cells.length; ++ri) {\n          x = cells[ri].trim();\n          if (x.length === 0) continue;\n          cref = x.match(rregex);\n          idx = ri;\n          i = 0;\n          cc = 0;\n          x = \"<c \" + (x.substr(0, 1) == \"<\" ? \">\" : \"\") + x;\n\n          if (cref !== null && cref.length === 2) {\n            idx = 0;\n            d = cref[1];\n\n            for (i = 0; i != d.length; ++i) {\n              if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;\n              idx = 26 * idx + cc;\n            }\n\n            --idx;\n            tagc = idx;\n          } else ++tagc;\n\n          for (i = 0; i != x.length; ++i) {\n            if (x.charCodeAt(i) === 62) break;\n          }\n\n          ++i;\n          tag = parsexmltag(x.substr(0, i), true);\n          if (!tag.r) tag.r = utils.encode_cell({\n            r: tagr - 1,\n            c: tagc\n          });\n          d = x.substr(i);\n          p = {\n            t: \"\"\n          };\n          if ((cref = d.match(match_v)) !== null && cref[1] !== '') p.v = unescapexml(cref[1]);\n          if (opts.cellFormula && (cref = d.match(match_f)) !== null) p.f = unescapexml(cref[1]);\n          /* SCHEMA IS ACTUALLY INCORRECT HERE.  IF A CELL HAS NO T, EMIT \"\" */\n\n          if (tag.t === undefined && tag.s === undefined && p.v === undefined) {\n            if (!opts.sheetStubs) continue;\n            p.t = \"stub\";\n          } else p.t = tag.t || \"n\";\n\n          if (guess.s.c > idx) guess.s.c = idx;\n          if (guess.e.c < idx) guess.e.c = idx;\n          /* 18.18.11 t ST_CellType */\n\n          switch (p.t) {\n            case 'n':\n              p.v = parseFloat(p.v);\n              if (isNaN(p.v)) p.v = \"\"; // we don't want NaN if p.v is null\n\n              break;\n\n            case 's':\n              // if (!p.hasOwnProperty('v')) continue;\n              sstr = strs[parseInt(p.v, 10)];\n              p.v = sstr.t;\n              p.r = sstr.r;\n              if (opts.cellHTML) p.h = sstr.h;\n              break;\n\n            case 'str':\n              p.t = \"s\";\n              p.v = p.v != null ? utf8read(p.v) : '';\n              if (opts.cellHTML) p.h = p.v;\n              break;\n\n            case 'inlineStr':\n              cref = d.match(isregex);\n              p.t = 's';\n\n              if (cref !== null) {\n                sstr = parse_si(cref[1]);\n                p.v = sstr.t;\n              } else p.v = \"\";\n\n              break;\n            // inline string\n\n            case 'b':\n              p.v = parsexmlbool(p.v);\n              break;\n\n            case 'd':\n              if (!opts.cellDates) {\n                p.v = datenum(p.v);\n                p.t = 'n';\n              }\n\n              break;\n\n            /* error string in .v, number in .v */\n\n            case 'e':\n              p.w = p.v;\n              p.v = RBErr[p.v];\n              break;\n          }\n          /* formatting */\n\n\n          fmtid = fillid = 0;\n\n          if (do_format && tag.s !== undefined) {\n            cf = styles.CellXf[tag.s];\n\n            if (opts.cellStyles) {\n              p.s = get_cell_style_csf(cf);\n            }\n\n            if (cf != null) {\n              if (cf.numFmtId != null) fmtid = cf.numFmtId;\n              if (opts.cellStyles && cf.fillId != null) fillid = cf.fillId;\n            }\n          }\n\n          safe_format(p, fmtid, fillid, opts);\n          s[tag.r] = p;\n        }\n      }\n    };\n  }();\n\n  function write_ws_xml_data(ws, opts, idx, wb) {\n    var o = [],\n        r = [],\n        range = safe_decode_range(ws['!ref']),\n        cell,\n        ref,\n        rr = \"\",\n        cols = [],\n        R,\n        C;\n\n    for (C = range.s.c; C <= range.e.c; ++C) {\n      cols[C] = encode_col(C);\n    }\n\n    for (R = range.s.r; R <= range.e.r; ++R) {\n      r = [];\n      rr = encode_row(R);\n\n      for (C = range.s.c; C <= range.e.c; ++C) {\n        ref = cols[C] + rr;\n        if (ws[ref] === undefined) continue;\n        if ((cell = write_ws_xml_cell(ws[ref], ref, ws, opts, idx, wb)) != null) r.push(cell);\n      }\n\n      if (r.length > 0) o[o.length] = writextag('row', r.join(\"\"), {\n        r: rr\n      });\n    }\n\n    return o.join(\"\");\n  }\n\n  var WS_XML_ROOT = writextag('worksheet', null, {\n    'xmlns': XMLNS.main[0],\n    'xmlns:r': XMLNS.r\n  });\n\n  function write_ws_xml(idx, opts, wb) {\n    var o = [XML_HEADER, WS_XML_ROOT];\n    var s = wb.SheetNames[idx],\n        sidx = 0,\n        rdata = \"\";\n    var ws = wb.Sheets[s];\n    if (ws === undefined) ws = {};\n    var ref = ws['!ref'];\n    if (ref === undefined) ref = 'A1';\n    o[o.length] = writextag('dimension', null, {\n      'ref': ref\n    });\n    var kids = [];\n\n    if (ws['!freeze']) {\n      var pane = '';\n      pane = writextag('pane', null, ws['!freeze']);\n      kids.push(pane);\n      var selection = writextag('selection', null, {\n        pane: \"topLeft\"\n      });\n      kids.push(selection);\n      var selection = writextag('selection', null, {\n        pane: \"bottomLeft\"\n      });\n      kids.push(selection);\n      var selection = writextag('selection', null, {\n        pane: \"bottomRight\",\n        activeCell: ws['!freeze'],\n        sqref: ws['!freeze']\n      });\n      kids.push(selection);\n    } //<selection pane=\"bottomRight\" activeCell=\"A4\" sqref=\"A4\"/>\n\n\n    var sheetView = writextag('sheetView', kids.join('') || undefined, {\n      showGridLines: opts.showGridLines == false ? '0' : '1',\n      tabSelected: opts.tabSelected === undefined ? '0' : opts.tabSelected,\n      // see issue #26, need to set WorkbookViews if this is set\n      workbookViewId: opts.workbookViewId === undefined ? '0' : opts.workbookViewId\n    });\n    o[o.length] = writextag('sheetViews', sheetView);\n    if (ws['!cols'] !== undefined && ws['!cols'].length > 0) o[o.length] = write_ws_xml_cols(ws, ws['!cols']);\n    o[sidx = o.length] = '<sheetData/>';\n\n    if (ws['!ref'] !== undefined) {\n      rdata = write_ws_xml_data(ws, opts, idx, wb);\n      if (rdata.length > 0) o[o.length] = rdata;\n    }\n\n    if (o.length > sidx + 1) {\n      o[o.length] = '</sheetData>';\n      o[sidx] = o[sidx].replace(\"/>\", \">\");\n    }\n\n    if (ws['!merges'] !== undefined && ws['!merges'].length > 0) o[o.length] = write_ws_xml_merges(ws['!merges']);\n    if (ws['!pageSetup'] !== undefined) o[o.length] = write_ws_xml_pagesetup(ws['!pageSetup']);\n    if (ws['!rowBreaks'] !== undefined) o[o.length] = write_ws_xml_row_breaks(ws['!rowBreaks']);\n    if (ws['!colBreaks'] !== undefined) o[o.length] = write_ws_xml_col_breaks(ws['!colBreaks']);\n\n    if (o.length > 2) {\n      o[o.length] = '</worksheet>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n\n  function write_ws_xml_row_breaks(breaks) {\n    var brk = [];\n\n    for (var i = 0; i < breaks.length; i++) {\n      var thisBreak = '' + breaks[i];\n      var nextBreak = '' + (breaks[i + 1] || '16383');\n      brk.push(writextag('brk', null, {\n        id: thisBreak,\n        max: nextBreak,\n        man: '1'\n      }));\n    }\n\n    return writextag('rowBreaks', brk.join(' '), {\n      count: brk.length,\n      manualBreakCount: brk.length\n    });\n  }\n\n  function write_ws_xml_col_breaks(breaks) {\n    var brk = [];\n\n    for (var i = 0; i < breaks.length; i++) {\n      var thisBreak = '' + breaks[i];\n      var nextBreak = '' + (breaks[i + 1] || '1048575');\n      brk.push(writextag('brk', null, {\n        id: thisBreak,\n        max: nextBreak,\n        man: '1'\n      }));\n    }\n\n    return writextag('colBreaks', brk.join(' '), {\n      count: brk.length,\n      manualBreakCount: brk.length\n    });\n  }\n  /* [MS-XLSB] 2.4.718 BrtRowHdr */\n\n\n  function parse_BrtRowHdr(data, length) {\n    var z = [];\n    z.r = data.read_shift(4);\n    data.l += length - 4;\n    return z;\n  }\n  /* [MS-XLSB] 2.4.812 BrtWsDim */\n\n\n  var parse_BrtWsDim = parse_UncheckedRfX;\n  var write_BrtWsDim = write_UncheckedRfX;\n  /* [MS-XLSB] 2.4.815 BrtWsProp */\n\n  function parse_BrtWsProp(data, length) {\n    var z = {};\n    /* TODO: pull flags */\n\n    data.l += 19;\n    z.name = parse_XLSBCodeName(data, length - 19);\n    return z;\n  }\n  /* [MS-XLSB] 2.4.303 BrtCellBlank */\n\n\n  function parse_BrtCellBlank(data, length) {\n    var cell = parse_XLSBCell(data);\n    return [cell];\n  }\n\n  function write_BrtCellBlank(cell, val, o) {\n    if (o == null) o = new_buf(8);\n    return write_XLSBCell(val, o);\n  }\n  /* [MS-XLSB] 2.4.304 BrtCellBool */\n\n\n  function parse_BrtCellBool(data, length) {\n    var cell = parse_XLSBCell(data);\n    var fBool = data.read_shift(1);\n    return [cell, fBool, 'b'];\n  }\n  /* [MS-XLSB] 2.4.305 BrtCellError */\n\n\n  function parse_BrtCellError(data, length) {\n    var cell = parse_XLSBCell(data);\n    var fBool = data.read_shift(1);\n    return [cell, fBool, 'e'];\n  }\n  /* [MS-XLSB] 2.4.308 BrtCellIsst */\n\n\n  function parse_BrtCellIsst(data, length) {\n    var cell = parse_XLSBCell(data);\n    var isst = data.read_shift(4);\n    return [cell, isst, 's'];\n  }\n  /* [MS-XLSB] 2.4.310 BrtCellReal */\n\n\n  function parse_BrtCellReal(data, length) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_Xnum(data);\n    return [cell, value, 'n'];\n  }\n  /* [MS-XLSB] 2.4.311 BrtCellRk */\n\n\n  function parse_BrtCellRk(data, length) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_RkNumber(data);\n    return [cell, value, 'n'];\n  }\n  /* [MS-XLSB] 2.4.314 BrtCellSt */\n\n\n  function parse_BrtCellSt(data, length) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_XLWideString(data);\n    return [cell, value, 'str'];\n  }\n  /* [MS-XLSB] 2.4.647 BrtFmlaBool */\n\n\n  function parse_BrtFmlaBool(data, length, opts) {\n    var cell = parse_XLSBCell(data);\n    var value = data.read_shift(1);\n    var o = [cell, value, 'b'];\n\n    if (opts.cellFormula) {\n      var formula = parse_XLSBCellParsedFormula(data, length - 9);\n      o[3] = \"\";\n      /* TODO */\n    } else data.l += length - 9;\n\n    return o;\n  }\n  /* [MS-XLSB] 2.4.648 BrtFmlaError */\n\n\n  function parse_BrtFmlaError(data, length, opts) {\n    var cell = parse_XLSBCell(data);\n    var value = data.read_shift(1);\n    var o = [cell, value, 'e'];\n\n    if (opts.cellFormula) {\n      var formula = parse_XLSBCellParsedFormula(data, length - 9);\n      o[3] = \"\";\n      /* TODO */\n    } else data.l += length - 9;\n\n    return o;\n  }\n  /* [MS-XLSB] 2.4.649 BrtFmlaNum */\n\n\n  function parse_BrtFmlaNum(data, length, opts) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_Xnum(data);\n    var o = [cell, value, 'n'];\n\n    if (opts.cellFormula) {\n      var formula = parse_XLSBCellParsedFormula(data, length - 16);\n      o[3] = \"\";\n      /* TODO */\n    } else data.l += length - 16;\n\n    return o;\n  }\n  /* [MS-XLSB] 2.4.650 BrtFmlaString */\n\n\n  function parse_BrtFmlaString(data, length, opts) {\n    var start = data.l;\n    var cell = parse_XLSBCell(data);\n    var value = parse_XLWideString(data);\n    var o = [cell, value, 'str'];\n\n    if (opts.cellFormula) {\n      var formula = parse_XLSBCellParsedFormula(data, start + length - data.l);\n    } else data.l = start + length;\n\n    return o;\n  }\n  /* [MS-XLSB] 2.4.676 BrtMergeCell */\n\n\n  var parse_BrtMergeCell = parse_UncheckedRfX;\n  /* [MS-XLSB] 2.4.656 BrtHLink */\n\n  function parse_BrtHLink(data, length, opts) {\n    var end = data.l + length;\n    var rfx = parse_UncheckedRfX(data, 16);\n    var relId = parse_XLNullableWideString(data);\n    var loc = parse_XLWideString(data);\n    var tooltip = parse_XLWideString(data);\n    var display = parse_XLWideString(data);\n    data.l = end;\n    return {\n      rfx: rfx,\n      relId: relId,\n      loc: loc,\n      tooltip: tooltip,\n      display: display\n    };\n  }\n  /* [MS-XLSB] 2.1.7.61 Worksheet */\n\n\n  function parse_ws_bin(data, opts, rels) {\n    if (!data) return data;\n    if (!rels) rels = {\n      '!id': {}\n    };\n    var s = {};\n    var ref;\n    var refguess = {\n      s: {\n        r: 1000000,\n        c: 1000000\n      },\n      e: {\n        r: 0,\n        c: 0\n      }\n    };\n    var pass = false,\n        end = false;\n    var row, p, cf, R, C, addr, sstr, rr;\n    var mergecells = [];\n    recordhopper(data, function ws_parse(val, R) {\n      if (end) return;\n\n      switch (R.n) {\n        case 'BrtWsDim':\n          ref = val;\n          break;\n\n        case 'BrtRowHdr':\n          row = val;\n          if (opts.sheetRows && opts.sheetRows <= row.r) end = true;\n          rr = encode_row(row.r);\n          break;\n\n        case 'BrtFmlaBool':\n        case 'BrtFmlaError':\n        case 'BrtFmlaNum':\n        case 'BrtFmlaString':\n        case 'BrtCellBool':\n        case 'BrtCellError':\n        case 'BrtCellIsst':\n        case 'BrtCellReal':\n        case 'BrtCellRk':\n        case 'BrtCellSt':\n          p = {\n            t: val[2]\n          };\n\n          switch (val[2]) {\n            case 'n':\n              p.v = val[1];\n              break;\n\n            case 's':\n              sstr = strs[val[1]];\n              p.v = sstr.t;\n              p.r = sstr.r;\n              break;\n\n            case 'b':\n              p.v = val[1] ? true : false;\n              break;\n\n            case 'e':\n              p.v = val[1];\n              p.w = BErr[p.v];\n              break;\n\n            case 'str':\n              p.t = 's';\n              p.v = utf8read(val[1]);\n              break;\n          }\n\n          if (opts.cellFormula && val.length > 3) p.f = val[3];\n          if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.ifmt, null, opts);\n          s[encode_col(C = val[0].c) + rr] = p;\n          if (refguess.s.r > row.r) refguess.s.r = row.r;\n          if (refguess.s.c > C) refguess.s.c = C;\n          if (refguess.e.r < row.r) refguess.e.r = row.r;\n          if (refguess.e.c < C) refguess.e.c = C;\n          break;\n\n        case 'BrtCellBlank':\n          if (!opts.sheetStubs) break;\n          p = {\n            t: 's',\n            v: undefined\n          };\n          s[encode_col(C = val[0].c) + rr] = p;\n          if (refguess.s.r > row.r) refguess.s.r = row.r;\n          if (refguess.s.c > C) refguess.s.c = C;\n          if (refguess.e.r < row.r) refguess.e.r = row.r;\n          if (refguess.e.c < C) refguess.e.c = C;\n          break;\n\n        /* Merge Cells */\n\n        case 'BrtBeginMergeCells':\n          break;\n\n        case 'BrtEndMergeCells':\n          break;\n\n        case 'BrtMergeCell':\n          mergecells.push(val);\n          break;\n\n        case 'BrtHLink':\n          var rel = rels['!id'][val.relId];\n\n          if (rel) {\n            val.Target = rel.Target;\n            if (val.loc) val.Target += \"#\" + val.loc;\n            val.Rel = rel;\n          }\n\n          for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) {\n            for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {\n              addr = encode_cell({\n                c: C,\n                r: R\n              });\n              if (!s[addr]) s[addr] = {\n                t: 's',\n                v: undefined\n              };\n              s[addr].l = val;\n            }\n          }\n\n          break;\n\n        case 'BrtArrFmla':\n          break;\n        // TODO\n\n        case 'BrtShrFmla':\n          break;\n        // TODO\n\n        case 'BrtBeginSheet':\n          break;\n\n        case 'BrtWsProp':\n          break;\n        // TODO\n\n        case 'BrtSheetCalcProp':\n          break;\n        // TODO\n\n        case 'BrtBeginWsViews':\n          break;\n        // TODO\n\n        case 'BrtBeginWsView':\n          break;\n        // TODO\n\n        case 'BrtPane':\n          break;\n        // TODO\n\n        case 'BrtSel':\n          break;\n        // TODO\n\n        case 'BrtEndWsView':\n          break;\n        // TODO\n\n        case 'BrtEndWsViews':\n          break;\n        // TODO\n\n        case 'BrtACBegin':\n          break;\n        // TODO\n\n        case 'BrtRwDescent':\n          break;\n        // TODO\n\n        case 'BrtACEnd':\n          break;\n        // TODO\n\n        case 'BrtWsFmtInfoEx14':\n          break;\n        // TODO\n\n        case 'BrtWsFmtInfo':\n          break;\n        // TODO\n\n        case 'BrtBeginColInfos':\n          break;\n        // TODO\n\n        case 'BrtColInfo':\n          break;\n        // TODO\n\n        case 'BrtEndColInfos':\n          break;\n        // TODO\n\n        case 'BrtBeginSheetData':\n          break;\n        // TODO\n\n        case 'BrtEndSheetData':\n          break;\n        // TODO\n\n        case 'BrtSheetProtection':\n          break;\n        // TODO\n\n        case 'BrtPrintOptions':\n          break;\n        // TODO\n\n        case 'BrtMargins':\n          break;\n        // TODO\n\n        case 'BrtPageSetup':\n          break;\n        // TODO\n\n        case 'BrtFRTBegin':\n          pass = true;\n          break;\n\n        case 'BrtFRTEnd':\n          pass = false;\n          break;\n\n        case 'BrtEndSheet':\n          break;\n        // TODO\n\n        case 'BrtDrawing':\n          break;\n        // TODO\n\n        case 'BrtLegacyDrawing':\n          break;\n        // TODO\n\n        case 'BrtLegacyDrawingHF':\n          break;\n        // TODO\n\n        case 'BrtPhoneticInfo':\n          break;\n        // TODO\n\n        case 'BrtBeginHeaderFooter':\n          break;\n        // TODO\n\n        case 'BrtEndHeaderFooter':\n          break;\n        // TODO\n\n        case 'BrtBrk':\n          break;\n        // TODO\n\n        case 'BrtBeginRwBrk':\n          break;\n        // TODO\n\n        case 'BrtEndRwBrk':\n          break;\n        // TODO\n\n        case 'BrtBeginColBrk':\n          break;\n        // TODO\n\n        case 'BrtEndColBrk':\n          break;\n        // TODO\n\n        case 'BrtBeginUserShViews':\n          break;\n        // TODO\n\n        case 'BrtBeginUserShView':\n          break;\n        // TODO\n\n        case 'BrtEndUserShView':\n          break;\n        // TODO\n\n        case 'BrtEndUserShViews':\n          break;\n        // TODO\n\n        case 'BrtBkHim':\n          break;\n        // TODO\n\n        case 'BrtBeginOleObjects':\n          break;\n        // TODO\n\n        case 'BrtOleObject':\n          break;\n        // TODO\n\n        case 'BrtEndOleObjects':\n          break;\n        // TODO\n\n        case 'BrtBeginListParts':\n          break;\n        // TODO\n\n        case 'BrtListPart':\n          break;\n        // TODO\n\n        case 'BrtEndListParts':\n          break;\n        // TODO\n\n        case 'BrtBeginSortState':\n          break;\n        // TODO\n\n        case 'BrtBeginSortCond':\n          break;\n        // TODO\n\n        case 'BrtEndSortCond':\n          break;\n        // TODO\n\n        case 'BrtEndSortState':\n          break;\n        // TODO\n\n        case 'BrtBeginConditionalFormatting':\n          break;\n        // TODO\n\n        case 'BrtEndConditionalFormatting':\n          break;\n        // TODO\n\n        case 'BrtBeginCFRule':\n          break;\n        // TODO\n\n        case 'BrtEndCFRule':\n          break;\n        // TODO\n\n        case 'BrtBeginDVals':\n          break;\n        // TODO\n\n        case 'BrtDVal':\n          break;\n        // TODO\n\n        case 'BrtEndDVals':\n          break;\n        // TODO\n\n        case 'BrtRangeProtection':\n          break;\n        // TODO\n\n        case 'BrtBeginDCon':\n          break;\n        // TODO\n\n        case 'BrtEndDCon':\n          break;\n        // TODO\n\n        case 'BrtBeginDRefs':\n          break;\n\n        case 'BrtDRef':\n          break;\n\n        case 'BrtEndDRefs':\n          break;\n\n        /* ActiveX */\n\n        case 'BrtBeginActiveXControls':\n          break;\n\n        case 'BrtActiveX':\n          break;\n\n        case 'BrtEndActiveXControls':\n          break;\n\n        /* AutoFilter */\n\n        case 'BrtBeginAFilter':\n          break;\n\n        case 'BrtEndAFilter':\n          break;\n\n        case 'BrtBeginFilterColumn':\n          break;\n\n        case 'BrtBeginFilters':\n          break;\n\n        case 'BrtFilter':\n          break;\n\n        case 'BrtEndFilters':\n          break;\n\n        case 'BrtEndFilterColumn':\n          break;\n\n        case 'BrtDynamicFilter':\n          break;\n\n        case 'BrtTop10Filter':\n          break;\n\n        case 'BrtBeginCustomFilters':\n          break;\n\n        case 'BrtCustomFilter':\n          break;\n\n        case 'BrtEndCustomFilters':\n          break;\n\n        /* Smart Tags */\n\n        case 'BrtBeginSmartTags':\n          break;\n\n        case 'BrtBeginCellSmartTags':\n          break;\n\n        case 'BrtBeginCellSmartTag':\n          break;\n\n        case 'BrtCellSmartTagProperty':\n          break;\n\n        case 'BrtEndCellSmartTag':\n          break;\n\n        case 'BrtEndCellSmartTags':\n          break;\n\n        case 'BrtEndSmartTags':\n          break;\n\n        /* Cell Watch */\n\n        case 'BrtBeginCellWatches':\n          break;\n\n        case 'BrtCellWatch':\n          break;\n\n        case 'BrtEndCellWatches':\n          break;\n\n        /* Table */\n\n        case 'BrtTable':\n          break;\n\n        /* Ignore Cell Errors */\n\n        case 'BrtBeginCellIgnoreECs':\n          break;\n\n        case 'BrtCellIgnoreEC':\n          break;\n\n        case 'BrtEndCellIgnoreECs':\n          break;\n\n        default:\n          if (!pass || opts.WTF) throw new Error(\"Unexpected record \" + R.n);\n      }\n    }, opts);\n    if (!s[\"!ref\"] && (refguess.s.r < 1000000 || ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)) s[\"!ref\"] = encode_range(ref);\n\n    if (opts.sheetRows && s[\"!ref\"]) {\n      var tmpref = safe_decode_range(s[\"!ref\"]);\n\n      if (opts.sheetRows < +tmpref.e.r) {\n        tmpref.e.r = opts.sheetRows - 1;\n        if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n        if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n        if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n        if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n        s[\"!fullref\"] = s[\"!ref\"];\n        s[\"!ref\"] = encode_range(tmpref);\n      }\n    }\n\n    if (mergecells.length > 0) s[\"!merges\"] = mergecells;\n    return s;\n  }\n  /* TODO: something useful -- this is a stub */\n\n\n  function write_ws_bin_cell(ba, cell, R, C, opts) {\n    if (cell.v === undefined) return \"\";\n    var vv = \"\";\n\n    switch (cell.t) {\n      case 'b':\n        vv = cell.v ? \"1\" : \"0\";\n        break;\n\n      case 'n':\n      case 'e':\n        vv = '' + cell.v;\n        break;\n\n      default:\n        vv = cell.v;\n        break;\n    }\n\n    var o = {\n      r: R,\n      c: C\n    };\n    /* TODO: cell style */\n\n    o.s = get_cell_style(opts.cellXfs, cell, opts);\n\n    switch (cell.t) {\n      case 's':\n      case 'str':\n        if (opts.bookSST) {\n          vv = get_sst_id(opts.Strings, cell.v);\n          o.t = \"s\";\n          break;\n        }\n\n        o.t = \"str\";\n        break;\n\n      case 'n':\n        break;\n\n      case 'b':\n        o.t = \"b\";\n        break;\n\n      case 'e':\n        o.t = \"e\";\n        break;\n    }\n\n    write_record(ba, \"BrtCellBlank\", write_BrtCellBlank(cell, o));\n  }\n\n  function write_CELLTABLE(ba, ws, idx, opts, wb) {\n    var range = safe_decode_range(ws['!ref'] || \"A1\"),\n        ref,\n        rr = \"\",\n        cols = [];\n    write_record(ba, 'BrtBeginSheetData');\n\n    for (var R = range.s.r; R <= range.e.r; ++R) {\n      rr = encode_row(R);\n      /* [ACCELLTABLE] */\n\n      /* BrtRowHdr */\n\n      for (var C = range.s.c; C <= range.e.c; ++C) {\n        /* *16384CELL */\n        if (R === range.s.r) cols[C] = encode_col(C);\n        ref = cols[C] + rr;\n        if (!ws[ref]) continue;\n        /* write cell */\n\n        write_ws_bin_cell(ba, ws[ref], R, C, opts);\n      }\n    }\n\n    write_record(ba, 'BrtEndSheetData');\n  }\n\n  function write_ws_bin(idx, opts, wb) {\n    var ba = buf_array();\n    var s = wb.SheetNames[idx],\n        ws = wb.Sheets[s] || {};\n    var r = safe_decode_range(ws['!ref'] || \"A1\");\n    write_record(ba, \"BrtBeginSheet\");\n    /* [BrtWsProp] */\n\n    write_record(ba, \"BrtWsDim\", write_BrtWsDim(r));\n    /* [WSVIEWS2] */\n\n    /* [WSFMTINFO] */\n\n    /* *COLINFOS */\n\n    write_CELLTABLE(ba, ws, idx, opts, wb);\n    /* [BrtSheetCalcProp] */\n\n    /* [[BrtSheetProtectionIso] BrtSheetProtection] */\n\n    /* *([BrtRangeProtectionIso] BrtRangeProtection) */\n\n    /* [SCENMAN] */\n\n    /* [AUTOFILTER] */\n\n    /* [SORTSTATE] */\n\n    /* [DCON] */\n\n    /* [USERSHVIEWS] */\n\n    /* [MERGECELLS] */\n\n    /* [BrtPhoneticInfo] */\n\n    /* *CONDITIONALFORMATTING */\n\n    /* [DVALS] */\n\n    /* *BrtHLink */\n\n    /* [BrtPrintOptions] */\n\n    /* [BrtMargins] */\n\n    /* [BrtPageSetup] */\n\n    /* [HEADERFOOTER] */\n\n    /* [RWBRK] */\n\n    /* [COLBRK] */\n\n    /* *BrtBigName */\n\n    /* [CELLWATCHES] */\n\n    /* [IGNOREECS] */\n\n    /* [SMARTTAGS] */\n\n    /* [BrtDrawing] */\n\n    /* [BrtLegacyDrawing] */\n\n    /* [BrtLegacyDrawingHF] */\n\n    /* [BrtBkHim] */\n\n    /* [OLEOBJECTS] */\n\n    /* [ACTIVEXCONTROLS] */\n\n    /* [WEBPUBITEMS] */\n\n    /* [LISTPARTS] */\n\n    /* FRTWORKSHEET */\n\n    write_record(ba, \"BrtEndSheet\");\n    return ba.end();\n  }\n  /* 18.2.28 (CT_WorkbookProtection) Defaults */\n\n\n  var WBPropsDef = [['allowRefreshQuery', '0'], ['autoCompressPictures', '1'], ['backupFile', '0'], ['checkCompatibility', '0'], ['codeName', ''], ['date1904', '0'], ['dateCompatibility', '1'], //['defaultThemeVersion', '0'],\n  ['filterPrivacy', '0'], ['hidePivotFieldList', '0'], ['promptedSolutions', '0'], ['publishItems', '0'], ['refreshAllConnections', false], ['saveExternalLinkValues', '1'], ['showBorderUnselectedTables', '1'], ['showInkAnnotation', '1'], ['showObjects', 'all'], ['showPivotChartFilter', '0'] //['updateLinks', 'userSet']\n  ];\n  /* 18.2.30 (CT_BookView) Defaults */\n\n  var WBViewDef = [['activeTab', '0'], ['autoFilterDateGrouping', '1'], ['firstSheet', '0'], ['minimized', '0'], ['showHorizontalScroll', '1'], ['showSheetTabs', '1'], ['showVerticalScroll', '1'], ['tabRatio', '600'], ['visibility', 'visible'] //window{Height,Width}, {x,y}Window\n  ];\n  /* 18.2.19 (CT_Sheet) Defaults */\n\n  var SheetDef = [['state', 'visible']];\n  /* 18.2.2  (CT_CalcPr) Defaults */\n\n  var CalcPrDef = [['calcCompleted', 'true'], ['calcMode', 'auto'], ['calcOnSave', 'true'], ['concurrentCalc', 'true'], ['fullCalcOnLoad', 'false'], ['fullPrecision', 'true'], ['iterate', 'false'], ['iterateCount', '100'], ['iterateDelta', '0.001'], ['refMode', 'A1']];\n  /* 18.2.3 (CT_CustomWorkbookView) Defaults */\n\n  var CustomWBViewDef = [['autoUpdate', 'false'], ['changesSavedWin', 'false'], ['includeHiddenRowCol', 'true'], ['includePrintSettings', 'true'], ['maximized', 'false'], ['minimized', 'false'], ['onlySync', 'false'], ['personalView', 'false'], ['showComments', 'commIndicator'], ['showFormulaBar', 'true'], ['showHorizontalScroll', 'true'], ['showObjects', 'all'], ['showSheetTabs', 'true'], ['showStatusbar', 'true'], ['showVerticalScroll', 'true'], ['tabRatio', '600'], ['xWindow', '0'], ['yWindow', '0']];\n\n  function push_defaults_array(target, defaults) {\n    for (var j = 0; j != target.length; ++j) {\n      var w = target[j];\n\n      for (var i = 0; i != defaults.length; ++i) {\n        var z = defaults[i];\n        if (w[z[0]] == null) w[z[0]] = z[1];\n      }\n    }\n  }\n\n  function push_defaults(target, defaults) {\n    for (var i = 0; i != defaults.length; ++i) {\n      var z = defaults[i];\n      if (target[z[0]] == null) target[z[0]] = z[1];\n    }\n  }\n\n  function parse_wb_defaults(wb) {\n    push_defaults(wb.WBProps, WBPropsDef);\n    push_defaults(wb.CalcPr, CalcPrDef);\n    push_defaults_array(wb.WBView, WBViewDef);\n    push_defaults_array(wb.Sheets, SheetDef);\n    _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, 'date1904');\n  }\n  /* 18.2 Workbook */\n\n\n  var wbnsregex = /<\\w+:workbook/;\n\n  function parse_wb_xml(data, opts) {\n    var wb = {\n      AppVersion: {},\n      WBProps: {},\n      WBView: [],\n      Sheets: [],\n      CalcPr: {},\n      xmlns: \"\"\n    };\n    var pass = false,\n        xmlns = \"xmlns\";\n    data.match(tagregex).forEach(function xml_wb(x) {\n      var y = parsexmltag(x);\n\n      switch (strip_ns(y[0])) {\n        case '<?xml':\n          break;\n\n        /* 18.2.27 workbook CT_Workbook 1 */\n\n        case '<workbook':\n          if (x.match(wbnsregex)) xmlns = \"xmlns\" + x.match(/<(\\w+):/)[1];\n          wb.xmlns = y[xmlns];\n          break;\n\n        case '</workbook>':\n          break;\n\n        /* 18.2.13 fileVersion CT_FileVersion ? */\n\n        case '<fileVersion':\n          delete y[0];\n          wb.AppVersion = y;\n          break;\n\n        case '<fileVersion/>':\n          break;\n\n        /* 18.2.12 fileSharing CT_FileSharing ? */\n\n        case '<fileSharing':\n        case '<fileSharing/>':\n          break;\n\n        /* 18.2.28 workbookPr CT_WorkbookPr ? */\n\n        case '<workbookPr':\n          delete y[0];\n          wb.WBProps = y;\n          break;\n\n        case '<workbookPr/>':\n          delete y[0];\n          wb.WBProps = y;\n          break;\n\n        /* 18.2.29 workbookProtection CT_WorkbookProtection ? */\n\n        case '<workbookProtection':\n          break;\n\n        case '<workbookProtection/>':\n          break;\n\n        /* 18.2.1  bookViews CT_BookViews ? */\n\n        case '<bookViews>':\n        case '</bookViews>':\n          break;\n\n        /* 18.2.30   workbookView CT_BookView + */\n\n        case '<workbookView':\n          delete y[0];\n          wb.WBView.push(y);\n          break;\n\n        /* 18.2.20 sheets CT_Sheets 1 */\n\n        case '<sheets>':\n        case '</sheets>':\n          break;\n        // aggregate sheet\n\n        /* 18.2.19   sheet CT_Sheet + */\n\n        case '<sheet':\n          delete y[0];\n          y.name = utf8read(y.name);\n          wb.Sheets.push(y);\n          break;\n\n        /* 18.2.15 functionGroups CT_FunctionGroups ? */\n\n        case '<functionGroups':\n        case '<functionGroups/>':\n          break;\n\n        /* 18.2.14   functionGroup CT_FunctionGroup + */\n\n        case '<functionGroup':\n          break;\n\n        /* 18.2.9  externalReferences CT_ExternalReferences ? */\n\n        case '<externalReferences':\n        case '</externalReferences>':\n        case '<externalReferences>':\n          break;\n\n        /* 18.2.8    externalReference CT_ExternalReference + */\n\n        case '<externalReference':\n          break;\n\n        /* 18.2.6  definedNames CT_DefinedNames ? */\n\n        case '<definedNames/>':\n          break;\n\n        case '<definedNames>':\n        case '<definedNames':\n          pass = true;\n          break;\n\n        case '</definedNames>':\n          pass = false;\n          break;\n\n        /* 18.2.5    definedName CT_DefinedName + */\n\n        case '<definedName':\n        case '<definedName/>':\n        case '</definedName>':\n          break;\n\n        /* 18.2.2  calcPr CT_CalcPr ? */\n\n        case '<calcPr':\n          delete y[0];\n          wb.CalcPr = y;\n          break;\n\n        case '<calcPr/>':\n          delete y[0];\n          wb.CalcPr = y;\n          break;\n\n        /* 18.2.16 oleSize CT_OleSize ? (ref required) */\n\n        case '<oleSize':\n          break;\n\n        /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */\n\n        case '<customWorkbookViews>':\n        case '</customWorkbookViews>':\n        case '<customWorkbookViews':\n          break;\n\n        /* 18.2.3    customWorkbookView CT_CustomWorkbookView + */\n\n        case '<customWorkbookView':\n        case '</customWorkbookView>':\n          break;\n\n        /* 18.2.18 pivotCaches CT_PivotCaches ? */\n\n        case '<pivotCaches>':\n        case '</pivotCaches>':\n        case '<pivotCaches':\n          break;\n\n        /* 18.2.17 pivotCache CT_PivotCache ? */\n\n        case '<pivotCache':\n          break;\n\n        /* 18.2.21 smartTagPr CT_SmartTagPr ? */\n\n        case '<smartTagPr':\n        case '<smartTagPr/>':\n          break;\n\n        /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */\n\n        case '<smartTagTypes':\n        case '<smartTagTypes>':\n        case '</smartTagTypes>':\n          break;\n\n        /* 18.2.22   smartTagType CT_SmartTagType ? */\n\n        case '<smartTagType':\n          break;\n\n        /* 18.2.24 webPublishing CT_WebPublishing ? */\n\n        case '<webPublishing':\n        case '<webPublishing/>':\n          break;\n\n        /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */\n\n        case '<fileRecoveryPr':\n        case '<fileRecoveryPr/>':\n          break;\n\n        /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */\n\n        case '<webPublishObjects>':\n        case '<webPublishObjects':\n        case '</webPublishObjects>':\n          break;\n\n        /* 18.2.25 webPublishObject CT_WebPublishObject ? */\n\n        case '<webPublishObject':\n          break;\n\n        /* 18.2.10 extLst CT_ExtensionList ? */\n\n        case '<extLst>':\n        case '</extLst>':\n        case '<extLst/>':\n          break;\n\n        /* 18.2.7    ext CT_Extension + */\n\n        case '<ext':\n          pass = true;\n          break;\n        //TODO: check with versions of excel\n\n        case '</ext>':\n          pass = false;\n          break;\n\n        /* Others */\n\n        case '<ArchID':\n          break;\n\n        case '<AlternateContent':\n          pass = true;\n          break;\n\n        case '</AlternateContent>':\n          pass = false;\n          break;\n\n        default:\n          if (!pass && opts.WTF) throw 'unrecognized ' + y[0] + ' in workbook';\n      }\n    });\n    if (XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error(\"Unknown Namespace: \" + wb.xmlns);\n    parse_wb_defaults(wb);\n    return wb;\n  }\n\n  var WB_XML_ROOT = writextag('workbook', null, {\n    'xmlns': XMLNS.main[0],\n    //'xmlns:mx': XMLNS.mx,\n    //'xmlns:s': XMLNS.main[0],\n    'xmlns:r': XMLNS.r\n  });\n\n  function safe1904(wb) {\n    /* TODO: store date1904 somewhere else */\n    try {\n      return parsexmlbool(wb.Workbook.WBProps.date1904) ? \"true\" : \"false\";\n    } catch (e) {\n      return \"false\";\n    }\n  }\n\n  function write_wb_xml(wb, opts) {\n    var o = [XML_HEADER];\n    o[o.length] = WB_XML_ROOT;\n    o[o.length] = writextag('workbookPr', null, {\n      date1904: safe1904(wb)\n    });\n    o[o.length] = \"<sheets>\";\n\n    for (var i = 0; i != wb.SheetNames.length; ++i) {\n      o[o.length] = writextag('sheet', null, {\n        name: wb.SheetNames[i].substr(0, 31),\n        sheetId: \"\" + (i + 1),\n        \"r:id\": \"rId\" + (i + 1)\n      });\n    }\n\n    o[o.length] = \"</sheets>\";\n    var hasPrintHeaders = false;\n\n    for (var i = 0; i != wb.SheetNames.length; ++i) {\n      var sheetName = wb.SheetNames[i];\n      var sheet = wb.Sheets[sheetName];\n\n      if (sheet['!printHeader']) {\n        if (sheet['!printHeader'].length !== 2) {\n          throw \"!printHeaders must be an array of length 2: \" + sheet['!printHeader'];\n        }\n\n        hasPrintHeaders = true;\n      }\n    }\n\n    if (hasPrintHeaders) {\n      o[o.length] = '<definedNames>';\n\n      for (var i = 0; i != wb.SheetNames.length; ++i) {\n        var sheetName = wb.SheetNames[i];\n        var sheet = wb.Sheets[sheetName];\n\n        if (sheet['!printHeader'] || sheet['!printColumns']) {\n          var printHeader = sheet['!printHeader'];\n          var printColumns = sheet['!printColumns']; //Sheet1!$A:$C,Sheet1!$1:$1\n\n          var range = \"\";\n          if (printColumns) range += \"'\" + sheetName + \"'!\" + (\"$\" + printColumns[0] + \":$\" + printColumns[1]);\n          if (printColumns && printHeader) range += \",\";\n          if (printHeader) range += \"'\" + sheetName + \"'!\" + (\"$\" + printHeader[0] + \":$\" + printHeader[1]);\n          console.log(\"-----------------------------\");\n          console.log(range);\n          o[o.length] = writextag('definedName', range, {\n            \"name\": \"_xlnm.Print_Titles\",\n            localSheetId: '' + i\n          });\n        }\n      }\n\n      o[o.length] = '</definedNames>';\n    }\n\n    if (o.length > 2) {\n      o[o.length] = '</workbook>';\n      o[1] = o[1].replace(\"/>\", \">\");\n    }\n\n    return o.join(\"\");\n  }\n  /* [MS-XLSB] 2.4.301 BrtBundleSh */\n\n\n  function parse_BrtBundleSh(data, length) {\n    var z = {};\n    z.hsState = data.read_shift(4); //ST_SheetState\n\n    z.iTabID = data.read_shift(4);\n    z.strRelID = parse_RelID(data, length - 8);\n    z.name = parse_XLWideString(data);\n    return z;\n  }\n\n  function write_BrtBundleSh(data, o) {\n    if (!o) o = new_buf(127);\n    o.write_shift(4, data.hsState);\n    o.write_shift(4, data.iTabID);\n    write_RelID(data.strRelID, o);\n    write_XLWideString(data.name.substr(0, 31), o);\n    return o;\n  }\n  /* [MS-XLSB] 2.4.807 BrtWbProp */\n\n\n  function parse_BrtWbProp(data, length) {\n    data.read_shift(4);\n    var dwThemeVersion = data.read_shift(4);\n    var strName = length > 8 ? parse_XLWideString(data) : \"\";\n    return [dwThemeVersion, strName];\n  }\n\n  function write_BrtWbProp(data, o) {\n    if (!o) o = new_buf(8);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    return o;\n  }\n\n  function parse_BrtFRTArchID$(data, length) {\n    var o = {};\n    data.read_shift(4);\n    o.ArchID = data.read_shift(4);\n    data.l += length - 8;\n    return o;\n  }\n  /* [MS-XLSB] 2.1.7.60 Workbook */\n\n\n  function parse_wb_bin(data, opts) {\n    var wb = {\n      AppVersion: {},\n      WBProps: {},\n      WBView: [],\n      Sheets: [],\n      CalcPr: {},\n      xmlns: \"\"\n    };\n    var pass = false,\n        z;\n    recordhopper(data, function hopper_wb(val, R) {\n      switch (R.n) {\n        case 'BrtBundleSh':\n          wb.Sheets.push(val);\n          break;\n\n        case 'BrtBeginBook':\n          break;\n\n        case 'BrtFileVersion':\n          break;\n\n        case 'BrtWbProp':\n          break;\n\n        case 'BrtACBegin':\n          break;\n\n        case 'BrtAbsPath15':\n          break;\n\n        case 'BrtACEnd':\n          break;\n\n        case 'BrtWbFactoid':\n          break;\n\n        /*case 'BrtBookProtectionIso': break;*/\n\n        case 'BrtBookProtection':\n          break;\n\n        case 'BrtBeginBookViews':\n          break;\n\n        case 'BrtBookView':\n          break;\n\n        case 'BrtEndBookViews':\n          break;\n\n        case 'BrtBeginBundleShs':\n          break;\n\n        case 'BrtEndBundleShs':\n          break;\n\n        case 'BrtBeginFnGroup':\n          break;\n\n        case 'BrtEndFnGroup':\n          break;\n\n        case 'BrtBeginExternals':\n          break;\n\n        case 'BrtSupSelf':\n          break;\n\n        case 'BrtSupBookSrc':\n          break;\n\n        case 'BrtExternSheet':\n          break;\n\n        case 'BrtEndExternals':\n          break;\n\n        case 'BrtName':\n          break;\n\n        case 'BrtCalcProp':\n          break;\n\n        case 'BrtUserBookView':\n          break;\n\n        case 'BrtBeginPivotCacheIDs':\n          break;\n\n        case 'BrtBeginPivotCacheID':\n          break;\n\n        case 'BrtEndPivotCacheID':\n          break;\n\n        case 'BrtEndPivotCacheIDs':\n          break;\n\n        case 'BrtWebOpt':\n          break;\n\n        case 'BrtFileRecover':\n          break;\n\n        case 'BrtFileSharing':\n          break;\n\n        /*case 'BrtBeginWebPubItems': break;\n        case 'BrtBeginWebPubItem': break;\n        case 'BrtEndWebPubItem': break;\n        case 'BrtEndWebPubItems': break;*/\n\n        /* Smart Tags */\n\n        case 'BrtBeginSmartTagTypes':\n          break;\n\n        case 'BrtSmartTagType':\n          break;\n\n        case 'BrtEndSmartTagTypes':\n          break;\n\n        case 'BrtFRTBegin':\n          pass = true;\n          break;\n\n        case 'BrtFRTArchID$':\n          break;\n\n        case 'BrtWorkBookPr15':\n          break;\n\n        case 'BrtFRTEnd':\n          pass = false;\n          break;\n\n        case 'BrtEndBook':\n          break;\n\n        default:\n          if (!pass || opts.WTF) throw new Error(\"Unexpected record \" + R.n);\n      }\n    });\n    parse_wb_defaults(wb);\n    return wb;\n  }\n  /* [MS-XLSB] 2.1.7.60 Workbook */\n\n\n  function write_BUNDLESHS(ba, wb, opts) {\n    write_record(ba, \"BrtBeginBundleShs\");\n\n    for (var idx = 0; idx != wb.SheetNames.length; ++idx) {\n      var d = {\n        hsState: 0,\n        iTabID: idx + 1,\n        strRelID: 'rId' + (idx + 1),\n        name: wb.SheetNames[idx]\n      };\n      write_record(ba, \"BrtBundleSh\", write_BrtBundleSh(d));\n    }\n\n    write_record(ba, \"BrtEndBundleShs\");\n  }\n  /* [MS-XLSB] 2.4.643 BrtFileVersion */\n\n\n  function write_BrtFileVersion(data, o) {\n    if (!o) o = new_buf(127);\n\n    for (var i = 0; i != 4; ++i) {\n      o.write_shift(4, 0);\n    }\n\n    write_XLWideString(\"SheetJS\", o);\n    write_XLWideString(XLSX.version, o);\n    write_XLWideString(XLSX.version, o);\n    write_XLWideString(\"7262\", o);\n    o.length = o.l;\n    return o;\n  }\n  /* [MS-XLSB] 2.1.7.60 Workbook */\n\n\n  function write_BOOKVIEWS(ba, wb, opts) {\n    write_record(ba, \"BrtBeginBookViews\");\n    /* 1*(BrtBookView *FRT) */\n\n    write_record(ba, \"BrtEndBookViews\");\n  }\n  /* [MS-XLSB] 2.4.302 BrtCalcProp */\n\n\n  function write_BrtCalcProp(data, o) {\n    if (!o) o = new_buf(26);\n    o.write_shift(4, 0);\n    /* force recalc */\n\n    o.write_shift(4, 1);\n    o.write_shift(4, 0);\n    write_Xnum(0, o);\n    o.write_shift(-4, 1023);\n    o.write_shift(1, 0x33);\n    o.write_shift(1, 0x00);\n    return o;\n  }\n\n  function write_BrtFileRecover(data, o) {\n    if (!o) o = new_buf(1);\n    o.write_shift(1, 0);\n    return o;\n  }\n  /* [MS-XLSB] 2.1.7.60 Workbook */\n\n\n  function write_wb_bin(wb, opts) {\n    var ba = buf_array();\n    write_record(ba, \"BrtBeginBook\");\n    write_record(ba, \"BrtFileVersion\", write_BrtFileVersion());\n    /* [[BrtFileSharingIso] BrtFileSharing] */\n\n    write_record(ba, \"BrtWbProp\", write_BrtWbProp());\n    /* [ACABSPATH] */\n\n    /* [[BrtBookProtectionIso] BrtBookProtection] */\n\n    write_BOOKVIEWS(ba, wb, opts);\n    write_BUNDLESHS(ba, wb, opts);\n    /* [FNGROUP] */\n\n    /* [EXTERNALS] */\n\n    /* *BrtName */\n\n    write_record(ba, \"BrtCalcProp\", write_BrtCalcProp());\n    /* [BrtOleSize] */\n\n    /* *(BrtUserBookView *FRT) */\n\n    /* [PIVOTCACHEIDS] */\n\n    /* [BrtWbFactoid] */\n\n    /* [SMARTTAGTYPES] */\n\n    /* [BrtWebOpt] */\n\n    write_record(ba, \"BrtFileRecover\", write_BrtFileRecover());\n    /* [WEBPUBITEMS] */\n\n    /* [CRERRS] */\n\n    /* FRTWORKBOOK */\n\n    write_record(ba, \"BrtEndBook\");\n    return ba.end();\n  }\n\n  function parse_wb(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? parse_wb_bin : parse_wb_xml)(data, opts);\n  }\n\n  function parse_ws(data, name, opts, rels) {\n    return (name.substr(-4) === \".bin\" ? parse_ws_bin : parse_ws_xml)(data, opts, rels);\n  }\n\n  function parse_sty(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? parse_sty_bin : parse_sty_xml)(data, opts);\n  }\n\n  function parse_theme(data, name, opts) {\n    return parse_theme_xml(data, opts);\n  }\n\n  function parse_sst(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? parse_sst_bin : parse_sst_xml)(data, opts);\n  }\n\n  function parse_cmnt(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? parse_comments_bin : parse_comments_xml)(data, opts);\n  }\n\n  function parse_cc(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? parse_cc_bin : parse_cc_xml)(data, opts);\n  }\n\n  function write_wb(wb, name, opts) {\n    return (name.substr(-4) === \".bin\" ? write_wb_bin : write_wb_xml)(wb, opts);\n  }\n\n  function write_ws(data, name, opts, wb) {\n    return (name.substr(-4) === \".bin\" ? write_ws_bin : write_ws_xml)(data, opts, wb);\n  }\n\n  function write_sty(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? write_sty_bin : write_sty_xml)(data, opts);\n  }\n\n  function write_sst(data, name, opts) {\n    return (name.substr(-4) === \".bin\" ? write_sst_bin : write_sst_xml)(data, opts);\n  }\n  /*\n  function write_cmnt(data, name, opts) {\n  \treturn (name.substr(-4)===\".bin\" ? write_comments_bin : write_comments_xml)(data, opts);\n  }\n  \n  function write_cc(data, name, opts) {\n  \treturn (name.substr(-4)===\".bin\" ? write_cc_bin : write_cc_xml)(data, opts);\n  }\n  */\n\n\n  var attregexg2 = /([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\n  var attregex2 = /([\\w:]+)=((?:\")(?:[^\"]*)(?:\")|(?:')(?:[^']*)(?:'))/;\n\n  var _chr = function _chr(c) {\n    return String.fromCharCode(c);\n  };\n\n  function xlml_parsexmltag(tag, skip_root) {\n    var words = tag.split(/\\s+/);\n    var z = [];\n    if (!skip_root) z[0] = words[0];\n    if (words.length === 1) return z;\n    var m = tag.match(attregexg2),\n        y,\n        j,\n        w,\n        i;\n    if (m) for (i = 0; i != m.length; ++i) {\n      y = m[i].match(attregex2);\n      if ((j = y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].substr(1, y[2].length - 2);else {\n        if (y[1].substr(0, 6) === \"xmlns:\") w = \"xmlns\" + y[1].substr(6);else w = y[1].substr(j + 1);\n        z[w] = y[2].substr(1, y[2].length - 2);\n      }\n    }\n    return z;\n  }\n\n  function xlml_parsexmltagobj(tag) {\n    var words = tag.split(/\\s+/);\n    var z = {};\n    if (words.length === 1) return z;\n    var m = tag.match(attregexg2),\n        y,\n        j,\n        w,\n        i;\n    if (m) for (i = 0; i != m.length; ++i) {\n      y = m[i].match(attregex2);\n      if ((j = y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].substr(1, y[2].length - 2);else {\n        if (y[1].substr(0, 6) === \"xmlns:\") w = \"xmlns\" + y[1].substr(6);else w = y[1].substr(j + 1);\n        z[w] = y[2].substr(1, y[2].length - 2);\n      }\n    }\n    return z;\n  } // ----\n\n\n  function xlml_format(format, value) {\n    var fmt = XLMLFormatMap[format] || unescapexml(format);\n    if (fmt === \"General\") return SSF._general(value);\n    return SSF.format(fmt, value);\n  }\n\n  function xlml_set_custprop(Custprops, Rn, cp, val) {\n    switch ((cp[0].match(/dt:dt=\"([\\w.]+)\"/) || [\"\", \"\"])[1]) {\n      case \"boolean\":\n        val = parsexmlbool(val);\n        break;\n\n      case \"i2\":\n      case \"int\":\n        val = parseInt(val, 10);\n        break;\n\n      case \"r4\":\n      case \"float\":\n        val = parseFloat(val);\n        break;\n\n      case \"date\":\n      case \"dateTime.tz\":\n        val = new Date(val);\n        break;\n\n      case \"i8\":\n      case \"string\":\n      case \"fixed\":\n      case \"uuid\":\n      case \"bin.base64\":\n        break;\n\n      default:\n        throw \"bad custprop:\" + cp[0];\n    }\n\n    Custprops[unescapexml(Rn[3])] = val;\n  }\n\n  function safe_format_xlml(cell, nf, o) {\n    try {\n      if (cell.t === 'e') {\n        cell.w = cell.w || BErr[cell.v];\n      } else if (nf === \"General\") {\n        if (cell.t === 'n') {\n          if ((cell.v | 0) === cell.v) cell.w = SSF._general_int(cell.v);else cell.w = SSF._general_num(cell.v);\n        } else cell.w = SSF._general(cell.v);\n      } else cell.w = xlml_format(nf || \"General\", cell.v);\n\n      if (o.cellNF) cell.z = XLMLFormatMap[nf] || nf || \"General\";\n    } catch (e) {\n      if (o.WTF) throw e;\n    }\n  }\n\n  function process_style_xlml(styles, stag, opts) {\n    if (opts.cellStyles) {\n      if (stag.Interior) {\n        var I = stag.Interior;\n        if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;\n      }\n    }\n\n    styles[stag.ID] = stag;\n  }\n  /* TODO: there must exist some form of OSP-blessed spec */\n\n\n  function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, o) {\n    var nf = \"General\",\n        sid = cell.StyleID,\n        S = {};\n    o = o || {};\n    var interiors = [];\n    if (sid === undefined && row) sid = row.StyleID;\n    if (sid === undefined && csty) sid = csty.StyleID;\n\n    while (styles[sid] !== undefined) {\n      if (styles[sid].nf) nf = styles[sid].nf;\n      if (styles[sid].Interior) interiors.push(styles[sid].Interior);\n      if (!styles[sid].Parent) break;\n      sid = styles[sid].Parent;\n    }\n\n    switch (data.Type) {\n      case 'Boolean':\n        cell.t = 'b';\n        cell.v = parsexmlbool(xml);\n        break;\n\n      case 'String':\n        cell.t = 's';\n        cell.r = xlml_fixstr(unescapexml(xml));\n        cell.v = xml.indexOf(\"<\") > -1 ? ss : cell.r;\n        break;\n\n      case 'DateTime':\n        cell.v = (Date.parse(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n        if (cell.v !== cell.v) cell.v = unescapexml(xml);else if (cell.v >= 1 && cell.v < 60) cell.v = cell.v - 1;\n        if (!nf || nf == \"General\") nf = \"yyyy-mm-dd\";\n\n      /* falls through */\n\n      case 'Number':\n        if (cell.v === undefined) cell.v = +xml;\n        if (!cell.t) cell.t = 'n';\n        break;\n\n      case 'Error':\n        cell.t = 'e';\n        cell.v = RBErr[xml];\n        cell.w = xml;\n        break;\n\n      default:\n        cell.t = 's';\n        cell.v = xlml_fixstr(ss);\n        break;\n    }\n\n    safe_format_xlml(cell, nf, o);\n\n    if (o.cellFormula != null && cell.Formula) {\n      cell.f = rc_to_a1(unescapexml(cell.Formula), base);\n      cell.Formula = undefined;\n    }\n\n    if (o.cellStyles) {\n      interiors.forEach(function (x) {\n        if (!S.patternType && x.patternType) S.patternType = x.patternType;\n      });\n      cell.s = S;\n    }\n\n    cell.ixfe = cell.StyleID !== undefined ? cell.StyleID : 'Default';\n  }\n\n  function xlml_clean_comment(comment) {\n    comment.t = comment.v;\n    comment.v = comment.w = comment.ixfe = undefined;\n  }\n\n  function xlml_normalize(d) {\n    if (has_buf && Buffer.isBuffer(d)) return d.toString('utf8');\n    if (typeof d === 'string') return d;\n    throw \"badf\";\n  }\n  /* TODO: Everything */\n\n\n  var xlmlregex = /<(\\/?)([a-z0-9]*:|)(\\w+)[^>]*>/mg;\n\n  function parse_xlml_xml(d, opts) {\n    var str = xlml_normalize(d);\n    var Rn;\n    var state = [],\n        tmp;\n    var sheets = {},\n        sheetnames = [],\n        cursheet = {},\n        sheetname = \"\";\n    var table = {},\n        cell = {},\n        row = {},\n        dtag,\n        didx;\n    var c = 0,\n        r = 0;\n    var refguess = {\n      s: {\n        r: 1000000,\n        c: 1000000\n      },\n      e: {\n        r: 0,\n        c: 0\n      }\n    };\n    var styles = {},\n        stag = {};\n    var ss = \"\",\n        fidx = 0;\n    var mergecells = [];\n    var Props = {},\n        Custprops = {},\n        pidx = 0,\n        cp = {};\n    var comments = [],\n        comment = {};\n    var cstys = [],\n        csty;\n    xlmlregex.lastIndex = 0;\n\n    while (Rn = xlmlregex.exec(str)) {\n      switch (Rn[3]) {\n        case 'Data':\n          if (state[state.length - 1][1]) break;\n          if (Rn[1] === '/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == \"Comment\" ? comment : cell, {\n            c: c,\n            r: r\n          }, styles, cstys[c], row, opts);else {\n            ss = \"\";\n            dtag = xlml_parsexmltag(Rn[0]);\n            didx = Rn.index + Rn[0].length;\n          }\n          break;\n\n        case 'Cell':\n          if (Rn[1] === '/') {\n            if (comments.length > 0) cell.c = comments;\n            if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) cursheet[encode_col(c) + encode_row(r)] = cell;\n\n            if (cell.HRef) {\n              cell.l = {\n                Target: cell.HRef,\n                tooltip: cell.HRefScreenTip\n              };\n              cell.HRef = cell.HRefScreenTip = undefined;\n            }\n\n            if (cell.MergeAcross || cell.MergeDown) {\n              var cc = c + (parseInt(cell.MergeAcross, 10) | 0);\n              var rr = r + (parseInt(cell.MergeDown, 10) | 0);\n              mergecells.push({\n                s: {\n                  c: c,\n                  r: r\n                },\n                e: {\n                  c: cc,\n                  r: rr\n                }\n              });\n            }\n\n            ++c;\n            if (cell.MergeAcross) c += +cell.MergeAcross;\n          } else {\n            cell = xlml_parsexmltagobj(Rn[0]);\n            if (cell.Index) c = +cell.Index - 1;\n            if (c < refguess.s.c) refguess.s.c = c;\n            if (c > refguess.e.c) refguess.e.c = c;\n            if (Rn[0].substr(-2) === \"/>\") ++c;\n            comments = [];\n          }\n\n          break;\n\n        case 'Row':\n          if (Rn[1] === '/' || Rn[0].substr(-2) === \"/>\") {\n            if (r < refguess.s.r) refguess.s.r = r;\n            if (r > refguess.e.r) refguess.e.r = r;\n\n            if (Rn[0].substr(-2) === \"/>\") {\n              row = xlml_parsexmltag(Rn[0]);\n              if (row.Index) r = +row.Index - 1;\n            }\n\n            c = 0;\n            ++r;\n          } else {\n            row = xlml_parsexmltag(Rn[0]);\n            if (row.Index) r = +row.Index - 1;\n          }\n\n          break;\n\n        case 'Worksheet':\n          /* TODO: read range from FullRows/FullColumns */\n          if (Rn[1] === '/') {\n            if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n            sheetnames.push(sheetname);\n            if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) cursheet[\"!ref\"] = encode_range(refguess);\n            if (mergecells.length) cursheet[\"!merges\"] = mergecells;\n            sheets[sheetname] = cursheet;\n          } else {\n            refguess = {\n              s: {\n                r: 1000000,\n                c: 1000000\n              },\n              e: {\n                r: 0,\n                c: 0\n              }\n            };\n            r = c = 0;\n            state.push([Rn[3], false]);\n            tmp = xlml_parsexmltag(Rn[0]);\n            sheetname = tmp.Name;\n            cursheet = {};\n            mergecells = [];\n          }\n\n          break;\n\n        case 'Table':\n          if (Rn[1] === '/') {\n            if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n          } else if (Rn[0].slice(-2) == \"/>\") break;else {\n            table = xlml_parsexmltag(Rn[0]);\n            state.push([Rn[3], false]);\n            cstys = [];\n          }\n\n          break;\n\n        case 'Style':\n          if (Rn[1] === '/') process_style_xlml(styles, stag, opts);else stag = xlml_parsexmltag(Rn[0]);\n          break;\n\n        case 'NumberFormat':\n          stag.nf = xlml_parsexmltag(Rn[0]).Format || \"General\";\n          break;\n\n        case 'Column':\n          if (state[state.length - 1][0] !== 'Table') break;\n          csty = xlml_parsexmltag(Rn[0]);\n          cstys[csty.Index - 1 || cstys.length] = csty;\n\n          for (var i = 0; i < +csty.Span; ++i) {\n            cstys[cstys.length] = csty;\n          }\n\n          break;\n\n        case 'NamedRange':\n          break;\n\n        case 'NamedCell':\n          break;\n\n        case 'B':\n          break;\n\n        case 'I':\n          break;\n\n        case 'U':\n          break;\n\n        case 'S':\n          break;\n\n        case 'Sub':\n          break;\n\n        case 'Sup':\n          break;\n\n        case 'Span':\n          break;\n\n        case 'Border':\n          break;\n\n        case 'Alignment':\n          break;\n\n        case 'Borders':\n          break;\n\n        case 'Font':\n          if (Rn[0].substr(-2) === \"/>\") break;else if (Rn[1] === \"/\") ss += str.slice(fidx, Rn.index);else fidx = Rn.index + Rn[0].length;\n          break;\n\n        case 'Interior':\n          if (!opts.cellStyles) break;\n          stag.Interior = xlml_parsexmltag(Rn[0]);\n          break;\n\n        case 'Protection':\n          break;\n\n        case 'Author':\n        case 'Title':\n        case 'Description':\n        case 'Created':\n        case 'Keywords':\n        case 'Subject':\n        case 'Category':\n        case 'Company':\n        case 'LastAuthor':\n        case 'LastSaved':\n        case 'LastPrinted':\n        case 'Version':\n        case 'Revision':\n        case 'TotalTime':\n        case 'HyperlinkBase':\n        case 'Manager':\n          if (Rn[0].substr(-2) === \"/>\") break;else if (Rn[1] === \"/\") xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index));else pidx = Rn.index + Rn[0].length;\n          break;\n\n        case 'Paragraphs':\n          break;\n\n        case 'Styles':\n        case 'Workbook':\n          if (Rn[1] === '/') {\n            if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n          } else state.push([Rn[3], false]);\n\n          break;\n\n        case 'Comment':\n          if (Rn[1] === '/') {\n            if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n            xlml_clean_comment(comment);\n            comments.push(comment);\n          } else {\n            state.push([Rn[3], false]);\n            tmp = xlml_parsexmltag(Rn[0]);\n            comment = {\n              a: tmp.Author\n            };\n          }\n\n          break;\n\n        case 'Name':\n          break;\n\n        case 'ComponentOptions':\n        case 'DocumentProperties':\n        case 'CustomDocumentProperties':\n        case 'OfficeDocumentSettings':\n        case 'PivotTable':\n        case 'PivotCache':\n        case 'Names':\n        case 'MapInfo':\n        case 'PageBreaks':\n        case 'QueryTable':\n        case 'DataValidation':\n        case 'AutoFilter':\n        case 'Sorting':\n        case 'Schema':\n        case 'data':\n        case 'ConditionalFormatting':\n        case 'SmartTagType':\n        case 'SmartTags':\n        case 'ExcelWorkbook':\n        case 'WorkbookOptions':\n        case 'WorksheetOptions':\n          if (Rn[1] === '/') {\n            if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);\n\n          break;\n\n        default:\n          var seen = true;\n\n          switch (state[state.length - 1][0]) {\n            /* OfficeDocumentSettings */\n            case 'OfficeDocumentSettings':\n              switch (Rn[3]) {\n                case 'AllowPNG':\n                  break;\n\n                case 'RemovePersonalInformation':\n                  break;\n\n                case 'DownloadComponents':\n                  break;\n\n                case 'LocationOfComponents':\n                  break;\n\n                case 'Colors':\n                  break;\n\n                case 'Color':\n                  break;\n\n                case 'Index':\n                  break;\n\n                case 'RGB':\n                  break;\n\n                case 'PixelsPerInch':\n                  break;\n\n                case 'TargetScreenSize':\n                  break;\n\n                case 'ReadOnlyRecommended':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* ComponentOptions */\n\n            case 'ComponentOptions':\n              switch (Rn[3]) {\n                case 'Toolbar':\n                  break;\n\n                case 'HideOfficeLogo':\n                  break;\n\n                case 'SpreadsheetAutoFit':\n                  break;\n\n                case 'Label':\n                  break;\n\n                case 'Caption':\n                  break;\n\n                case 'MaxHeight':\n                  break;\n\n                case 'MaxWidth':\n                  break;\n\n                case 'NextSheetNumber':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* ExcelWorkbook */\n\n            case 'ExcelWorkbook':\n              switch (Rn[3]) {\n                case 'WindowHeight':\n                  break;\n\n                case 'WindowWidth':\n                  break;\n\n                case 'WindowTopX':\n                  break;\n\n                case 'WindowTopY':\n                  break;\n\n                case 'TabRatio':\n                  break;\n\n                case 'ProtectStructure':\n                  break;\n\n                case 'ProtectWindows':\n                  break;\n\n                case 'ActiveSheet':\n                  break;\n\n                case 'DisplayInkNotes':\n                  break;\n\n                case 'FirstVisibleSheet':\n                  break;\n\n                case 'SupBook':\n                  break;\n\n                case 'SheetName':\n                  break;\n\n                case 'SheetIndex':\n                  break;\n\n                case 'SheetIndexFirst':\n                  break;\n\n                case 'SheetIndexLast':\n                  break;\n\n                case 'Dll':\n                  break;\n\n                case 'AcceptLabelsInFormulas':\n                  break;\n\n                case 'DoNotSaveLinkValues':\n                  break;\n\n                case 'Date1904':\n                  break;\n\n                case 'Iteration':\n                  break;\n\n                case 'MaxIterations':\n                  break;\n\n                case 'MaxChange':\n                  break;\n\n                case 'Path':\n                  break;\n\n                case 'Xct':\n                  break;\n\n                case 'Count':\n                  break;\n\n                case 'SelectedSheets':\n                  break;\n\n                case 'Calculation':\n                  break;\n\n                case 'Uncalced':\n                  break;\n\n                case 'StartupPrompt':\n                  break;\n\n                case 'Crn':\n                  break;\n\n                case 'ExternName':\n                  break;\n\n                case 'Formula':\n                  break;\n\n                case 'ColFirst':\n                  break;\n\n                case 'ColLast':\n                  break;\n\n                case 'WantAdvise':\n                  break;\n\n                case 'Boolean':\n                  break;\n\n                case 'Error':\n                  break;\n\n                case 'Text':\n                  break;\n\n                case 'OLE':\n                  break;\n\n                case 'NoAutoRecover':\n                  break;\n\n                case 'PublishObjects':\n                  break;\n\n                case 'DoNotCalculateBeforeSave':\n                  break;\n\n                case 'Number':\n                  break;\n\n                case 'RefModeR1C1':\n                  break;\n\n                case 'EmbedSaveSmartTags':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* WorkbookOptions */\n\n            case 'WorkbookOptions':\n              switch (Rn[3]) {\n                case 'OWCVersion':\n                  break;\n\n                case 'Height':\n                  break;\n\n                case 'Width':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* WorksheetOptions */\n\n            case 'WorksheetOptions':\n              switch (Rn[3]) {\n                case 'Unsynced':\n                  break;\n\n                case 'Visible':\n                  break;\n\n                case 'Print':\n                  break;\n\n                case 'Panes':\n                  break;\n\n                case 'Scale':\n                  break;\n\n                case 'Pane':\n                  break;\n\n                case 'Number':\n                  break;\n\n                case 'Layout':\n                  break;\n\n                case 'Header':\n                  break;\n\n                case 'Footer':\n                  break;\n\n                case 'PageSetup':\n                  break;\n\n                case 'PageMargins':\n                  break;\n\n                case 'Selected':\n                  break;\n\n                case 'ProtectObjects':\n                  break;\n\n                case 'EnableSelection':\n                  break;\n\n                case 'ProtectScenarios':\n                  break;\n\n                case 'ValidPrinterInfo':\n                  break;\n\n                case 'HorizontalResolution':\n                  break;\n\n                case 'VerticalResolution':\n                  break;\n\n                case 'NumberofCopies':\n                  break;\n\n                case 'ActiveRow':\n                  break;\n\n                case 'ActiveCol':\n                  break;\n\n                case 'ActivePane':\n                  break;\n\n                case 'TopRowVisible':\n                  break;\n\n                case 'TopRowBottomPane':\n                  break;\n\n                case 'LeftColumnVisible':\n                  break;\n\n                case 'LeftColumnRightPane':\n                  break;\n\n                case 'FitToPage':\n                  break;\n\n                case 'RangeSelection':\n                  break;\n\n                case 'PaperSizeIndex':\n                  break;\n\n                case 'PageLayoutZoom':\n                  break;\n\n                case 'PageBreakZoom':\n                  break;\n\n                case 'FilterOn':\n                  break;\n\n                case 'DoNotDisplayGridlines':\n                  break;\n\n                case 'SplitHorizontal':\n                  break;\n\n                case 'SplitVertical':\n                  break;\n\n                case 'FreezePanes':\n                  break;\n\n                case 'FrozenNoSplit':\n                  break;\n\n                case 'FitWidth':\n                  break;\n\n                case 'FitHeight':\n                  break;\n\n                case 'CommentsLayout':\n                  break;\n\n                case 'Zoom':\n                  break;\n\n                case 'LeftToRight':\n                  break;\n\n                case 'Gridlines':\n                  break;\n\n                case 'AllowSort':\n                  break;\n\n                case 'AllowFilter':\n                  break;\n\n                case 'AllowInsertRows':\n                  break;\n\n                case 'AllowDeleteRows':\n                  break;\n\n                case 'AllowInsertCols':\n                  break;\n\n                case 'AllowDeleteCols':\n                  break;\n\n                case 'AllowInsertHyperlinks':\n                  break;\n\n                case 'AllowFormatCells':\n                  break;\n\n                case 'AllowSizeCols':\n                  break;\n\n                case 'AllowSizeRows':\n                  break;\n\n                case 'NoSummaryRowsBelowDetail':\n                  break;\n\n                case 'TabColorIndex':\n                  break;\n\n                case 'DoNotDisplayHeadings':\n                  break;\n\n                case 'ShowPageLayoutZoom':\n                  break;\n\n                case 'NoSummaryColumnsRightDetail':\n                  break;\n\n                case 'BlackAndWhite':\n                  break;\n\n                case 'DoNotDisplayZeros':\n                  break;\n\n                case 'DisplayPageBreak':\n                  break;\n\n                case 'RowColHeadings':\n                  break;\n\n                case 'DoNotDisplayOutline':\n                  break;\n\n                case 'NoOrientation':\n                  break;\n\n                case 'AllowUsePivotTables':\n                  break;\n\n                case 'ZeroHeight':\n                  break;\n\n                case 'ViewableRange':\n                  break;\n\n                case 'Selection':\n                  break;\n\n                case 'ProtectContents':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* PivotTable */\n\n            case 'PivotTable':\n            case 'PivotCache':\n              switch (Rn[3]) {\n                case 'ImmediateItemsOnDrop':\n                  break;\n\n                case 'ShowPageMultipleItemLabel':\n                  break;\n\n                case 'CompactRowIndent':\n                  break;\n\n                case 'Location':\n                  break;\n\n                case 'PivotField':\n                  break;\n\n                case 'Orientation':\n                  break;\n\n                case 'LayoutForm':\n                  break;\n\n                case 'LayoutSubtotalLocation':\n                  break;\n\n                case 'LayoutCompactRow':\n                  break;\n\n                case 'Position':\n                  break;\n\n                case 'PivotItem':\n                  break;\n\n                case 'DataType':\n                  break;\n\n                case 'DataField':\n                  break;\n\n                case 'SourceName':\n                  break;\n\n                case 'ParentField':\n                  break;\n\n                case 'PTLineItems':\n                  break;\n\n                case 'PTLineItem':\n                  break;\n\n                case 'CountOfSameItems':\n                  break;\n\n                case 'Item':\n                  break;\n\n                case 'ItemType':\n                  break;\n\n                case 'PTSource':\n                  break;\n\n                case 'CacheIndex':\n                  break;\n\n                case 'ConsolidationReference':\n                  break;\n\n                case 'FileName':\n                  break;\n\n                case 'Reference':\n                  break;\n\n                case 'NoColumnGrand':\n                  break;\n\n                case 'NoRowGrand':\n                  break;\n\n                case 'BlankLineAfterItems':\n                  break;\n\n                case 'Hidden':\n                  break;\n\n                case 'Subtotal':\n                  break;\n\n                case 'BaseField':\n                  break;\n\n                case 'MapChildItems':\n                  break;\n\n                case 'Function':\n                  break;\n\n                case 'RefreshOnFileOpen':\n                  break;\n\n                case 'PrintSetTitles':\n                  break;\n\n                case 'MergeLabels':\n                  break;\n\n                case 'DefaultVersion':\n                  break;\n\n                case 'RefreshName':\n                  break;\n\n                case 'RefreshDate':\n                  break;\n\n                case 'RefreshDateCopy':\n                  break;\n\n                case 'VersionLastRefresh':\n                  break;\n\n                case 'VersionLastUpdate':\n                  break;\n\n                case 'VersionUpdateableMin':\n                  break;\n\n                case 'VersionRefreshableMin':\n                  break;\n\n                case 'Calculation':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* PageBreaks */\n\n            case 'PageBreaks':\n              switch (Rn[3]) {\n                case 'ColBreaks':\n                  break;\n\n                case 'ColBreak':\n                  break;\n\n                case 'RowBreaks':\n                  break;\n\n                case 'RowBreak':\n                  break;\n\n                case 'ColStart':\n                  break;\n\n                case 'ColEnd':\n                  break;\n\n                case 'RowEnd':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* AutoFilter */\n\n            case 'AutoFilter':\n              switch (Rn[3]) {\n                case 'AutoFilterColumn':\n                  break;\n\n                case 'AutoFilterCondition':\n                  break;\n\n                case 'AutoFilterAnd':\n                  break;\n\n                case 'AutoFilterOr':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* QueryTable */\n\n            case 'QueryTable':\n              switch (Rn[3]) {\n                case 'Id':\n                  break;\n\n                case 'AutoFormatFont':\n                  break;\n\n                case 'AutoFormatPattern':\n                  break;\n\n                case 'QuerySource':\n                  break;\n\n                case 'QueryType':\n                  break;\n\n                case 'EnableRedirections':\n                  break;\n\n                case 'RefreshedInXl9':\n                  break;\n\n                case 'URLString':\n                  break;\n\n                case 'HTMLTables':\n                  break;\n\n                case 'Connection':\n                  break;\n\n                case 'CommandText':\n                  break;\n\n                case 'RefreshInfo':\n                  break;\n\n                case 'NoTitles':\n                  break;\n\n                case 'NextId':\n                  break;\n\n                case 'ColumnInfo':\n                  break;\n\n                case 'OverwriteCells':\n                  break;\n\n                case 'DoNotPromptForFile':\n                  break;\n\n                case 'TextWizardSettings':\n                  break;\n\n                case 'Source':\n                  break;\n\n                case 'Number':\n                  break;\n\n                case 'Decimal':\n                  break;\n\n                case 'ThousandSeparator':\n                  break;\n\n                case 'TrailingMinusNumbers':\n                  break;\n\n                case 'FormatSettings':\n                  break;\n\n                case 'FieldType':\n                  break;\n\n                case 'Delimiters':\n                  break;\n\n                case 'Tab':\n                  break;\n\n                case 'Comma':\n                  break;\n\n                case 'AutoFormatName':\n                  break;\n\n                case 'VersionLastEdit':\n                  break;\n\n                case 'VersionLastRefresh':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* Sorting */\n\n            case 'Sorting':\n            /* ConditionalFormatting */\n\n            case 'ConditionalFormatting':\n            /* DataValidation */\n\n            case 'DataValidation':\n              switch (Rn[3]) {\n                case 'Range':\n                  break;\n\n                case 'Type':\n                  break;\n\n                case 'Min':\n                  break;\n\n                case 'Max':\n                  break;\n\n                case 'Sort':\n                  break;\n\n                case 'Descending':\n                  break;\n\n                case 'Order':\n                  break;\n\n                case 'CaseSensitive':\n                  break;\n\n                case 'Value':\n                  break;\n\n                case 'ErrorStyle':\n                  break;\n\n                case 'ErrorMessage':\n                  break;\n\n                case 'ErrorTitle':\n                  break;\n\n                case 'CellRangeList':\n                  break;\n\n                case 'InputMessage':\n                  break;\n\n                case 'InputTitle':\n                  break;\n\n                case 'ComboHide':\n                  break;\n\n                case 'InputHide':\n                  break;\n\n                case 'Condition':\n                  break;\n\n                case 'Qualifier':\n                  break;\n\n                case 'UseBlank':\n                  break;\n\n                case 'Value1':\n                  break;\n\n                case 'Value2':\n                  break;\n\n                case 'Format':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* MapInfo (schema) */\n\n            case 'MapInfo':\n            case 'Schema':\n            case 'data':\n              switch (Rn[3]) {\n                case 'Map':\n                  break;\n\n                case 'Entry':\n                  break;\n\n                case 'Range':\n                  break;\n\n                case 'XPath':\n                  break;\n\n                case 'Field':\n                  break;\n\n                case 'XSDType':\n                  break;\n\n                case 'FilterOn':\n                  break;\n\n                case 'Aggregate':\n                  break;\n\n                case 'ElementType':\n                  break;\n\n                case 'AttributeType':\n                  break;\n\n                /* These are from xsd (XML Schema Definition) */\n\n                case 'schema':\n                case 'element':\n                case 'complexType':\n                case 'datatype':\n                case 'all':\n                case 'attribute':\n                case 'extends':\n                  break;\n\n                case 'row':\n                  break;\n\n                default:\n                  seen = false;\n              }\n\n              break;\n\n            /* SmartTags (can be anything) */\n\n            case 'SmartTags':\n              break;\n\n            default:\n              seen = false;\n              break;\n          }\n\n          if (seen) break;\n          /* CustomDocumentProperties */\n\n          if (!state[state.length - 1][1]) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\n          if (state[state.length - 1][0] === 'CustomDocumentProperties') {\n            if (Rn[0].substr(-2) === \"/>\") break;else if (Rn[1] === \"/\") xlml_set_custprop(Custprops, Rn, cp, str.slice(pidx, Rn.index));else {\n              cp = Rn;\n              pidx = Rn.index + Rn[0].length;\n            }\n            break;\n          }\n\n          if (opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n      }\n    }\n\n    var out = {};\n    if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;\n    out.SheetNames = sheetnames;\n    out.SSF = SSF.get_table();\n    out.Props = Props;\n    out.Custprops = Custprops;\n    return out;\n  }\n\n  function parse_xlml(data, opts) {\n    fix_read_opts(opts = opts || {});\n\n    switch (opts.type || \"base64\") {\n      case \"base64\":\n        return parse_xlml_xml(Base64.decode(data), opts);\n\n      case \"binary\":\n      case \"buffer\":\n      case \"file\":\n        return parse_xlml_xml(data, opts);\n\n      case \"array\":\n        return parse_xlml_xml(data.map(_chr).join(\"\"), opts);\n    }\n  }\n\n  function write_xlml(wb, opts) {}\n  /* [MS-OLEDS] 2.3.8 CompObjStream */\n\n\n  function parse_compobj(obj) {\n    var v = {};\n    var o = obj.content;\n    /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */\n\n    var l = 28,\n        m;\n    m = __lpstr(o, l);\n    l += 4 + __readUInt32LE(o, l);\n    v.UserType = m;\n    /* [MS-OLEDS] 2.3.1 ClipboardFormatOrAnsiString */\n\n    m = __readUInt32LE(o, l);\n    l += 4;\n\n    switch (m) {\n      case 0x00000000:\n        break;\n\n      case 0xffffffff:\n      case 0xfffffffe:\n        l += 4;\n        break;\n\n      default:\n        if (m > 0x190) throw new Error(\"Unsupported Clipboard: \" + m.toString(16));\n        l += m;\n    }\n\n    m = __lpstr(o, l);\n    l += m.length === 0 ? 0 : 5 + m.length;\n    v.Reserved1 = m;\n    if ((m = __readUInt32LE(o, l)) !== 0x71b2e9f4) return v;\n    throw \"Unsupported Unicode Extension\";\n  }\n  /* 2.4.58 Continue logic */\n\n\n  function slurp(R, blob, length, opts) {\n    var l = length;\n    var bufs = [];\n    var d = blob.slice(blob.l, blob.l + l);\n    if (opts && opts.enc && opts.enc.insitu_decrypt) switch (R.n) {\n      case 'BOF':\n      case 'FilePass':\n      case 'FileLock':\n      case 'InterfaceHdr':\n      case 'RRDInfo':\n      case 'RRDHead':\n      case 'UsrExcl':\n        break;\n\n      default:\n        if (d.length === 0) break;\n        opts.enc.insitu_decrypt(d);\n    }\n    bufs.push(d);\n    blob.l += l;\n\n    var next = XLSRecordEnum[__readUInt16LE(blob, blob.l)];\n\n    while (next != null && next.n === 'Continue') {\n      l = __readUInt16LE(blob, blob.l + 2);\n      bufs.push(blob.slice(blob.l + 4, blob.l + 4 + l));\n      blob.l += 4 + l;\n      next = XLSRecordEnum[__readUInt16LE(blob, blob.l)];\n    }\n\n    var b = bconcat(bufs);\n    prep_blob(b, 0);\n    var ll = 0;\n    b.lens = [];\n\n    for (var j = 0; j < bufs.length; ++j) {\n      b.lens.push(ll);\n      ll += bufs[j].length;\n    }\n\n    return R.f(b, b.length, opts);\n  }\n\n  function safe_format_xf(p, opts, date1904) {\n    if (!p.XF) return;\n\n    try {\n      var fmtid = p.XF.ifmt || 0;\n\n      if (p.t === 'e') {\n        p.w = p.w || BErr[p.v];\n      } else if (fmtid === 0) {\n        if (p.t === 'n') {\n          if ((p.v | 0) === p.v) p.w = SSF._general_int(p.v);else p.w = SSF._general_num(p.v);\n        } else p.w = SSF._general(p.v);\n      } else p.w = SSF.format(fmtid, p.v, {\n        date1904: date1904 || false\n      });\n\n      if (opts.cellNF) p.z = SSF._table[fmtid];\n    } catch (e) {\n      if (opts.WTF) throw e;\n    }\n  }\n\n  function make_cell(val, ixfe, t) {\n    return {\n      v: val,\n      ixfe: ixfe,\n      t: t\n    };\n  } // 2.3.2\n\n\n  function parse_workbook(blob, options) {\n    var wb = {\n      opts: {}\n    };\n    var Sheets = {};\n    var out = {};\n    var Directory = {};\n    var found_sheet = false;\n    var range = {};\n    var last_formula = null;\n    var sst = [];\n    var cur_sheet = \"\";\n    var Preamble = {};\n    var lastcell, last_cell, cc, cmnt, rng, rngC, rngR;\n    var shared_formulae = {};\n    var array_formulae = [];\n    /* TODO: something more clever */\n\n    var temp_val;\n    var country;\n    var cell_valid = true;\n    var XFs = [];\n    /* XF records */\n\n    var palette = [];\n\n    var get_rgb = function getrgb(icv) {\n      if (icv < 8) return XLSIcv[icv];\n      if (icv < 64) return palette[icv - 8] || XLSIcv[icv];\n      return XLSIcv[icv];\n    };\n\n    var process_cell_style = function pcs(cell, line) {\n      var xfd = line.XF.data;\n      if (!xfd || !xfd.patternType) return;\n      line.s = {};\n      line.s.patternType = xfd.patternType;\n      var t;\n\n      if (t = rgb2Hex(get_rgb(xfd.icvFore))) {\n        line.s.fgColor = {\n          rgb: t\n        };\n      }\n\n      if (t = rgb2Hex(get_rgb(xfd.icvBack))) {\n        line.s.bgColor = {\n          rgb: t\n        };\n      }\n    };\n\n    var addcell = function addcell(cell, line, options) {\n      if (!cell_valid) return;\n      if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line);\n      lastcell = cell;\n      last_cell = encode_cell(cell);\n\n      if (range.s) {\n        if (cell.r < range.s.r) range.s.r = cell.r;\n        if (cell.c < range.s.c) range.s.c = cell.c;\n      }\n\n      if (range.e) {\n        if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;\n        if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;\n      }\n\n      if (options.sheetRows && lastcell.r >= options.sheetRows) cell_valid = false;else out[last_cell] = line;\n    };\n\n    var opts = {\n      enc: false,\n      // encrypted\n      sbcch: 0,\n      // cch in the preceding SupBook\n      snames: [],\n      // sheetnames\n      sharedf: shared_formulae,\n      // shared formulae by address\n      arrayf: array_formulae,\n      // array formulae array\n      rrtabid: [],\n      // RRTabId\n      lastuser: \"\",\n      // Last User from WriteAccess\n      biff: 8,\n      // BIFF version\n      codepage: 0,\n      // CP from CodePage record\n      winlocked: 0,\n      // fLockWn from WinProtect\n      wtf: false\n    };\n    if (options.password) opts.password = options.password;\n    var mergecells = [];\n    var objects = [];\n    var supbooks = [[]]; // 1-indexed, will hold extern names\n\n    var sbc = 0,\n        sbci = 0,\n        sbcli = 0;\n    supbooks.SheetNames = opts.snames;\n    supbooks.sharedf = opts.sharedf;\n    supbooks.arrayf = opts.arrayf;\n    var last_Rn = '';\n    var file_depth = 0;\n    /* TODO: make a real stack */\n\n    /* explicit override for some broken writers */\n\n    opts.codepage = 1200;\n    set_cp(1200);\n\n    while (blob.l < blob.length - 1) {\n      var s = blob.l;\n      var RecordType = blob.read_shift(2);\n      if (RecordType === 0 && last_Rn === 'EOF') break;\n      var length = blob.l === blob.length ? 0 : blob.read_shift(2),\n          y;\n      var R = XLSRecordEnum[RecordType];\n\n      if (R && R.f) {\n        if (options.bookSheets) {\n          if (last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;\n        }\n\n        last_Rn = R.n;\n\n        if (R.r === 2 || R.r == 12) {\n          var rt = blob.read_shift(2);\n          length -= 2;\n          if (!opts.enc && rt !== RecordType) throw \"rt mismatch\";\n\n          if (R.r == 12) {\n            blob.l += 10;\n            length -= 10;\n          } // skip FRT\n\n        } //console.error(R,blob.l,length,blob.length);\n\n\n        var val;\n        if (R.n === 'EOF') val = R.f(blob, length, opts);else val = slurp(R, blob, length, opts);\n        var Rn = R.n;\n        /* BIFF5 overrides */\n\n        if (opts.biff === 5 || opts.biff === 2) switch (Rn) {\n          case 'Lbl':\n            Rn = 'Label';\n            break;\n        }\n        /* nested switch statements to workaround V8 128 limit */\n\n        switch (Rn) {\n          /* Workbook Options */\n          case 'Date1904':\n            wb.opts.Date1904 = val;\n            break;\n\n          case 'WriteProtect':\n            wb.opts.WriteProtect = true;\n            break;\n\n          case 'FilePass':\n            if (!opts.enc) blob.l = 0;\n            opts.enc = val;\n            if (opts.WTF) console.error(val);\n            if (!options.password) throw new Error(\"File is password-protected\");\n            if (val.Type !== 0) throw new Error(\"Encryption scheme unsupported\");\n            if (!val.valid) throw new Error(\"Password is incorrect\");\n            break;\n\n          case 'WriteAccess':\n            opts.lastuser = val;\n            break;\n\n          case 'FileSharing':\n            break;\n          //TODO\n\n          case 'CodePage':\n            /* overrides based on test cases */\n            if (val === 0x5212) val = 1200;else if (val === 0x8001) val = 1252;\n            opts.codepage = val;\n            set_cp(val);\n            break;\n\n          case 'RRTabId':\n            opts.rrtabid = val;\n            break;\n\n          case 'WinProtect':\n            opts.winlocked = val;\n            break;\n\n          case 'Template':\n            break;\n          // TODO\n\n          case 'RefreshAll':\n            wb.opts.RefreshAll = val;\n            break;\n\n          case 'BookBool':\n            break;\n          // TODO\n\n          case 'UsesELFs':\n            /* if(val) console.error(\"Unsupported ELFs\"); */\n            break;\n\n          case 'MTRSettings':\n            {\n              if (val[0] && val[1]) throw \"Unsupported threads: \" + val;\n            }\n            break;\n          // TODO: actually support threads\n\n          case 'CalcCount':\n            wb.opts.CalcCount = val;\n            break;\n\n          case 'CalcDelta':\n            wb.opts.CalcDelta = val;\n            break;\n\n          case 'CalcIter':\n            wb.opts.CalcIter = val;\n            break;\n\n          case 'CalcMode':\n            wb.opts.CalcMode = val;\n            break;\n\n          case 'CalcPrecision':\n            wb.opts.CalcPrecision = val;\n            break;\n\n          case 'CalcSaveRecalc':\n            wb.opts.CalcSaveRecalc = val;\n            break;\n\n          case 'CalcRefMode':\n            opts.CalcRefMode = val;\n            break;\n          // TODO: implement R1C1\n\n          case 'Uncalced':\n            break;\n\n          case 'ForceFullCalculation':\n            wb.opts.FullCalc = val;\n            break;\n\n          case 'WsBool':\n            break;\n          // TODO\n\n          case 'XF':\n            XFs.push(val);\n            break;\n\n          case 'ExtSST':\n            break;\n          // TODO\n\n          case 'BookExt':\n            break;\n          // TODO\n\n          case 'RichTextStream':\n            break;\n\n          case 'BkHim':\n            break;\n\n          case 'SupBook':\n            supbooks[++sbc] = [val];\n            sbci = 0;\n            break;\n\n          case 'ExternName':\n            supbooks[sbc][++sbci] = val;\n            break;\n\n          case 'Index':\n            break;\n          // TODO\n\n          case 'Lbl':\n            supbooks[0][++sbcli] = val;\n            break;\n\n          case 'ExternSheet':\n            supbooks[sbc] = supbooks[sbc].concat(val);\n            sbci += val.length;\n            break;\n\n          case 'Protect':\n            out[\"!protect\"] = val;\n            break;\n\n          /* for sheet or book */\n\n          case 'Password':\n            if (val !== 0 && opts.WTF) console.error(\"Password verifier: \" + val);\n            break;\n\n          case 'Prot4Rev':\n          case 'Prot4RevPass':\n            break;\n\n          /*TODO: Revision Control*/\n\n          case 'BoundSheet8':\n            {\n              Directory[val.pos] = val;\n              opts.snames.push(val.name);\n            }\n            break;\n\n          case 'EOF':\n            {\n              if (--file_depth) break;\n\n              if (range.e) {\n                out[\"!range\"] = range;\n\n                if (range.e.r > 0 && range.e.c > 0) {\n                  range.e.r--;\n                  range.e.c--;\n                  out[\"!ref\"] = encode_range(range);\n                  range.e.r++;\n                  range.e.c++;\n                }\n\n                if (mergecells.length > 0) out[\"!merges\"] = mergecells;\n                if (objects.length > 0) out[\"!objects\"] = objects;\n              }\n\n              if (cur_sheet === \"\") Preamble = out;else Sheets[cur_sheet] = out;\n              out = {};\n            }\n            break;\n\n          case 'BOF':\n            {\n              if (opts.biff !== 8) ;else if (val.BIFFVer === 0x0500) opts.biff = 5;else if (val.BIFFVer === 0x0002) opts.biff = 2;else if (val.BIFFVer === 0x0007) opts.biff = 2;\n              if (file_depth++) break;\n              cell_valid = true;\n              out = {};\n\n              if (opts.biff === 2) {\n                if (cur_sheet === \"\") cur_sheet = \"Sheet1\";\n                range = {\n                  s: {\n                    r: 0,\n                    c: 0\n                  },\n                  e: {\n                    r: 0,\n                    c: 0\n                  }\n                };\n              } else cur_sheet = (Directory[s] || {\n                name: \"\"\n              }).name;\n\n              mergecells = [];\n              objects = [];\n            }\n            break;\n\n          case 'Number':\n          case 'BIFF2NUM':\n            {\n              temp_val = {\n                ixfe: val.ixfe,\n                XF: XFs[val.ixfe],\n                v: val.val,\n                t: 'n'\n              };\n              if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n              addcell({\n                c: val.c,\n                r: val.r\n              }, temp_val, options);\n            }\n            break;\n\n          case 'BoolErr':\n            {\n              temp_val = {\n                ixfe: val.ixfe,\n                XF: XFs[val.ixfe],\n                v: val.val,\n                t: val.t\n              };\n              if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n              addcell({\n                c: val.c,\n                r: val.r\n              }, temp_val, options);\n            }\n            break;\n\n          case 'RK':\n            {\n              temp_val = {\n                ixfe: val.ixfe,\n                XF: XFs[val.ixfe],\n                v: val.rknum,\n                t: 'n'\n              };\n              if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n              addcell({\n                c: val.c,\n                r: val.r\n              }, temp_val, options);\n            }\n            break;\n\n          case 'MulRk':\n            {\n              for (var j = val.c; j <= val.C; ++j) {\n                var ixfe = val.rkrec[j - val.c][0];\n                temp_val = {\n                  ixfe: ixfe,\n                  XF: XFs[ixfe],\n                  v: val.rkrec[j - val.c][1],\n                  t: 'n'\n                };\n                if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n                addcell({\n                  c: j,\n                  r: val.r\n                }, temp_val, options);\n              }\n            }\n            break;\n\n          case 'Formula':\n            {\n              switch (val.val) {\n                case 'String':\n                  last_formula = val;\n                  break;\n\n                case 'Array Formula':\n                  throw \"Array Formula unsupported\";\n\n                default:\n                  temp_val = {\n                    v: val.val,\n                    ixfe: val.cell.ixfe,\n                    t: val.tt\n                  };\n                  temp_val.XF = XFs[temp_val.ixfe];\n                  if (options.cellFormula) temp_val.f = \"=\" + stringify_formula(val.formula, range, val.cell, supbooks, opts);\n                  if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n                  addcell(val.cell, temp_val, options);\n                  last_formula = val;\n              }\n            }\n            break;\n\n          case 'String':\n            {\n              if (last_formula) {\n                last_formula.val = val;\n                temp_val = {\n                  v: last_formula.val,\n                  ixfe: last_formula.cell.ixfe,\n                  t: 's'\n                };\n                temp_val.XF = XFs[temp_val.ixfe];\n                if (options.cellFormula) temp_val.f = \"=\" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);\n                if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n                addcell(last_formula.cell, temp_val, options);\n                last_formula = null;\n              }\n            }\n            break;\n\n          case 'Array':\n            {\n              array_formulae.push(val);\n            }\n            break;\n\n          case 'ShrFmla':\n            {\n              if (!cell_valid) break; //if(options.cellFormula) out[last_cell].f = stringify_formula(val[0], range, lastcell, supbooks, opts);\n\n              /* TODO: capture range */\n\n              shared_formulae[encode_cell(last_formula.cell)] = val[0];\n            }\n            break;\n\n          case 'LabelSst':\n            //temp_val={v:sst[val.isst].t, ixfe:val.ixfe, t:'s'};\n            temp_val = make_cell(sst[val.isst].t, val.ixfe, 's');\n            temp_val.XF = XFs[temp_val.ixfe];\n            if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell({\n              c: val.c,\n              r: val.r\n            }, temp_val, options);\n            break;\n\n          case 'Label':\n          case 'BIFF2STR':\n            /* Some writers erroneously write Label */\n            temp_val = make_cell(val.val, val.ixfe, 's');\n            temp_val.XF = XFs[temp_val.ixfe];\n            if (temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell({\n              c: val.c,\n              r: val.r\n            }, temp_val, options);\n            break;\n\n          case 'Dimensions':\n            {\n              if (file_depth === 1) range = val;\n              /* TODO: stack */\n            }\n            break;\n\n          case 'SST':\n            {\n              sst = val;\n            }\n            break;\n\n          case 'Format':\n            {\n              /* val = [id, fmt] */\n              SSF.load(val[1], val[0]);\n            }\n            break;\n\n          case 'MergeCells':\n            mergecells = mergecells.concat(val);\n            break;\n\n          case 'Obj':\n            objects[val.cmo[0]] = opts.lastobj = val;\n            break;\n\n          case 'TxO':\n            opts.lastobj.TxO = val;\n            break;\n\n          case 'HLink':\n            {\n              for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) {\n                for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {\n                  if (out[encode_cell({\n                    c: rngC,\n                    r: rngR\n                  })]) out[encode_cell({\n                    c: rngC,\n                    r: rngR\n                  })].l = val[1];\n                }\n              }\n            }\n            break;\n\n          case 'HLinkTooltip':\n            {\n              for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) {\n                for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {\n                  if (out[encode_cell({\n                    c: rngC,\n                    r: rngR\n                  })]) out[encode_cell({\n                    c: rngC,\n                    r: rngR\n                  })].l.tooltip = val[1];\n                }\n              }\n            }\n            break;\n\n          /* Comments */\n\n          case 'Note':\n            {\n              if (opts.biff <= 5 && opts.biff >= 2) break;\n              /* TODO: BIFF5 */\n\n              cc = out[encode_cell(val[0])];\n              var noteobj = objects[val[2]];\n              if (!cc) break;\n              if (!cc.c) cc.c = [];\n              cmnt = {\n                a: val[1],\n                t: noteobj.TxO.t\n              };\n              cc.c.push(cmnt);\n            }\n            break;\n\n          default:\n            switch (R.n) {\n              /* nested */\n              case 'ClrtClient':\n                break;\n\n              case 'XFExt':\n                update_xfext(XFs[val.ixfe], val.ext);\n                break;\n\n              case 'NameCmt':\n                break;\n\n              case 'Header':\n                break;\n              // TODO\n\n              case 'Footer':\n                break;\n              // TODO\n\n              case 'HCenter':\n                break;\n              // TODO\n\n              case 'VCenter':\n                break;\n              // TODO\n\n              case 'Pls':\n                break;\n              // TODO\n\n              case 'Setup':\n                break;\n              // TODO\n\n              case 'DefColWidth':\n                break;\n              // TODO\n\n              case 'GCW':\n                break;\n\n              case 'LHRecord':\n                break;\n\n              case 'ColInfo':\n                break;\n              // TODO\n\n              case 'Row':\n                break;\n              // TODO\n\n              case 'DBCell':\n                break;\n              // TODO\n\n              case 'MulBlank':\n                break;\n              // TODO\n\n              case 'EntExU2':\n                break;\n              // TODO\n\n              case 'SxView':\n                break;\n              // TODO\n\n              case 'Sxvd':\n                break;\n              // TODO\n\n              case 'SXVI':\n                break;\n              // TODO\n\n              case 'SXVDEx':\n                break;\n              // TODO\n\n              case 'SxIvd':\n                break;\n              // TODO\n\n              case 'SXDI':\n                break;\n              // TODO\n\n              case 'SXLI':\n                break;\n              // TODO\n\n              case 'SXEx':\n                break;\n              // TODO\n\n              case 'QsiSXTag':\n                break;\n              // TODO\n\n              case 'Selection':\n                break;\n\n              case 'Feat':\n                break;\n\n              case 'FeatHdr':\n              case 'FeatHdr11':\n                break;\n\n              case 'Feature11':\n              case 'Feature12':\n              case 'List12':\n                break;\n\n              case 'Blank':\n                break;\n\n              case 'Country':\n                country = val;\n                break;\n\n              case 'RecalcId':\n                break;\n\n              case 'DefaultRowHeight':\n              case 'DxGCol':\n                break;\n              // TODO: htmlify\n\n              case 'Fbi':\n              case 'Fbi2':\n              case 'GelFrame':\n                break;\n\n              case 'Font':\n                break;\n              // TODO\n\n              case 'XFCRC':\n                break;\n              // TODO\n\n              case 'Style':\n                break;\n              // TODO\n\n              case 'StyleExt':\n                break;\n              // TODO\n\n              case 'Palette':\n                palette = val;\n                break;\n              // TODO\n\n              case 'Theme':\n                break;\n              // TODO\n\n              /* Protection */\n\n              case 'ScenarioProtect':\n                break;\n\n              case 'ObjProtect':\n                break;\n\n              /* Conditional Formatting */\n\n              case 'CondFmt12':\n                break;\n\n              /* Table */\n\n              case 'Table':\n                break;\n              // TODO\n\n              case 'TableStyles':\n                break;\n              // TODO\n\n              case 'TableStyle':\n                break;\n              // TODO\n\n              case 'TableStyleElement':\n                break;\n              // TODO\n\n              /* PivotTable */\n\n              case 'SXStreamID':\n                break;\n              // TODO\n\n              case 'SXVS':\n                break;\n              // TODO\n\n              case 'DConRef':\n                break;\n              // TODO\n\n              case 'SXAddl':\n                break;\n              // TODO\n\n              case 'DConBin':\n                break;\n              // TODO\n\n              case 'DConName':\n                break;\n              // TODO\n\n              case 'SXPI':\n                break;\n              // TODO\n\n              case 'SxFormat':\n                break;\n              // TODO\n\n              case 'SxSelect':\n                break;\n              // TODO\n\n              case 'SxRule':\n                break;\n              // TODO\n\n              case 'SxFilt':\n                break;\n              // TODO\n\n              case 'SxItm':\n                break;\n              // TODO\n\n              case 'SxDXF':\n                break;\n              // TODO\n\n              /* Scenario Manager */\n\n              case 'ScenMan':\n                break;\n\n              /* Data Consolidation */\n\n              case 'DCon':\n                break;\n\n              /* Watched Cell */\n\n              case 'CellWatch':\n                break;\n\n              /* Print Settings */\n\n              case 'PrintRowCol':\n                break;\n\n              case 'PrintGrid':\n                break;\n\n              case 'PrintSize':\n                break;\n\n              case 'XCT':\n                break;\n\n              case 'CRN':\n                break;\n\n              case 'Scl':\n                {//console.log(\"Zoom Level:\", val[0]/val[1],val);\n                }\n                break;\n\n              case 'SheetExt':\n                {}\n                break;\n\n              case 'SheetExtOptional':\n                {}\n                break;\n\n              /* VBA */\n\n              case 'ObNoMacros':\n                {}\n                break;\n\n              case 'ObProj':\n                {}\n                break;\n\n              case 'CodeName':\n                {}\n                break;\n\n              case 'GUIDTypeLib':\n                {}\n                break;\n\n              case 'WOpt':\n                break;\n              // TODO: WTF?\n\n              case 'PhoneticInfo':\n                break;\n\n              case 'OleObjectSize':\n                break;\n\n              /* Differential Formatting */\n\n              case 'DXF':\n              case 'DXFN':\n              case 'DXFN12':\n              case 'DXFN12List':\n              case 'DXFN12NoCB':\n                break;\n\n              /* Data Validation */\n\n              case 'Dv':\n              case 'DVal':\n                break;\n\n              /* Data Series */\n\n              case 'BRAI':\n              case 'Series':\n              case 'SeriesText':\n                break;\n\n              /* Data Connection */\n\n              case 'DConn':\n                break;\n\n              case 'DbOrParamQry':\n                break;\n\n              case 'DBQueryExt':\n                break;\n\n              /* Formatting */\n\n              case 'IFmtRecord':\n                break;\n\n              case 'CondFmt':\n              case 'CF':\n              case 'CF12':\n              case 'CFEx':\n                break;\n\n              /* Explicitly Ignored */\n\n              case 'Excel9File':\n                break;\n\n              case 'Units':\n                break;\n\n              case 'InterfaceHdr':\n              case 'Mms':\n              case 'InterfaceEnd':\n              case 'DSF':\n              case 'BuiltInFnGroupCount':\n              /* View Stuff */\n\n              case 'Window1':\n              case 'Window2':\n              case 'HideObj':\n              case 'GridSet':\n              case 'Guts':\n              case 'UserBView':\n              case 'UserSViewBegin':\n              case 'UserSViewEnd':\n              case 'Pane':\n                break;\n\n              default:\n                switch (R.n) {\n                  /* nested */\n\n                  /* Chart */\n                  case 'Dat':\n                  case 'Begin':\n                  case 'End':\n                  case 'StartBlock':\n                  case 'EndBlock':\n                  case 'Frame':\n                  case 'Area':\n                  case 'Axis':\n                  case 'AxisLine':\n                  case 'Tick':\n                    break;\n\n                  case 'AxesUsed':\n                  case 'CrtLayout12':\n                  case 'CrtLayout12A':\n                  case 'CrtLink':\n                  case 'CrtLine':\n                  case 'CrtMlFrt':\n                  case 'CrtMlFrtContinue':\n                    break;\n\n                  case 'LineFormat':\n                  case 'AreaFormat':\n                  case 'Chart':\n                  case 'Chart3d':\n                  case 'Chart3DBarShape':\n                  case 'ChartFormat':\n                  case 'ChartFrtInfo':\n                    break;\n\n                  case 'PlotArea':\n                  case 'PlotGrowth':\n                    break;\n\n                  case 'SeriesList':\n                  case 'SerParent':\n                  case 'SerAuxTrend':\n                    break;\n\n                  case 'DataFormat':\n                  case 'SerToCrt':\n                  case 'FontX':\n                    break;\n\n                  case 'CatSerRange':\n                  case 'AxcExt':\n                  case 'SerFmt':\n                    break;\n\n                  case 'ShtProps':\n                    break;\n\n                  case 'DefaultText':\n                  case 'Text':\n                  case 'CatLab':\n                    break;\n\n                  case 'DataLabExtContents':\n                    break;\n\n                  case 'Legend':\n                  case 'LegendException':\n                    break;\n\n                  case 'Pie':\n                  case 'Scatter':\n                    break;\n\n                  case 'PieFormat':\n                  case 'MarkerFormat':\n                    break;\n\n                  case 'StartObject':\n                  case 'EndObject':\n                    break;\n\n                  case 'AlRuns':\n                  case 'ObjectLink':\n                    break;\n\n                  case 'SIIndex':\n                    break;\n\n                  case 'AttachedLabel':\n                  case 'YMult':\n                    break;\n\n                  /* Chart Group */\n\n                  case 'Line':\n                  case 'Bar':\n                    break;\n\n                  case 'Surf':\n                    break;\n\n                  /* Axis Group */\n\n                  case 'AxisParent':\n                    break;\n\n                  case 'Pos':\n                    break;\n\n                  case 'ValueRange':\n                    break;\n\n                  /* Pivot Chart */\n\n                  case 'SXViewEx9':\n                    break;\n                  // TODO\n\n                  case 'SXViewLink':\n                    break;\n\n                  case 'PivotChartBits':\n                    break;\n\n                  case 'SBaseRef':\n                    break;\n\n                  case 'TextPropsStream':\n                    break;\n\n                  /* Chart Misc */\n\n                  case 'LnExt':\n                    break;\n\n                  case 'MkrExt':\n                    break;\n\n                  case 'CrtCoopt':\n                    break;\n\n                  /* Query Table */\n\n                  case 'Qsi':\n                  case 'Qsif':\n                  case 'Qsir':\n                  case 'QsiSXTag':\n                    break;\n\n                  case 'TxtQry':\n                    break;\n\n                  /* Filter */\n\n                  case 'FilterMode':\n                    break;\n\n                  case 'AutoFilter':\n                  case 'AutoFilterInfo':\n                    break;\n\n                  case 'AutoFilter12':\n                    break;\n\n                  case 'DropDownObjIds':\n                    break;\n\n                  case 'Sort':\n                    break;\n\n                  case 'SortData':\n                    break;\n\n                  /* Drawing */\n\n                  case 'ShapePropsStream':\n                    break;\n\n                  case 'MsoDrawing':\n                  case 'MsoDrawingGroup':\n                  case 'MsoDrawingSelection':\n                    break;\n\n                  case 'ImData':\n                    break;\n\n                  /* Pub Stuff */\n\n                  case 'WebPub':\n                  case 'AutoWebPub':\n                  /* Print Stuff */\n\n                  case 'RightMargin':\n                  case 'LeftMargin':\n                  case 'TopMargin':\n                  case 'BottomMargin':\n                  case 'HeaderFooter':\n                  case 'HFPicture':\n                  case 'PLV':\n                  case 'HorizontalPageBreaks':\n                  case 'VerticalPageBreaks':\n                  /* Behavioral */\n\n                  case 'Backup':\n                  case 'CompressPictures':\n                  case 'Compat12':\n                    break;\n\n                  /* Should not Happen */\n\n                  case 'Continue':\n                  case 'ContinueFrt12':\n                    break;\n\n                  /* Future Records */\n\n                  case 'FrtFontList':\n                  case 'FrtWrapper':\n                    break;\n\n                  /* BIFF5 records */\n\n                  case 'ExternCount':\n                    break;\n\n                  case 'RString':\n                    break;\n\n                  case 'TabIdConf':\n                  case 'Radar':\n                  case 'RadarArea':\n                  case 'DropBar':\n                  case 'Intl':\n                  case 'CoordList':\n                  case 'SerAuxErrBar':\n                    break;\n\n                  default:\n                    switch (R.n) {\n                      /* nested */\n\n                      /* Miscellaneous */\n                      case 'SCENARIO':\n                      case 'DConBin':\n                      case 'PicF':\n                      case 'DataLabExt':\n                      case 'Lel':\n                      case 'BopPop':\n                      case 'BopPopCustom':\n                      case 'RealTimeData':\n                      case 'Name':\n                        break;\n\n                      default:\n                        if (options.WTF) throw 'Unrecognized Record ' + R.n;\n                    }\n\n                }\n\n            }\n\n        }\n      } else blob.l += length;\n    }\n\n    var sheetnamesraw = opts.biff === 2 ? ['Sheet1'] : Object.keys(Directory).sort(function (a, b) {\n      return Number(a) - Number(b);\n    }).map(function (x) {\n      return Directory[x].name;\n    });\n    var sheetnames = sheetnamesraw.slice();\n    wb.Directory = sheetnamesraw;\n    wb.SheetNames = sheetnamesraw;\n    if (!options.bookSheets) wb.Sheets = Sheets;\n    wb.Preamble = Preamble;\n    wb.Strings = sst;\n    wb.SSF = SSF.get_table();\n    if (opts.enc) wb.Encryption = opts.enc;\n    wb.Metadata = {};\n    if (country !== undefined) wb.Metadata.Country = country;\n    return wb;\n  }\n\n  function parse_xlscfb(cfb, options) {\n    if (!options) options = {};\n    fix_read_opts(options);\n    reset_cp();\n    var CompObj, Summary, Workbook;\n\n    if (cfb.find) {\n      CompObj = cfb.find('!CompObj');\n      Summary = cfb.find('!SummaryInformation');\n      Workbook = cfb.find('/Workbook');\n    } else {\n      prep_blob(cfb, 0);\n      Workbook = {\n        content: cfb\n      };\n    }\n\n    if (!Workbook) Workbook = cfb.find('/Book');\n    var CompObjP, SummaryP, WorkbookP;\n    if (CompObj) CompObjP = parse_compobj(CompObj);\n    if (options.bookProps && !options.bookSheets) WorkbookP = {};else {\n      if (Workbook) WorkbookP = parse_workbook(Workbook.content, options, !!Workbook.find);else throw new Error(\"Cannot find Workbook stream\");\n    }\n    if (cfb.find) parse_props(cfb);\n    var props = {};\n\n    for (var y in cfb.Summary) {\n      props[y] = cfb.Summary[y];\n    }\n\n    for (y in cfb.DocSummary) {\n      props[y] = cfb.DocSummary[y];\n    }\n\n    WorkbookP.Props = WorkbookP.Custprops = props;\n    /* TODO: split up properties */\n\n    if (options.bookFiles) WorkbookP.cfb = cfb;\n    WorkbookP.CompObjP = CompObjP;\n    return WorkbookP;\n  }\n  /* TODO: WTF */\n\n\n  function parse_props(cfb) {\n    /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */\n    var DSI = cfb.find('!DocumentSummaryInformation');\n    if (DSI) try {\n      cfb.DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI);\n    } catch (e) {}\n    /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/\n\n    var SI = cfb.find('!SummaryInformation');\n    if (SI) try {\n      cfb.Summary = parse_PropertySetStream(SI, SummaryPIDSI);\n    } catch (e) {}\n  }\n  /* [MS-XLSB] 2.3 Record Enumeration */\n\n\n  var XLSBRecordEnum = {\n    0x0000: {\n      n: \"BrtRowHdr\",\n      f: parse_BrtRowHdr\n    },\n    0x0001: {\n      n: \"BrtCellBlank\",\n      f: parse_BrtCellBlank\n    },\n    0x0002: {\n      n: \"BrtCellRk\",\n      f: parse_BrtCellRk\n    },\n    0x0003: {\n      n: \"BrtCellError\",\n      f: parse_BrtCellError\n    },\n    0x0004: {\n      n: \"BrtCellBool\",\n      f: parse_BrtCellBool\n    },\n    0x0005: {\n      n: \"BrtCellReal\",\n      f: parse_BrtCellReal\n    },\n    0x0006: {\n      n: \"BrtCellSt\",\n      f: parse_BrtCellSt\n    },\n    0x0007: {\n      n: \"BrtCellIsst\",\n      f: parse_BrtCellIsst\n    },\n    0x0008: {\n      n: \"BrtFmlaString\",\n      f: parse_BrtFmlaString\n    },\n    0x0009: {\n      n: \"BrtFmlaNum\",\n      f: parse_BrtFmlaNum\n    },\n    0x000A: {\n      n: \"BrtFmlaBool\",\n      f: parse_BrtFmlaBool\n    },\n    0x000B: {\n      n: \"BrtFmlaError\",\n      f: parse_BrtFmlaError\n    },\n    0x0010: {\n      n: \"BrtFRTArchID$\",\n      f: parse_BrtFRTArchID$\n    },\n    0x0013: {\n      n: \"BrtSSTItem\",\n      f: parse_RichStr\n    },\n    0x0014: {\n      n: \"BrtPCDIMissing\",\n      f: parsenoop\n    },\n    0x0015: {\n      n: \"BrtPCDINumber\",\n      f: parsenoop\n    },\n    0x0016: {\n      n: \"BrtPCDIBoolean\",\n      f: parsenoop\n    },\n    0x0017: {\n      n: \"BrtPCDIError\",\n      f: parsenoop\n    },\n    0x0018: {\n      n: \"BrtPCDIString\",\n      f: parsenoop\n    },\n    0x0019: {\n      n: \"BrtPCDIDatetime\",\n      f: parsenoop\n    },\n    0x001A: {\n      n: \"BrtPCDIIndex\",\n      f: parsenoop\n    },\n    0x001B: {\n      n: \"BrtPCDIAMissing\",\n      f: parsenoop\n    },\n    0x001C: {\n      n: \"BrtPCDIANumber\",\n      f: parsenoop\n    },\n    0x001D: {\n      n: \"BrtPCDIABoolean\",\n      f: parsenoop\n    },\n    0x001E: {\n      n: \"BrtPCDIAError\",\n      f: parsenoop\n    },\n    0x001F: {\n      n: \"BrtPCDIAString\",\n      f: parsenoop\n    },\n    0x0020: {\n      n: \"BrtPCDIADatetime\",\n      f: parsenoop\n    },\n    0x0021: {\n      n: \"BrtPCRRecord\",\n      f: parsenoop\n    },\n    0x0022: {\n      n: \"BrtPCRRecordDt\",\n      f: parsenoop\n    },\n    0x0023: {\n      n: \"BrtFRTBegin\",\n      f: parsenoop\n    },\n    0x0024: {\n      n: \"BrtFRTEnd\",\n      f: parsenoop\n    },\n    0x0025: {\n      n: \"BrtACBegin\",\n      f: parsenoop\n    },\n    0x0026: {\n      n: \"BrtACEnd\",\n      f: parsenoop\n    },\n    0x0027: {\n      n: \"BrtName\",\n      f: parsenoop\n    },\n    0x0028: {\n      n: \"BrtIndexRowBlock\",\n      f: parsenoop\n    },\n    0x002A: {\n      n: \"BrtIndexBlock\",\n      f: parsenoop\n    },\n    0x002B: {\n      n: \"BrtFont\",\n      f: parse_BrtFont\n    },\n    0x002C: {\n      n: \"BrtFmt\",\n      f: parse_BrtFmt\n    },\n    0x002D: {\n      n: \"BrtFill\",\n      f: parsenoop\n    },\n    0x002E: {\n      n: \"BrtBorder\",\n      f: parsenoop\n    },\n    0x002F: {\n      n: \"BrtXF\",\n      f: parse_BrtXF\n    },\n    0x0030: {\n      n: \"BrtStyle\",\n      f: parsenoop\n    },\n    0x0031: {\n      n: \"BrtCellMeta\",\n      f: parsenoop\n    },\n    0x0032: {\n      n: \"BrtValueMeta\",\n      f: parsenoop\n    },\n    0x0033: {\n      n: \"BrtMdb\",\n      f: parsenoop\n    },\n    0x0034: {\n      n: \"BrtBeginFmd\",\n      f: parsenoop\n    },\n    0x0035: {\n      n: \"BrtEndFmd\",\n      f: parsenoop\n    },\n    0x0036: {\n      n: \"BrtBeginMdx\",\n      f: parsenoop\n    },\n    0x0037: {\n      n: \"BrtEndMdx\",\n      f: parsenoop\n    },\n    0x0038: {\n      n: \"BrtBeginMdxTuple\",\n      f: parsenoop\n    },\n    0x0039: {\n      n: \"BrtEndMdxTuple\",\n      f: parsenoop\n    },\n    0x003A: {\n      n: \"BrtMdxMbrIstr\",\n      f: parsenoop\n    },\n    0x003B: {\n      n: \"BrtStr\",\n      f: parsenoop\n    },\n    0x003C: {\n      n: \"BrtColInfo\",\n      f: parsenoop\n    },\n    0x003E: {\n      n: \"BrtCellRString\",\n      f: parsenoop\n    },\n    0x003F: {\n      n: \"BrtCalcChainItem$\",\n      f: parse_BrtCalcChainItem$\n    },\n    0x0040: {\n      n: \"BrtDVal\",\n      f: parsenoop\n    },\n    0x0041: {\n      n: \"BrtSxvcellNum\",\n      f: parsenoop\n    },\n    0x0042: {\n      n: \"BrtSxvcellStr\",\n      f: parsenoop\n    },\n    0x0043: {\n      n: \"BrtSxvcellBool\",\n      f: parsenoop\n    },\n    0x0044: {\n      n: \"BrtSxvcellErr\",\n      f: parsenoop\n    },\n    0x0045: {\n      n: \"BrtSxvcellDate\",\n      f: parsenoop\n    },\n    0x0046: {\n      n: \"BrtSxvcellNil\",\n      f: parsenoop\n    },\n    0x0080: {\n      n: \"BrtFileVersion\",\n      f: parsenoop\n    },\n    0x0081: {\n      n: \"BrtBeginSheet\",\n      f: parsenoop\n    },\n    0x0082: {\n      n: \"BrtEndSheet\",\n      f: parsenoop\n    },\n    0x0083: {\n      n: \"BrtBeginBook\",\n      f: parsenoop,\n      p: 0\n    },\n    0x0084: {\n      n: \"BrtEndBook\",\n      f: parsenoop\n    },\n    0x0085: {\n      n: \"BrtBeginWsViews\",\n      f: parsenoop\n    },\n    0x0086: {\n      n: \"BrtEndWsViews\",\n      f: parsenoop\n    },\n    0x0087: {\n      n: \"BrtBeginBookViews\",\n      f: parsenoop\n    },\n    0x0088: {\n      n: \"BrtEndBookViews\",\n      f: parsenoop\n    },\n    0x0089: {\n      n: \"BrtBeginWsView\",\n      f: parsenoop\n    },\n    0x008A: {\n      n: \"BrtEndWsView\",\n      f: parsenoop\n    },\n    0x008B: {\n      n: \"BrtBeginCsViews\",\n      f: parsenoop\n    },\n    0x008C: {\n      n: \"BrtEndCsViews\",\n      f: parsenoop\n    },\n    0x008D: {\n      n: \"BrtBeginCsView\",\n      f: parsenoop\n    },\n    0x008E: {\n      n: \"BrtEndCsView\",\n      f: parsenoop\n    },\n    0x008F: {\n      n: \"BrtBeginBundleShs\",\n      f: parsenoop\n    },\n    0x0090: {\n      n: \"BrtEndBundleShs\",\n      f: parsenoop\n    },\n    0x0091: {\n      n: \"BrtBeginSheetData\",\n      f: parsenoop\n    },\n    0x0092: {\n      n: \"BrtEndSheetData\",\n      f: parsenoop\n    },\n    0x0093: {\n      n: \"BrtWsProp\",\n      f: parse_BrtWsProp\n    },\n    0x0094: {\n      n: \"BrtWsDim\",\n      f: parse_BrtWsDim,\n      p: 16\n    },\n    0x0097: {\n      n: \"BrtPane\",\n      f: parsenoop\n    },\n    0x0098: {\n      n: \"BrtSel\",\n      f: parsenoop\n    },\n    0x0099: {\n      n: \"BrtWbProp\",\n      f: parse_BrtWbProp\n    },\n    0x009A: {\n      n: \"BrtWbFactoid\",\n      f: parsenoop\n    },\n    0x009B: {\n      n: \"BrtFileRecover\",\n      f: parsenoop\n    },\n    0x009C: {\n      n: \"BrtBundleSh\",\n      f: parse_BrtBundleSh\n    },\n    0x009D: {\n      n: \"BrtCalcProp\",\n      f: parsenoop\n    },\n    0x009E: {\n      n: \"BrtBookView\",\n      f: parsenoop\n    },\n    0x009F: {\n      n: \"BrtBeginSst\",\n      f: parse_BrtBeginSst\n    },\n    0x00A0: {\n      n: \"BrtEndSst\",\n      f: parsenoop\n    },\n    0x00A1: {\n      n: \"BrtBeginAFilter\",\n      f: parsenoop\n    },\n    0x00A2: {\n      n: \"BrtEndAFilter\",\n      f: parsenoop\n    },\n    0x00A3: {\n      n: \"BrtBeginFilterColumn\",\n      f: parsenoop\n    },\n    0x00A4: {\n      n: \"BrtEndFilterColumn\",\n      f: parsenoop\n    },\n    0x00A5: {\n      n: \"BrtBeginFilters\",\n      f: parsenoop\n    },\n    0x00A6: {\n      n: \"BrtEndFilters\",\n      f: parsenoop\n    },\n    0x00A7: {\n      n: \"BrtFilter\",\n      f: parsenoop\n    },\n    0x00A8: {\n      n: \"BrtColorFilter\",\n      f: parsenoop\n    },\n    0x00A9: {\n      n: \"BrtIconFilter\",\n      f: parsenoop\n    },\n    0x00AA: {\n      n: \"BrtTop10Filter\",\n      f: parsenoop\n    },\n    0x00AB: {\n      n: \"BrtDynamicFilter\",\n      f: parsenoop\n    },\n    0x00AC: {\n      n: \"BrtBeginCustomFilters\",\n      f: parsenoop\n    },\n    0x00AD: {\n      n: \"BrtEndCustomFilters\",\n      f: parsenoop\n    },\n    0x00AE: {\n      n: \"BrtCustomFilter\",\n      f: parsenoop\n    },\n    0x00AF: {\n      n: \"BrtAFilterDateGroupItem\",\n      f: parsenoop\n    },\n    0x00B0: {\n      n: \"BrtMergeCell\",\n      f: parse_BrtMergeCell\n    },\n    0x00B1: {\n      n: \"BrtBeginMergeCells\",\n      f: parsenoop\n    },\n    0x00B2: {\n      n: \"BrtEndMergeCells\",\n      f: parsenoop\n    },\n    0x00B3: {\n      n: \"BrtBeginPivotCacheDef\",\n      f: parsenoop\n    },\n    0x00B4: {\n      n: \"BrtEndPivotCacheDef\",\n      f: parsenoop\n    },\n    0x00B5: {\n      n: \"BrtBeginPCDFields\",\n      f: parsenoop\n    },\n    0x00B6: {\n      n: \"BrtEndPCDFields\",\n      f: parsenoop\n    },\n    0x00B7: {\n      n: \"BrtBeginPCDField\",\n      f: parsenoop\n    },\n    0x00B8: {\n      n: \"BrtEndPCDField\",\n      f: parsenoop\n    },\n    0x00B9: {\n      n: \"BrtBeginPCDSource\",\n      f: parsenoop\n    },\n    0x00BA: {\n      n: \"BrtEndPCDSource\",\n      f: parsenoop\n    },\n    0x00BB: {\n      n: \"BrtBeginPCDSRange\",\n      f: parsenoop\n    },\n    0x00BC: {\n      n: \"BrtEndPCDSRange\",\n      f: parsenoop\n    },\n    0x00BD: {\n      n: \"BrtBeginPCDFAtbl\",\n      f: parsenoop\n    },\n    0x00BE: {\n      n: \"BrtEndPCDFAtbl\",\n      f: parsenoop\n    },\n    0x00BF: {\n      n: \"BrtBeginPCDIRun\",\n      f: parsenoop\n    },\n    0x00C0: {\n      n: \"BrtEndPCDIRun\",\n      f: parsenoop\n    },\n    0x00C1: {\n      n: \"BrtBeginPivotCacheRecords\",\n      f: parsenoop\n    },\n    0x00C2: {\n      n: \"BrtEndPivotCacheRecords\",\n      f: parsenoop\n    },\n    0x00C3: {\n      n: \"BrtBeginPCDHierarchies\",\n      f: parsenoop\n    },\n    0x00C4: {\n      n: \"BrtEndPCDHierarchies\",\n      f: parsenoop\n    },\n    0x00C5: {\n      n: \"BrtBeginPCDHierarchy\",\n      f: parsenoop\n    },\n    0x00C6: {\n      n: \"BrtEndPCDHierarchy\",\n      f: parsenoop\n    },\n    0x00C7: {\n      n: \"BrtBeginPCDHFieldsUsage\",\n      f: parsenoop\n    },\n    0x00C8: {\n      n: \"BrtEndPCDHFieldsUsage\",\n      f: parsenoop\n    },\n    0x00C9: {\n      n: \"BrtBeginExtConnection\",\n      f: parsenoop\n    },\n    0x00CA: {\n      n: \"BrtEndExtConnection\",\n      f: parsenoop\n    },\n    0x00CB: {\n      n: \"BrtBeginECDbProps\",\n      f: parsenoop\n    },\n    0x00CC: {\n      n: \"BrtEndECDbProps\",\n      f: parsenoop\n    },\n    0x00CD: {\n      n: \"BrtBeginECOlapProps\",\n      f: parsenoop\n    },\n    0x00CE: {\n      n: \"BrtEndECOlapProps\",\n      f: parsenoop\n    },\n    0x00CF: {\n      n: \"BrtBeginPCDSConsol\",\n      f: parsenoop\n    },\n    0x00D0: {\n      n: \"BrtEndPCDSConsol\",\n      f: parsenoop\n    },\n    0x00D1: {\n      n: \"BrtBeginPCDSCPages\",\n      f: parsenoop\n    },\n    0x00D2: {\n      n: \"BrtEndPCDSCPages\",\n      f: parsenoop\n    },\n    0x00D3: {\n      n: \"BrtBeginPCDSCPage\",\n      f: parsenoop\n    },\n    0x00D4: {\n      n: \"BrtEndPCDSCPage\",\n      f: parsenoop\n    },\n    0x00D5: {\n      n: \"BrtBeginPCDSCPItem\",\n      f: parsenoop\n    },\n    0x00D6: {\n      n: \"BrtEndPCDSCPItem\",\n      f: parsenoop\n    },\n    0x00D7: {\n      n: \"BrtBeginPCDSCSets\",\n      f: parsenoop\n    },\n    0x00D8: {\n      n: \"BrtEndPCDSCSets\",\n      f: parsenoop\n    },\n    0x00D9: {\n      n: \"BrtBeginPCDSCSet\",\n      f: parsenoop\n    },\n    0x00DA: {\n      n: \"BrtEndPCDSCSet\",\n      f: parsenoop\n    },\n    0x00DB: {\n      n: \"BrtBeginPCDFGroup\",\n      f: parsenoop\n    },\n    0x00DC: {\n      n: \"BrtEndPCDFGroup\",\n      f: parsenoop\n    },\n    0x00DD: {\n      n: \"BrtBeginPCDFGItems\",\n      f: parsenoop\n    },\n    0x00DE: {\n      n: \"BrtEndPCDFGItems\",\n      f: parsenoop\n    },\n    0x00DF: {\n      n: \"BrtBeginPCDFGRange\",\n      f: parsenoop\n    },\n    0x00E0: {\n      n: \"BrtEndPCDFGRange\",\n      f: parsenoop\n    },\n    0x00E1: {\n      n: \"BrtBeginPCDFGDiscrete\",\n      f: parsenoop\n    },\n    0x00E2: {\n      n: \"BrtEndPCDFGDiscrete\",\n      f: parsenoop\n    },\n    0x00E3: {\n      n: \"BrtBeginPCDSDTupleCache\",\n      f: parsenoop\n    },\n    0x00E4: {\n      n: \"BrtEndPCDSDTupleCache\",\n      f: parsenoop\n    },\n    0x00E5: {\n      n: \"BrtBeginPCDSDTCEntries\",\n      f: parsenoop\n    },\n    0x00E6: {\n      n: \"BrtEndPCDSDTCEntries\",\n      f: parsenoop\n    },\n    0x00E7: {\n      n: \"BrtBeginPCDSDTCEMembers\",\n      f: parsenoop\n    },\n    0x00E8: {\n      n: \"BrtEndPCDSDTCEMembers\",\n      f: parsenoop\n    },\n    0x00E9: {\n      n: \"BrtBeginPCDSDTCEMember\",\n      f: parsenoop\n    },\n    0x00EA: {\n      n: \"BrtEndPCDSDTCEMember\",\n      f: parsenoop\n    },\n    0x00EB: {\n      n: \"BrtBeginPCDSDTCQueries\",\n      f: parsenoop\n    },\n    0x00EC: {\n      n: \"BrtEndPCDSDTCQueries\",\n      f: parsenoop\n    },\n    0x00ED: {\n      n: \"BrtBeginPCDSDTCQuery\",\n      f: parsenoop\n    },\n    0x00EE: {\n      n: \"BrtEndPCDSDTCQuery\",\n      f: parsenoop\n    },\n    0x00EF: {\n      n: \"BrtBeginPCDSDTCSets\",\n      f: parsenoop\n    },\n    0x00F0: {\n      n: \"BrtEndPCDSDTCSets\",\n      f: parsenoop\n    },\n    0x00F1: {\n      n: \"BrtBeginPCDSDTCSet\",\n      f: parsenoop\n    },\n    0x00F2: {\n      n: \"BrtEndPCDSDTCSet\",\n      f: parsenoop\n    },\n    0x00F3: {\n      n: \"BrtBeginPCDCalcItems\",\n      f: parsenoop\n    },\n    0x00F4: {\n      n: \"BrtEndPCDCalcItems\",\n      f: parsenoop\n    },\n    0x00F5: {\n      n: \"BrtBeginPCDCalcItem\",\n      f: parsenoop\n    },\n    0x00F6: {\n      n: \"BrtEndPCDCalcItem\",\n      f: parsenoop\n    },\n    0x00F7: {\n      n: \"BrtBeginPRule\",\n      f: parsenoop\n    },\n    0x00F8: {\n      n: \"BrtEndPRule\",\n      f: parsenoop\n    },\n    0x00F9: {\n      n: \"BrtBeginPRFilters\",\n      f: parsenoop\n    },\n    0x00FA: {\n      n: \"BrtEndPRFilters\",\n      f: parsenoop\n    },\n    0x00FB: {\n      n: \"BrtBeginPRFilter\",\n      f: parsenoop\n    },\n    0x00FC: {\n      n: \"BrtEndPRFilter\",\n      f: parsenoop\n    },\n    0x00FD: {\n      n: \"BrtBeginPNames\",\n      f: parsenoop\n    },\n    0x00FE: {\n      n: \"BrtEndPNames\",\n      f: parsenoop\n    },\n    0x00FF: {\n      n: \"BrtBeginPName\",\n      f: parsenoop\n    },\n    0x0100: {\n      n: \"BrtEndPName\",\n      f: parsenoop\n    },\n    0x0101: {\n      n: \"BrtBeginPNPairs\",\n      f: parsenoop\n    },\n    0x0102: {\n      n: \"BrtEndPNPairs\",\n      f: parsenoop\n    },\n    0x0103: {\n      n: \"BrtBeginPNPair\",\n      f: parsenoop\n    },\n    0x0104: {\n      n: \"BrtEndPNPair\",\n      f: parsenoop\n    },\n    0x0105: {\n      n: \"BrtBeginECWebProps\",\n      f: parsenoop\n    },\n    0x0106: {\n      n: \"BrtEndECWebProps\",\n      f: parsenoop\n    },\n    0x0107: {\n      n: \"BrtBeginEcWpTables\",\n      f: parsenoop\n    },\n    0x0108: {\n      n: \"BrtEndECWPTables\",\n      f: parsenoop\n    },\n    0x0109: {\n      n: \"BrtBeginECParams\",\n      f: parsenoop\n    },\n    0x010A: {\n      n: \"BrtEndECParams\",\n      f: parsenoop\n    },\n    0x010B: {\n      n: \"BrtBeginECParam\",\n      f: parsenoop\n    },\n    0x010C: {\n      n: \"BrtEndECParam\",\n      f: parsenoop\n    },\n    0x010D: {\n      n: \"BrtBeginPCDKPIs\",\n      f: parsenoop\n    },\n    0x010E: {\n      n: \"BrtEndPCDKPIs\",\n      f: parsenoop\n    },\n    0x010F: {\n      n: \"BrtBeginPCDKPI\",\n      f: parsenoop\n    },\n    0x0110: {\n      n: \"BrtEndPCDKPI\",\n      f: parsenoop\n    },\n    0x0111: {\n      n: \"BrtBeginDims\",\n      f: parsenoop\n    },\n    0x0112: {\n      n: \"BrtEndDims\",\n      f: parsenoop\n    },\n    0x0113: {\n      n: \"BrtBeginDim\",\n      f: parsenoop\n    },\n    0x0114: {\n      n: \"BrtEndDim\",\n      f: parsenoop\n    },\n    0x0115: {\n      n: \"BrtIndexPartEnd\",\n      f: parsenoop\n    },\n    0x0116: {\n      n: \"BrtBeginStyleSheet\",\n      f: parsenoop\n    },\n    0x0117: {\n      n: \"BrtEndStyleSheet\",\n      f: parsenoop\n    },\n    0x0118: {\n      n: \"BrtBeginSXView\",\n      f: parsenoop\n    },\n    0x0119: {\n      n: \"BrtEndSXVI\",\n      f: parsenoop\n    },\n    0x011A: {\n      n: \"BrtBeginSXVI\",\n      f: parsenoop\n    },\n    0x011B: {\n      n: \"BrtBeginSXVIs\",\n      f: parsenoop\n    },\n    0x011C: {\n      n: \"BrtEndSXVIs\",\n      f: parsenoop\n    },\n    0x011D: {\n      n: \"BrtBeginSXVD\",\n      f: parsenoop\n    },\n    0x011E: {\n      n: \"BrtEndSXVD\",\n      f: parsenoop\n    },\n    0x011F: {\n      n: \"BrtBeginSXVDs\",\n      f: parsenoop\n    },\n    0x0120: {\n      n: \"BrtEndSXVDs\",\n      f: parsenoop\n    },\n    0x0121: {\n      n: \"BrtBeginSXPI\",\n      f: parsenoop\n    },\n    0x0122: {\n      n: \"BrtEndSXPI\",\n      f: parsenoop\n    },\n    0x0123: {\n      n: \"BrtBeginSXPIs\",\n      f: parsenoop\n    },\n    0x0124: {\n      n: \"BrtEndSXPIs\",\n      f: parsenoop\n    },\n    0x0125: {\n      n: \"BrtBeginSXDI\",\n      f: parsenoop\n    },\n    0x0126: {\n      n: \"BrtEndSXDI\",\n      f: parsenoop\n    },\n    0x0127: {\n      n: \"BrtBeginSXDIs\",\n      f: parsenoop\n    },\n    0x0128: {\n      n: \"BrtEndSXDIs\",\n      f: parsenoop\n    },\n    0x0129: {\n      n: \"BrtBeginSXLI\",\n      f: parsenoop\n    },\n    0x012A: {\n      n: \"BrtEndSXLI\",\n      f: parsenoop\n    },\n    0x012B: {\n      n: \"BrtBeginSXLIRws\",\n      f: parsenoop\n    },\n    0x012C: {\n      n: \"BrtEndSXLIRws\",\n      f: parsenoop\n    },\n    0x012D: {\n      n: \"BrtBeginSXLICols\",\n      f: parsenoop\n    },\n    0x012E: {\n      n: \"BrtEndSXLICols\",\n      f: parsenoop\n    },\n    0x012F: {\n      n: \"BrtBeginSXFormat\",\n      f: parsenoop\n    },\n    0x0130: {\n      n: \"BrtEndSXFormat\",\n      f: parsenoop\n    },\n    0x0131: {\n      n: \"BrtBeginSXFormats\",\n      f: parsenoop\n    },\n    0x0132: {\n      n: \"BrtEndSxFormats\",\n      f: parsenoop\n    },\n    0x0133: {\n      n: \"BrtBeginSxSelect\",\n      f: parsenoop\n    },\n    0x0134: {\n      n: \"BrtEndSxSelect\",\n      f: parsenoop\n    },\n    0x0135: {\n      n: \"BrtBeginISXVDRws\",\n      f: parsenoop\n    },\n    0x0136: {\n      n: \"BrtEndISXVDRws\",\n      f: parsenoop\n    },\n    0x0137: {\n      n: \"BrtBeginISXVDCols\",\n      f: parsenoop\n    },\n    0x0138: {\n      n: \"BrtEndISXVDCols\",\n      f: parsenoop\n    },\n    0x0139: {\n      n: \"BrtEndSXLocation\",\n      f: parsenoop\n    },\n    0x013A: {\n      n: \"BrtBeginSXLocation\",\n      f: parsenoop\n    },\n    0x013B: {\n      n: \"BrtEndSXView\",\n      f: parsenoop\n    },\n    0x013C: {\n      n: \"BrtBeginSXTHs\",\n      f: parsenoop\n    },\n    0x013D: {\n      n: \"BrtEndSXTHs\",\n      f: parsenoop\n    },\n    0x013E: {\n      n: \"BrtBeginSXTH\",\n      f: parsenoop\n    },\n    0x013F: {\n      n: \"BrtEndSXTH\",\n      f: parsenoop\n    },\n    0x0140: {\n      n: \"BrtBeginISXTHRws\",\n      f: parsenoop\n    },\n    0x0141: {\n      n: \"BrtEndISXTHRws\",\n      f: parsenoop\n    },\n    0x0142: {\n      n: \"BrtBeginISXTHCols\",\n      f: parsenoop\n    },\n    0x0143: {\n      n: \"BrtEndISXTHCols\",\n      f: parsenoop\n    },\n    0x0144: {\n      n: \"BrtBeginSXTDMPS\",\n      f: parsenoop\n    },\n    0x0145: {\n      n: \"BrtEndSXTDMPs\",\n      f: parsenoop\n    },\n    0x0146: {\n      n: \"BrtBeginSXTDMP\",\n      f: parsenoop\n    },\n    0x0147: {\n      n: \"BrtEndSXTDMP\",\n      f: parsenoop\n    },\n    0x0148: {\n      n: \"BrtBeginSXTHItems\",\n      f: parsenoop\n    },\n    0x0149: {\n      n: \"BrtEndSXTHItems\",\n      f: parsenoop\n    },\n    0x014A: {\n      n: \"BrtBeginSXTHItem\",\n      f: parsenoop\n    },\n    0x014B: {\n      n: \"BrtEndSXTHItem\",\n      f: parsenoop\n    },\n    0x014C: {\n      n: \"BrtBeginMetadata\",\n      f: parsenoop\n    },\n    0x014D: {\n      n: \"BrtEndMetadata\",\n      f: parsenoop\n    },\n    0x014E: {\n      n: \"BrtBeginEsmdtinfo\",\n      f: parsenoop\n    },\n    0x014F: {\n      n: \"BrtMdtinfo\",\n      f: parsenoop\n    },\n    0x0150: {\n      n: \"BrtEndEsmdtinfo\",\n      f: parsenoop\n    },\n    0x0151: {\n      n: \"BrtBeginEsmdb\",\n      f: parsenoop\n    },\n    0x0152: {\n      n: \"BrtEndEsmdb\",\n      f: parsenoop\n    },\n    0x0153: {\n      n: \"BrtBeginEsfmd\",\n      f: parsenoop\n    },\n    0x0154: {\n      n: \"BrtEndEsfmd\",\n      f: parsenoop\n    },\n    0x0155: {\n      n: \"BrtBeginSingleCells\",\n      f: parsenoop\n    },\n    0x0156: {\n      n: \"BrtEndSingleCells\",\n      f: parsenoop\n    },\n    0x0157: {\n      n: \"BrtBeginList\",\n      f: parsenoop\n    },\n    0x0158: {\n      n: \"BrtEndList\",\n      f: parsenoop\n    },\n    0x0159: {\n      n: \"BrtBeginListCols\",\n      f: parsenoop\n    },\n    0x015A: {\n      n: \"BrtEndListCols\",\n      f: parsenoop\n    },\n    0x015B: {\n      n: \"BrtBeginListCol\",\n      f: parsenoop\n    },\n    0x015C: {\n      n: \"BrtEndListCol\",\n      f: parsenoop\n    },\n    0x015D: {\n      n: \"BrtBeginListXmlCPr\",\n      f: parsenoop\n    },\n    0x015E: {\n      n: \"BrtEndListXmlCPr\",\n      f: parsenoop\n    },\n    0x015F: {\n      n: \"BrtListCCFmla\",\n      f: parsenoop\n    },\n    0x0160: {\n      n: \"BrtListTrFmla\",\n      f: parsenoop\n    },\n    0x0161: {\n      n: \"BrtBeginExternals\",\n      f: parsenoop\n    },\n    0x0162: {\n      n: \"BrtEndExternals\",\n      f: parsenoop\n    },\n    0x0163: {\n      n: \"BrtSupBookSrc\",\n      f: parsenoop\n    },\n    0x0165: {\n      n: \"BrtSupSelf\",\n      f: parsenoop\n    },\n    0x0166: {\n      n: \"BrtSupSame\",\n      f: parsenoop\n    },\n    0x0167: {\n      n: \"BrtSupTabs\",\n      f: parsenoop\n    },\n    0x0168: {\n      n: \"BrtBeginSupBook\",\n      f: parsenoop\n    },\n    0x0169: {\n      n: \"BrtPlaceholderName\",\n      f: parsenoop\n    },\n    0x016A: {\n      n: \"BrtExternSheet\",\n      f: parsenoop\n    },\n    0x016B: {\n      n: \"BrtExternTableStart\",\n      f: parsenoop\n    },\n    0x016C: {\n      n: \"BrtExternTableEnd\",\n      f: parsenoop\n    },\n    0x016E: {\n      n: \"BrtExternRowHdr\",\n      f: parsenoop\n    },\n    0x016F: {\n      n: \"BrtExternCellBlank\",\n      f: parsenoop\n    },\n    0x0170: {\n      n: \"BrtExternCellReal\",\n      f: parsenoop\n    },\n    0x0171: {\n      n: \"BrtExternCellBool\",\n      f: parsenoop\n    },\n    0x0172: {\n      n: \"BrtExternCellError\",\n      f: parsenoop\n    },\n    0x0173: {\n      n: \"BrtExternCellString\",\n      f: parsenoop\n    },\n    0x0174: {\n      n: \"BrtBeginEsmdx\",\n      f: parsenoop\n    },\n    0x0175: {\n      n: \"BrtEndEsmdx\",\n      f: parsenoop\n    },\n    0x0176: {\n      n: \"BrtBeginMdxSet\",\n      f: parsenoop\n    },\n    0x0177: {\n      n: \"BrtEndMdxSet\",\n      f: parsenoop\n    },\n    0x0178: {\n      n: \"BrtBeginMdxMbrProp\",\n      f: parsenoop\n    },\n    0x0179: {\n      n: \"BrtEndMdxMbrProp\",\n      f: parsenoop\n    },\n    0x017A: {\n      n: \"BrtBeginMdxKPI\",\n      f: parsenoop\n    },\n    0x017B: {\n      n: \"BrtEndMdxKPI\",\n      f: parsenoop\n    },\n    0x017C: {\n      n: \"BrtBeginEsstr\",\n      f: parsenoop\n    },\n    0x017D: {\n      n: \"BrtEndEsstr\",\n      f: parsenoop\n    },\n    0x017E: {\n      n: \"BrtBeginPRFItem\",\n      f: parsenoop\n    },\n    0x017F: {\n      n: \"BrtEndPRFItem\",\n      f: parsenoop\n    },\n    0x0180: {\n      n: \"BrtBeginPivotCacheIDs\",\n      f: parsenoop\n    },\n    0x0181: {\n      n: \"BrtEndPivotCacheIDs\",\n      f: parsenoop\n    },\n    0x0182: {\n      n: \"BrtBeginPivotCacheID\",\n      f: parsenoop\n    },\n    0x0183: {\n      n: \"BrtEndPivotCacheID\",\n      f: parsenoop\n    },\n    0x0184: {\n      n: \"BrtBeginISXVIs\",\n      f: parsenoop\n    },\n    0x0185: {\n      n: \"BrtEndISXVIs\",\n      f: parsenoop\n    },\n    0x0186: {\n      n: \"BrtBeginColInfos\",\n      f: parsenoop\n    },\n    0x0187: {\n      n: \"BrtEndColInfos\",\n      f: parsenoop\n    },\n    0x0188: {\n      n: \"BrtBeginRwBrk\",\n      f: parsenoop\n    },\n    0x0189: {\n      n: \"BrtEndRwBrk\",\n      f: parsenoop\n    },\n    0x018A: {\n      n: \"BrtBeginColBrk\",\n      f: parsenoop\n    },\n    0x018B: {\n      n: \"BrtEndColBrk\",\n      f: parsenoop\n    },\n    0x018C: {\n      n: \"BrtBrk\",\n      f: parsenoop\n    },\n    0x018D: {\n      n: \"BrtUserBookView\",\n      f: parsenoop\n    },\n    0x018E: {\n      n: \"BrtInfo\",\n      f: parsenoop\n    },\n    0x018F: {\n      n: \"BrtCUsr\",\n      f: parsenoop\n    },\n    0x0190: {\n      n: \"BrtUsr\",\n      f: parsenoop\n    },\n    0x0191: {\n      n: \"BrtBeginUsers\",\n      f: parsenoop\n    },\n    0x0193: {\n      n: \"BrtEOF\",\n      f: parsenoop\n    },\n    0x0194: {\n      n: \"BrtUCR\",\n      f: parsenoop\n    },\n    0x0195: {\n      n: \"BrtRRInsDel\",\n      f: parsenoop\n    },\n    0x0196: {\n      n: \"BrtRREndInsDel\",\n      f: parsenoop\n    },\n    0x0197: {\n      n: \"BrtRRMove\",\n      f: parsenoop\n    },\n    0x0198: {\n      n: \"BrtRREndMove\",\n      f: parsenoop\n    },\n    0x0199: {\n      n: \"BrtRRChgCell\",\n      f: parsenoop\n    },\n    0x019A: {\n      n: \"BrtRREndChgCell\",\n      f: parsenoop\n    },\n    0x019B: {\n      n: \"BrtRRHeader\",\n      f: parsenoop\n    },\n    0x019C: {\n      n: \"BrtRRUserView\",\n      f: parsenoop\n    },\n    0x019D: {\n      n: \"BrtRRRenSheet\",\n      f: parsenoop\n    },\n    0x019E: {\n      n: \"BrtRRInsertSh\",\n      f: parsenoop\n    },\n    0x019F: {\n      n: \"BrtRRDefName\",\n      f: parsenoop\n    },\n    0x01A0: {\n      n: \"BrtRRNote\",\n      f: parsenoop\n    },\n    0x01A1: {\n      n: \"BrtRRConflict\",\n      f: parsenoop\n    },\n    0x01A2: {\n      n: \"BrtRRTQSIF\",\n      f: parsenoop\n    },\n    0x01A3: {\n      n: \"BrtRRFormat\",\n      f: parsenoop\n    },\n    0x01A4: {\n      n: \"BrtRREndFormat\",\n      f: parsenoop\n    },\n    0x01A5: {\n      n: \"BrtRRAutoFmt\",\n      f: parsenoop\n    },\n    0x01A6: {\n      n: \"BrtBeginUserShViews\",\n      f: parsenoop\n    },\n    0x01A7: {\n      n: \"BrtBeginUserShView\",\n      f: parsenoop\n    },\n    0x01A8: {\n      n: \"BrtEndUserShView\",\n      f: parsenoop\n    },\n    0x01A9: {\n      n: \"BrtEndUserShViews\",\n      f: parsenoop\n    },\n    0x01AA: {\n      n: \"BrtArrFmla\",\n      f: parsenoop\n    },\n    0x01AB: {\n      n: \"BrtShrFmla\",\n      f: parsenoop\n    },\n    0x01AC: {\n      n: \"BrtTable\",\n      f: parsenoop\n    },\n    0x01AD: {\n      n: \"BrtBeginExtConnections\",\n      f: parsenoop\n    },\n    0x01AE: {\n      n: \"BrtEndExtConnections\",\n      f: parsenoop\n    },\n    0x01AF: {\n      n: \"BrtBeginPCDCalcMems\",\n      f: parsenoop\n    },\n    0x01B0: {\n      n: \"BrtEndPCDCalcMems\",\n      f: parsenoop\n    },\n    0x01B1: {\n      n: \"BrtBeginPCDCalcMem\",\n      f: parsenoop\n    },\n    0x01B2: {\n      n: \"BrtEndPCDCalcMem\",\n      f: parsenoop\n    },\n    0x01B3: {\n      n: \"BrtBeginPCDHGLevels\",\n      f: parsenoop\n    },\n    0x01B4: {\n      n: \"BrtEndPCDHGLevels\",\n      f: parsenoop\n    },\n    0x01B5: {\n      n: \"BrtBeginPCDHGLevel\",\n      f: parsenoop\n    },\n    0x01B6: {\n      n: \"BrtEndPCDHGLevel\",\n      f: parsenoop\n    },\n    0x01B7: {\n      n: \"BrtBeginPCDHGLGroups\",\n      f: parsenoop\n    },\n    0x01B8: {\n      n: \"BrtEndPCDHGLGroups\",\n      f: parsenoop\n    },\n    0x01B9: {\n      n: \"BrtBeginPCDHGLGroup\",\n      f: parsenoop\n    },\n    0x01BA: {\n      n: \"BrtEndPCDHGLGroup\",\n      f: parsenoop\n    },\n    0x01BB: {\n      n: \"BrtBeginPCDHGLGMembers\",\n      f: parsenoop\n    },\n    0x01BC: {\n      n: \"BrtEndPCDHGLGMembers\",\n      f: parsenoop\n    },\n    0x01BD: {\n      n: \"BrtBeginPCDHGLGMember\",\n      f: parsenoop\n    },\n    0x01BE: {\n      n: \"BrtEndPCDHGLGMember\",\n      f: parsenoop\n    },\n    0x01BF: {\n      n: \"BrtBeginQSI\",\n      f: parsenoop\n    },\n    0x01C0: {\n      n: \"BrtEndQSI\",\n      f: parsenoop\n    },\n    0x01C1: {\n      n: \"BrtBeginQSIR\",\n      f: parsenoop\n    },\n    0x01C2: {\n      n: \"BrtEndQSIR\",\n      f: parsenoop\n    },\n    0x01C3: {\n      n: \"BrtBeginDeletedNames\",\n      f: parsenoop\n    },\n    0x01C4: {\n      n: \"BrtEndDeletedNames\",\n      f: parsenoop\n    },\n    0x01C5: {\n      n: \"BrtBeginDeletedName\",\n      f: parsenoop\n    },\n    0x01C6: {\n      n: \"BrtEndDeletedName\",\n      f: parsenoop\n    },\n    0x01C7: {\n      n: \"BrtBeginQSIFs\",\n      f: parsenoop\n    },\n    0x01C8: {\n      n: \"BrtEndQSIFs\",\n      f: parsenoop\n    },\n    0x01C9: {\n      n: \"BrtBeginQSIF\",\n      f: parsenoop\n    },\n    0x01CA: {\n      n: \"BrtEndQSIF\",\n      f: parsenoop\n    },\n    0x01CB: {\n      n: \"BrtBeginAutoSortScope\",\n      f: parsenoop\n    },\n    0x01CC: {\n      n: \"BrtEndAutoSortScope\",\n      f: parsenoop\n    },\n    0x01CD: {\n      n: \"BrtBeginConditionalFormatting\",\n      f: parsenoop\n    },\n    0x01CE: {\n      n: \"BrtEndConditionalFormatting\",\n      f: parsenoop\n    },\n    0x01CF: {\n      n: \"BrtBeginCFRule\",\n      f: parsenoop\n    },\n    0x01D0: {\n      n: \"BrtEndCFRule\",\n      f: parsenoop\n    },\n    0x01D1: {\n      n: \"BrtBeginIconSet\",\n      f: parsenoop\n    },\n    0x01D2: {\n      n: \"BrtEndIconSet\",\n      f: parsenoop\n    },\n    0x01D3: {\n      n: \"BrtBeginDatabar\",\n      f: parsenoop\n    },\n    0x01D4: {\n      n: \"BrtEndDatabar\",\n      f: parsenoop\n    },\n    0x01D5: {\n      n: \"BrtBeginColorScale\",\n      f: parsenoop\n    },\n    0x01D6: {\n      n: \"BrtEndColorScale\",\n      f: parsenoop\n    },\n    0x01D7: {\n      n: \"BrtCFVO\",\n      f: parsenoop\n    },\n    0x01D8: {\n      n: \"BrtExternValueMeta\",\n      f: parsenoop\n    },\n    0x01D9: {\n      n: \"BrtBeginColorPalette\",\n      f: parsenoop\n    },\n    0x01DA: {\n      n: \"BrtEndColorPalette\",\n      f: parsenoop\n    },\n    0x01DB: {\n      n: \"BrtIndexedColor\",\n      f: parsenoop\n    },\n    0x01DC: {\n      n: \"BrtMargins\",\n      f: parsenoop\n    },\n    0x01DD: {\n      n: \"BrtPrintOptions\",\n      f: parsenoop\n    },\n    0x01DE: {\n      n: \"BrtPageSetup\",\n      f: parsenoop\n    },\n    0x01DF: {\n      n: \"BrtBeginHeaderFooter\",\n      f: parsenoop\n    },\n    0x01E0: {\n      n: \"BrtEndHeaderFooter\",\n      f: parsenoop\n    },\n    0x01E1: {\n      n: \"BrtBeginSXCrtFormat\",\n      f: parsenoop\n    },\n    0x01E2: {\n      n: \"BrtEndSXCrtFormat\",\n      f: parsenoop\n    },\n    0x01E3: {\n      n: \"BrtBeginSXCrtFormats\",\n      f: parsenoop\n    },\n    0x01E4: {\n      n: \"BrtEndSXCrtFormats\",\n      f: parsenoop\n    },\n    0x01E5: {\n      n: \"BrtWsFmtInfo\",\n      f: parsenoop\n    },\n    0x01E6: {\n      n: \"BrtBeginMgs\",\n      f: parsenoop\n    },\n    0x01E7: {\n      n: \"BrtEndMGs\",\n      f: parsenoop\n    },\n    0x01E8: {\n      n: \"BrtBeginMGMaps\",\n      f: parsenoop\n    },\n    0x01E9: {\n      n: \"BrtEndMGMaps\",\n      f: parsenoop\n    },\n    0x01EA: {\n      n: \"BrtBeginMG\",\n      f: parsenoop\n    },\n    0x01EB: {\n      n: \"BrtEndMG\",\n      f: parsenoop\n    },\n    0x01EC: {\n      n: \"BrtBeginMap\",\n      f: parsenoop\n    },\n    0x01ED: {\n      n: \"BrtEndMap\",\n      f: parsenoop\n    },\n    0x01EE: {\n      n: \"BrtHLink\",\n      f: parse_BrtHLink\n    },\n    0x01EF: {\n      n: \"BrtBeginDCon\",\n      f: parsenoop\n    },\n    0x01F0: {\n      n: \"BrtEndDCon\",\n      f: parsenoop\n    },\n    0x01F1: {\n      n: \"BrtBeginDRefs\",\n      f: parsenoop\n    },\n    0x01F2: {\n      n: \"BrtEndDRefs\",\n      f: parsenoop\n    },\n    0x01F3: {\n      n: \"BrtDRef\",\n      f: parsenoop\n    },\n    0x01F4: {\n      n: \"BrtBeginScenMan\",\n      f: parsenoop\n    },\n    0x01F5: {\n      n: \"BrtEndScenMan\",\n      f: parsenoop\n    },\n    0x01F6: {\n      n: \"BrtBeginSct\",\n      f: parsenoop\n    },\n    0x01F7: {\n      n: \"BrtEndSct\",\n      f: parsenoop\n    },\n    0x01F8: {\n      n: \"BrtSlc\",\n      f: parsenoop\n    },\n    0x01F9: {\n      n: \"BrtBeginDXFs\",\n      f: parsenoop\n    },\n    0x01FA: {\n      n: \"BrtEndDXFs\",\n      f: parsenoop\n    },\n    0x01FB: {\n      n: \"BrtDXF\",\n      f: parsenoop\n    },\n    0x01FC: {\n      n: \"BrtBeginTableStyles\",\n      f: parsenoop\n    },\n    0x01FD: {\n      n: \"BrtEndTableStyles\",\n      f: parsenoop\n    },\n    0x01FE: {\n      n: \"BrtBeginTableStyle\",\n      f: parsenoop\n    },\n    0x01FF: {\n      n: \"BrtEndTableStyle\",\n      f: parsenoop\n    },\n    0x0200: {\n      n: \"BrtTableStyleElement\",\n      f: parsenoop\n    },\n    0x0201: {\n      n: \"BrtTableStyleClient\",\n      f: parsenoop\n    },\n    0x0202: {\n      n: \"BrtBeginVolDeps\",\n      f: parsenoop\n    },\n    0x0203: {\n      n: \"BrtEndVolDeps\",\n      f: parsenoop\n    },\n    0x0204: {\n      n: \"BrtBeginVolType\",\n      f: parsenoop\n    },\n    0x0205: {\n      n: \"BrtEndVolType\",\n      f: parsenoop\n    },\n    0x0206: {\n      n: \"BrtBeginVolMain\",\n      f: parsenoop\n    },\n    0x0207: {\n      n: \"BrtEndVolMain\",\n      f: parsenoop\n    },\n    0x0208: {\n      n: \"BrtBeginVolTopic\",\n      f: parsenoop\n    },\n    0x0209: {\n      n: \"BrtEndVolTopic\",\n      f: parsenoop\n    },\n    0x020A: {\n      n: \"BrtVolSubtopic\",\n      f: parsenoop\n    },\n    0x020B: {\n      n: \"BrtVolRef\",\n      f: parsenoop\n    },\n    0x020C: {\n      n: \"BrtVolNum\",\n      f: parsenoop\n    },\n    0x020D: {\n      n: \"BrtVolErr\",\n      f: parsenoop\n    },\n    0x020E: {\n      n: \"BrtVolStr\",\n      f: parsenoop\n    },\n    0x020F: {\n      n: \"BrtVolBool\",\n      f: parsenoop\n    },\n    0x0210: {\n      n: \"BrtBeginCalcChain$\",\n      f: parsenoop\n    },\n    0x0211: {\n      n: \"BrtEndCalcChain$\",\n      f: parsenoop\n    },\n    0x0212: {\n      n: \"BrtBeginSortState\",\n      f: parsenoop\n    },\n    0x0213: {\n      n: \"BrtEndSortState\",\n      f: parsenoop\n    },\n    0x0214: {\n      n: \"BrtBeginSortCond\",\n      f: parsenoop\n    },\n    0x0215: {\n      n: \"BrtEndSortCond\",\n      f: parsenoop\n    },\n    0x0216: {\n      n: \"BrtBookProtection\",\n      f: parsenoop\n    },\n    0x0217: {\n      n: \"BrtSheetProtection\",\n      f: parsenoop\n    },\n    0x0218: {\n      n: \"BrtRangeProtection\",\n      f: parsenoop\n    },\n    0x0219: {\n      n: \"BrtPhoneticInfo\",\n      f: parsenoop\n    },\n    0x021A: {\n      n: \"BrtBeginECTxtWiz\",\n      f: parsenoop\n    },\n    0x021B: {\n      n: \"BrtEndECTxtWiz\",\n      f: parsenoop\n    },\n    0x021C: {\n      n: \"BrtBeginECTWFldInfoLst\",\n      f: parsenoop\n    },\n    0x021D: {\n      n: \"BrtEndECTWFldInfoLst\",\n      f: parsenoop\n    },\n    0x021E: {\n      n: \"BrtBeginECTwFldInfo\",\n      f: parsenoop\n    },\n    0x0224: {\n      n: \"BrtFileSharing\",\n      f: parsenoop\n    },\n    0x0225: {\n      n: \"BrtOleSize\",\n      f: parsenoop\n    },\n    0x0226: {\n      n: \"BrtDrawing\",\n      f: parsenoop\n    },\n    0x0227: {\n      n: \"BrtLegacyDrawing\",\n      f: parsenoop\n    },\n    0x0228: {\n      n: \"BrtLegacyDrawingHF\",\n      f: parsenoop\n    },\n    0x0229: {\n      n: \"BrtWebOpt\",\n      f: parsenoop\n    },\n    0x022A: {\n      n: \"BrtBeginWebPubItems\",\n      f: parsenoop\n    },\n    0x022B: {\n      n: \"BrtEndWebPubItems\",\n      f: parsenoop\n    },\n    0x022C: {\n      n: \"BrtBeginWebPubItem\",\n      f: parsenoop\n    },\n    0x022D: {\n      n: \"BrtEndWebPubItem\",\n      f: parsenoop\n    },\n    0x022E: {\n      n: \"BrtBeginSXCondFmt\",\n      f: parsenoop\n    },\n    0x022F: {\n      n: \"BrtEndSXCondFmt\",\n      f: parsenoop\n    },\n    0x0230: {\n      n: \"BrtBeginSXCondFmts\",\n      f: parsenoop\n    },\n    0x0231: {\n      n: \"BrtEndSXCondFmts\",\n      f: parsenoop\n    },\n    0x0232: {\n      n: \"BrtBkHim\",\n      f: parsenoop\n    },\n    0x0234: {\n      n: \"BrtColor\",\n      f: parsenoop\n    },\n    0x0235: {\n      n: \"BrtBeginIndexedColors\",\n      f: parsenoop\n    },\n    0x0236: {\n      n: \"BrtEndIndexedColors\",\n      f: parsenoop\n    },\n    0x0239: {\n      n: \"BrtBeginMRUColors\",\n      f: parsenoop\n    },\n    0x023A: {\n      n: \"BrtEndMRUColors\",\n      f: parsenoop\n    },\n    0x023C: {\n      n: \"BrtMRUColor\",\n      f: parsenoop\n    },\n    0x023D: {\n      n: \"BrtBeginDVals\",\n      f: parsenoop\n    },\n    0x023E: {\n      n: \"BrtEndDVals\",\n      f: parsenoop\n    },\n    0x0241: {\n      n: \"BrtSupNameStart\",\n      f: parsenoop\n    },\n    0x0242: {\n      n: \"BrtSupNameValueStart\",\n      f: parsenoop\n    },\n    0x0243: {\n      n: \"BrtSupNameValueEnd\",\n      f: parsenoop\n    },\n    0x0244: {\n      n: \"BrtSupNameNum\",\n      f: parsenoop\n    },\n    0x0245: {\n      n: \"BrtSupNameErr\",\n      f: parsenoop\n    },\n    0x0246: {\n      n: \"BrtSupNameSt\",\n      f: parsenoop\n    },\n    0x0247: {\n      n: \"BrtSupNameNil\",\n      f: parsenoop\n    },\n    0x0248: {\n      n: \"BrtSupNameBool\",\n      f: parsenoop\n    },\n    0x0249: {\n      n: \"BrtSupNameFmla\",\n      f: parsenoop\n    },\n    0x024A: {\n      n: \"BrtSupNameBits\",\n      f: parsenoop\n    },\n    0x024B: {\n      n: \"BrtSupNameEnd\",\n      f: parsenoop\n    },\n    0x024C: {\n      n: \"BrtEndSupBook\",\n      f: parsenoop\n    },\n    0x024D: {\n      n: \"BrtCellSmartTagProperty\",\n      f: parsenoop\n    },\n    0x024E: {\n      n: \"BrtBeginCellSmartTag\",\n      f: parsenoop\n    },\n    0x024F: {\n      n: \"BrtEndCellSmartTag\",\n      f: parsenoop\n    },\n    0x0250: {\n      n: \"BrtBeginCellSmartTags\",\n      f: parsenoop\n    },\n    0x0251: {\n      n: \"BrtEndCellSmartTags\",\n      f: parsenoop\n    },\n    0x0252: {\n      n: \"BrtBeginSmartTags\",\n      f: parsenoop\n    },\n    0x0253: {\n      n: \"BrtEndSmartTags\",\n      f: parsenoop\n    },\n    0x0254: {\n      n: \"BrtSmartTagType\",\n      f: parsenoop\n    },\n    0x0255: {\n      n: \"BrtBeginSmartTagTypes\",\n      f: parsenoop\n    },\n    0x0256: {\n      n: \"BrtEndSmartTagTypes\",\n      f: parsenoop\n    },\n    0x0257: {\n      n: \"BrtBeginSXFilters\",\n      f: parsenoop\n    },\n    0x0258: {\n      n: \"BrtEndSXFilters\",\n      f: parsenoop\n    },\n    0x0259: {\n      n: \"BrtBeginSXFILTER\",\n      f: parsenoop\n    },\n    0x025A: {\n      n: \"BrtEndSXFilter\",\n      f: parsenoop\n    },\n    0x025B: {\n      n: \"BrtBeginFills\",\n      f: parsenoop\n    },\n    0x025C: {\n      n: \"BrtEndFills\",\n      f: parsenoop\n    },\n    0x025D: {\n      n: \"BrtBeginCellWatches\",\n      f: parsenoop\n    },\n    0x025E: {\n      n: \"BrtEndCellWatches\",\n      f: parsenoop\n    },\n    0x025F: {\n      n: \"BrtCellWatch\",\n      f: parsenoop\n    },\n    0x0260: {\n      n: \"BrtBeginCRErrs\",\n      f: parsenoop\n    },\n    0x0261: {\n      n: \"BrtEndCRErrs\",\n      f: parsenoop\n    },\n    0x0262: {\n      n: \"BrtCrashRecErr\",\n      f: parsenoop\n    },\n    0x0263: {\n      n: \"BrtBeginFonts\",\n      f: parsenoop\n    },\n    0x0264: {\n      n: \"BrtEndFonts\",\n      f: parsenoop\n    },\n    0x0265: {\n      n: \"BrtBeginBorders\",\n      f: parsenoop\n    },\n    0x0266: {\n      n: \"BrtEndBorders\",\n      f: parsenoop\n    },\n    0x0267: {\n      n: \"BrtBeginFmts\",\n      f: parsenoop\n    },\n    0x0268: {\n      n: \"BrtEndFmts\",\n      f: parsenoop\n    },\n    0x0269: {\n      n: \"BrtBeginCellXFs\",\n      f: parsenoop\n    },\n    0x026A: {\n      n: \"BrtEndCellXFs\",\n      f: parsenoop\n    },\n    0x026B: {\n      n: \"BrtBeginStyles\",\n      f: parsenoop\n    },\n    0x026C: {\n      n: \"BrtEndStyles\",\n      f: parsenoop\n    },\n    0x0271: {\n      n: \"BrtBigName\",\n      f: parsenoop\n    },\n    0x0272: {\n      n: \"BrtBeginCellStyleXFs\",\n      f: parsenoop\n    },\n    0x0273: {\n      n: \"BrtEndCellStyleXFs\",\n      f: parsenoop\n    },\n    0x0274: {\n      n: \"BrtBeginComments\",\n      f: parsenoop\n    },\n    0x0275: {\n      n: \"BrtEndComments\",\n      f: parsenoop\n    },\n    0x0276: {\n      n: \"BrtBeginCommentAuthors\",\n      f: parsenoop\n    },\n    0x0277: {\n      n: \"BrtEndCommentAuthors\",\n      f: parsenoop\n    },\n    0x0278: {\n      n: \"BrtCommentAuthor\",\n      f: parse_BrtCommentAuthor\n    },\n    0x0279: {\n      n: \"BrtBeginCommentList\",\n      f: parsenoop\n    },\n    0x027A: {\n      n: \"BrtEndCommentList\",\n      f: parsenoop\n    },\n    0x027B: {\n      n: \"BrtBeginComment\",\n      f: parse_BrtBeginComment\n    },\n    0x027C: {\n      n: \"BrtEndComment\",\n      f: parsenoop\n    },\n    0x027D: {\n      n: \"BrtCommentText\",\n      f: parse_BrtCommentText\n    },\n    0x027E: {\n      n: \"BrtBeginOleObjects\",\n      f: parsenoop\n    },\n    0x027F: {\n      n: \"BrtOleObject\",\n      f: parsenoop\n    },\n    0x0280: {\n      n: \"BrtEndOleObjects\",\n      f: parsenoop\n    },\n    0x0281: {\n      n: \"BrtBeginSxrules\",\n      f: parsenoop\n    },\n    0x0282: {\n      n: \"BrtEndSxRules\",\n      f: parsenoop\n    },\n    0x0283: {\n      n: \"BrtBeginActiveXControls\",\n      f: parsenoop\n    },\n    0x0284: {\n      n: \"BrtActiveX\",\n      f: parsenoop\n    },\n    0x0285: {\n      n: \"BrtEndActiveXControls\",\n      f: parsenoop\n    },\n    0x0286: {\n      n: \"BrtBeginPCDSDTCEMembersSortBy\",\n      f: parsenoop\n    },\n    0x0288: {\n      n: \"BrtBeginCellIgnoreECs\",\n      f: parsenoop\n    },\n    0x0289: {\n      n: \"BrtCellIgnoreEC\",\n      f: parsenoop\n    },\n    0x028A: {\n      n: \"BrtEndCellIgnoreECs\",\n      f: parsenoop\n    },\n    0x028B: {\n      n: \"BrtCsProp\",\n      f: parsenoop\n    },\n    0x028C: {\n      n: \"BrtCsPageSetup\",\n      f: parsenoop\n    },\n    0x028D: {\n      n: \"BrtBeginUserCsViews\",\n      f: parsenoop\n    },\n    0x028E: {\n      n: \"BrtEndUserCsViews\",\n      f: parsenoop\n    },\n    0x028F: {\n      n: \"BrtBeginUserCsView\",\n      f: parsenoop\n    },\n    0x0290: {\n      n: \"BrtEndUserCsView\",\n      f: parsenoop\n    },\n    0x0291: {\n      n: \"BrtBeginPcdSFCIEntries\",\n      f: parsenoop\n    },\n    0x0292: {\n      n: \"BrtEndPCDSFCIEntries\",\n      f: parsenoop\n    },\n    0x0293: {\n      n: \"BrtPCDSFCIEntry\",\n      f: parsenoop\n    },\n    0x0294: {\n      n: \"BrtBeginListParts\",\n      f: parsenoop\n    },\n    0x0295: {\n      n: \"BrtListPart\",\n      f: parsenoop\n    },\n    0x0296: {\n      n: \"BrtEndListParts\",\n      f: parsenoop\n    },\n    0x0297: {\n      n: \"BrtSheetCalcProp\",\n      f: parsenoop\n    },\n    0x0298: {\n      n: \"BrtBeginFnGroup\",\n      f: parsenoop\n    },\n    0x0299: {\n      n: \"BrtFnGroup\",\n      f: parsenoop\n    },\n    0x029A: {\n      n: \"BrtEndFnGroup\",\n      f: parsenoop\n    },\n    0x029B: {\n      n: \"BrtSupAddin\",\n      f: parsenoop\n    },\n    0x029C: {\n      n: \"BrtSXTDMPOrder\",\n      f: parsenoop\n    },\n    0x029D: {\n      n: \"BrtCsProtection\",\n      f: parsenoop\n    },\n    0x029F: {\n      n: \"BrtBeginWsSortMap\",\n      f: parsenoop\n    },\n    0x02A0: {\n      n: \"BrtEndWsSortMap\",\n      f: parsenoop\n    },\n    0x02A1: {\n      n: \"BrtBeginRRSort\",\n      f: parsenoop\n    },\n    0x02A2: {\n      n: \"BrtEndRRSort\",\n      f: parsenoop\n    },\n    0x02A3: {\n      n: \"BrtRRSortItem\",\n      f: parsenoop\n    },\n    0x02A4: {\n      n: \"BrtFileSharingIso\",\n      f: parsenoop\n    },\n    0x02A5: {\n      n: \"BrtBookProtectionIso\",\n      f: parsenoop\n    },\n    0x02A6: {\n      n: \"BrtSheetProtectionIso\",\n      f: parsenoop\n    },\n    0x02A7: {\n      n: \"BrtCsProtectionIso\",\n      f: parsenoop\n    },\n    0x02A8: {\n      n: \"BrtRangeProtectionIso\",\n      f: parsenoop\n    },\n    0x0400: {\n      n: \"BrtRwDescent\",\n      f: parsenoop\n    },\n    0x0401: {\n      n: \"BrtKnownFonts\",\n      f: parsenoop\n    },\n    0x0402: {\n      n: \"BrtBeginSXTupleSet\",\n      f: parsenoop\n    },\n    0x0403: {\n      n: \"BrtEndSXTupleSet\",\n      f: parsenoop\n    },\n    0x0404: {\n      n: \"BrtBeginSXTupleSetHeader\",\n      f: parsenoop\n    },\n    0x0405: {\n      n: \"BrtEndSXTupleSetHeader\",\n      f: parsenoop\n    },\n    0x0406: {\n      n: \"BrtSXTupleSetHeaderItem\",\n      f: parsenoop\n    },\n    0x0407: {\n      n: \"BrtBeginSXTupleSetData\",\n      f: parsenoop\n    },\n    0x0408: {\n      n: \"BrtEndSXTupleSetData\",\n      f: parsenoop\n    },\n    0x0409: {\n      n: \"BrtBeginSXTupleSetRow\",\n      f: parsenoop\n    },\n    0x040A: {\n      n: \"BrtEndSXTupleSetRow\",\n      f: parsenoop\n    },\n    0x040B: {\n      n: \"BrtSXTupleSetRowItem\",\n      f: parsenoop\n    },\n    0x040C: {\n      n: \"BrtNameExt\",\n      f: parsenoop\n    },\n    0x040D: {\n      n: \"BrtPCDH14\",\n      f: parsenoop\n    },\n    0x040E: {\n      n: \"BrtBeginPCDCalcMem14\",\n      f: parsenoop\n    },\n    0x040F: {\n      n: \"BrtEndPCDCalcMem14\",\n      f: parsenoop\n    },\n    0x0410: {\n      n: \"BrtSXTH14\",\n      f: parsenoop\n    },\n    0x0411: {\n      n: \"BrtBeginSparklineGroup\",\n      f: parsenoop\n    },\n    0x0412: {\n      n: \"BrtEndSparklineGroup\",\n      f: parsenoop\n    },\n    0x0413: {\n      n: \"BrtSparkline\",\n      f: parsenoop\n    },\n    0x0414: {\n      n: \"BrtSXDI14\",\n      f: parsenoop\n    },\n    0x0415: {\n      n: \"BrtWsFmtInfoEx14\",\n      f: parsenoop\n    },\n    0x0416: {\n      n: \"BrtBeginConditionalFormatting14\",\n      f: parsenoop\n    },\n    0x0417: {\n      n: \"BrtEndConditionalFormatting14\",\n      f: parsenoop\n    },\n    0x0418: {\n      n: \"BrtBeginCFRule14\",\n      f: parsenoop\n    },\n    0x0419: {\n      n: \"BrtEndCFRule14\",\n      f: parsenoop\n    },\n    0x041A: {\n      n: \"BrtCFVO14\",\n      f: parsenoop\n    },\n    0x041B: {\n      n: \"BrtBeginDatabar14\",\n      f: parsenoop\n    },\n    0x041C: {\n      n: \"BrtBeginIconSet14\",\n      f: parsenoop\n    },\n    0x041D: {\n      n: \"BrtDVal14\",\n      f: parsenoop\n    },\n    0x041E: {\n      n: \"BrtBeginDVals14\",\n      f: parsenoop\n    },\n    0x041F: {\n      n: \"BrtColor14\",\n      f: parsenoop\n    },\n    0x0420: {\n      n: \"BrtBeginSparklines\",\n      f: parsenoop\n    },\n    0x0421: {\n      n: \"BrtEndSparklines\",\n      f: parsenoop\n    },\n    0x0422: {\n      n: \"BrtBeginSparklineGroups\",\n      f: parsenoop\n    },\n    0x0423: {\n      n: \"BrtEndSparklineGroups\",\n      f: parsenoop\n    },\n    0x0425: {\n      n: \"BrtSXVD14\",\n      f: parsenoop\n    },\n    0x0426: {\n      n: \"BrtBeginSxview14\",\n      f: parsenoop\n    },\n    0x0427: {\n      n: \"BrtEndSxview14\",\n      f: parsenoop\n    },\n    0x042A: {\n      n: \"BrtBeginPCD14\",\n      f: parsenoop\n    },\n    0x042B: {\n      n: \"BrtEndPCD14\",\n      f: parsenoop\n    },\n    0x042C: {\n      n: \"BrtBeginExtConn14\",\n      f: parsenoop\n    },\n    0x042D: {\n      n: \"BrtEndExtConn14\",\n      f: parsenoop\n    },\n    0x042E: {\n      n: \"BrtBeginSlicerCacheIDs\",\n      f: parsenoop\n    },\n    0x042F: {\n      n: \"BrtEndSlicerCacheIDs\",\n      f: parsenoop\n    },\n    0x0430: {\n      n: \"BrtBeginSlicerCacheID\",\n      f: parsenoop\n    },\n    0x0431: {\n      n: \"BrtEndSlicerCacheID\",\n      f: parsenoop\n    },\n    0x0433: {\n      n: \"BrtBeginSlicerCache\",\n      f: parsenoop\n    },\n    0x0434: {\n      n: \"BrtEndSlicerCache\",\n      f: parsenoop\n    },\n    0x0435: {\n      n: \"BrtBeginSlicerCacheDef\",\n      f: parsenoop\n    },\n    0x0436: {\n      n: \"BrtEndSlicerCacheDef\",\n      f: parsenoop\n    },\n    0x0437: {\n      n: \"BrtBeginSlicersEx\",\n      f: parsenoop\n    },\n    0x0438: {\n      n: \"BrtEndSlicersEx\",\n      f: parsenoop\n    },\n    0x0439: {\n      n: \"BrtBeginSlicerEx\",\n      f: parsenoop\n    },\n    0x043A: {\n      n: \"BrtEndSlicerEx\",\n      f: parsenoop\n    },\n    0x043B: {\n      n: \"BrtBeginSlicer\",\n      f: parsenoop\n    },\n    0x043C: {\n      n: \"BrtEndSlicer\",\n      f: parsenoop\n    },\n    0x043D: {\n      n: \"BrtSlicerCachePivotTables\",\n      f: parsenoop\n    },\n    0x043E: {\n      n: \"BrtBeginSlicerCacheOlapImpl\",\n      f: parsenoop\n    },\n    0x043F: {\n      n: \"BrtEndSlicerCacheOlapImpl\",\n      f: parsenoop\n    },\n    0x0440: {\n      n: \"BrtBeginSlicerCacheLevelsData\",\n      f: parsenoop\n    },\n    0x0441: {\n      n: \"BrtEndSlicerCacheLevelsData\",\n      f: parsenoop\n    },\n    0x0442: {\n      n: \"BrtBeginSlicerCacheLevelData\",\n      f: parsenoop\n    },\n    0x0443: {\n      n: \"BrtEndSlicerCacheLevelData\",\n      f: parsenoop\n    },\n    0x0444: {\n      n: \"BrtBeginSlicerCacheSiRanges\",\n      f: parsenoop\n    },\n    0x0445: {\n      n: \"BrtEndSlicerCacheSiRanges\",\n      f: parsenoop\n    },\n    0x0446: {\n      n: \"BrtBeginSlicerCacheSiRange\",\n      f: parsenoop\n    },\n    0x0447: {\n      n: \"BrtEndSlicerCacheSiRange\",\n      f: parsenoop\n    },\n    0x0448: {\n      n: \"BrtSlicerCacheOlapItem\",\n      f: parsenoop\n    },\n    0x0449: {\n      n: \"BrtBeginSlicerCacheSelections\",\n      f: parsenoop\n    },\n    0x044A: {\n      n: \"BrtSlicerCacheSelection\",\n      f: parsenoop\n    },\n    0x044B: {\n      n: \"BrtEndSlicerCacheSelections\",\n      f: parsenoop\n    },\n    0x044C: {\n      n: \"BrtBeginSlicerCacheNative\",\n      f: parsenoop\n    },\n    0x044D: {\n      n: \"BrtEndSlicerCacheNative\",\n      f: parsenoop\n    },\n    0x044E: {\n      n: \"BrtSlicerCacheNativeItem\",\n      f: parsenoop\n    },\n    0x044F: {\n      n: \"BrtRangeProtection14\",\n      f: parsenoop\n    },\n    0x0450: {\n      n: \"BrtRangeProtectionIso14\",\n      f: parsenoop\n    },\n    0x0451: {\n      n: \"BrtCellIgnoreEC14\",\n      f: parsenoop\n    },\n    0x0457: {\n      n: \"BrtList14\",\n      f: parsenoop\n    },\n    0x0458: {\n      n: \"BrtCFIcon\",\n      f: parsenoop\n    },\n    0x0459: {\n      n: \"BrtBeginSlicerCachesPivotCacheIDs\",\n      f: parsenoop\n    },\n    0x045A: {\n      n: \"BrtEndSlicerCachesPivotCacheIDs\",\n      f: parsenoop\n    },\n    0x045B: {\n      n: \"BrtBeginSlicers\",\n      f: parsenoop\n    },\n    0x045C: {\n      n: \"BrtEndSlicers\",\n      f: parsenoop\n    },\n    0x045D: {\n      n: \"BrtWbProp14\",\n      f: parsenoop\n    },\n    0x045E: {\n      n: \"BrtBeginSXEdit\",\n      f: parsenoop\n    },\n    0x045F: {\n      n: \"BrtEndSXEdit\",\n      f: parsenoop\n    },\n    0x0460: {\n      n: \"BrtBeginSXEdits\",\n      f: parsenoop\n    },\n    0x0461: {\n      n: \"BrtEndSXEdits\",\n      f: parsenoop\n    },\n    0x0462: {\n      n: \"BrtBeginSXChange\",\n      f: parsenoop\n    },\n    0x0463: {\n      n: \"BrtEndSXChange\",\n      f: parsenoop\n    },\n    0x0464: {\n      n: \"BrtBeginSXChanges\",\n      f: parsenoop\n    },\n    0x0465: {\n      n: \"BrtEndSXChanges\",\n      f: parsenoop\n    },\n    0x0466: {\n      n: \"BrtSXTupleItems\",\n      f: parsenoop\n    },\n    0x0468: {\n      n: \"BrtBeginSlicerStyle\",\n      f: parsenoop\n    },\n    0x0469: {\n      n: \"BrtEndSlicerStyle\",\n      f: parsenoop\n    },\n    0x046A: {\n      n: \"BrtSlicerStyleElement\",\n      f: parsenoop\n    },\n    0x046B: {\n      n: \"BrtBeginStyleSheetExt14\",\n      f: parsenoop\n    },\n    0x046C: {\n      n: \"BrtEndStyleSheetExt14\",\n      f: parsenoop\n    },\n    0x046D: {\n      n: \"BrtBeginSlicerCachesPivotCacheID\",\n      f: parsenoop\n    },\n    0x046E: {\n      n: \"BrtEndSlicerCachesPivotCacheID\",\n      f: parsenoop\n    },\n    0x046F: {\n      n: \"BrtBeginConditionalFormattings\",\n      f: parsenoop\n    },\n    0x0470: {\n      n: \"BrtEndConditionalFormattings\",\n      f: parsenoop\n    },\n    0x0471: {\n      n: \"BrtBeginPCDCalcMemExt\",\n      f: parsenoop\n    },\n    0x0472: {\n      n: \"BrtEndPCDCalcMemExt\",\n      f: parsenoop\n    },\n    0x0473: {\n      n: \"BrtBeginPCDCalcMemsExt\",\n      f: parsenoop\n    },\n    0x0474: {\n      n: \"BrtEndPCDCalcMemsExt\",\n      f: parsenoop\n    },\n    0x0475: {\n      n: \"BrtPCDField14\",\n      f: parsenoop\n    },\n    0x0476: {\n      n: \"BrtBeginSlicerStyles\",\n      f: parsenoop\n    },\n    0x0477: {\n      n: \"BrtEndSlicerStyles\",\n      f: parsenoop\n    },\n    0x0478: {\n      n: \"BrtBeginSlicerStyleElements\",\n      f: parsenoop\n    },\n    0x0479: {\n      n: \"BrtEndSlicerStyleElements\",\n      f: parsenoop\n    },\n    0x047A: {\n      n: \"BrtCFRuleExt\",\n      f: parsenoop\n    },\n    0x047B: {\n      n: \"BrtBeginSXCondFmt14\",\n      f: parsenoop\n    },\n    0x047C: {\n      n: \"BrtEndSXCondFmt14\",\n      f: parsenoop\n    },\n    0x047D: {\n      n: \"BrtBeginSXCondFmts14\",\n      f: parsenoop\n    },\n    0x047E: {\n      n: \"BrtEndSXCondFmts14\",\n      f: parsenoop\n    },\n    0x0480: {\n      n: \"BrtBeginSortCond14\",\n      f: parsenoop\n    },\n    0x0481: {\n      n: \"BrtEndSortCond14\",\n      f: parsenoop\n    },\n    0x0482: {\n      n: \"BrtEndDVals14\",\n      f: parsenoop\n    },\n    0x0483: {\n      n: \"BrtEndIconSet14\",\n      f: parsenoop\n    },\n    0x0484: {\n      n: \"BrtEndDatabar14\",\n      f: parsenoop\n    },\n    0x0485: {\n      n: \"BrtBeginColorScale14\",\n      f: parsenoop\n    },\n    0x0486: {\n      n: \"BrtEndColorScale14\",\n      f: parsenoop\n    },\n    0x0487: {\n      n: \"BrtBeginSxrules14\",\n      f: parsenoop\n    },\n    0x0488: {\n      n: \"BrtEndSxrules14\",\n      f: parsenoop\n    },\n    0x0489: {\n      n: \"BrtBeginPRule14\",\n      f: parsenoop\n    },\n    0x048A: {\n      n: \"BrtEndPRule14\",\n      f: parsenoop\n    },\n    0x048B: {\n      n: \"BrtBeginPRFilters14\",\n      f: parsenoop\n    },\n    0x048C: {\n      n: \"BrtEndPRFilters14\",\n      f: parsenoop\n    },\n    0x048D: {\n      n: \"BrtBeginPRFilter14\",\n      f: parsenoop\n    },\n    0x048E: {\n      n: \"BrtEndPRFilter14\",\n      f: parsenoop\n    },\n    0x048F: {\n      n: \"BrtBeginPRFItem14\",\n      f: parsenoop\n    },\n    0x0490: {\n      n: \"BrtEndPRFItem14\",\n      f: parsenoop\n    },\n    0x0491: {\n      n: \"BrtBeginCellIgnoreECs14\",\n      f: parsenoop\n    },\n    0x0492: {\n      n: \"BrtEndCellIgnoreECs14\",\n      f: parsenoop\n    },\n    0x0493: {\n      n: \"BrtDxf14\",\n      f: parsenoop\n    },\n    0x0494: {\n      n: \"BrtBeginDxF14s\",\n      f: parsenoop\n    },\n    0x0495: {\n      n: \"BrtEndDxf14s\",\n      f: parsenoop\n    },\n    0x0499: {\n      n: \"BrtFilter14\",\n      f: parsenoop\n    },\n    0x049A: {\n      n: \"BrtBeginCustomFilters14\",\n      f: parsenoop\n    },\n    0x049C: {\n      n: \"BrtCustomFilter14\",\n      f: parsenoop\n    },\n    0x049D: {\n      n: \"BrtIconFilter14\",\n      f: parsenoop\n    },\n    0x049E: {\n      n: \"BrtPivotCacheConnectionName\",\n      f: parsenoop\n    },\n    0x0800: {\n      n: \"BrtBeginDecoupledPivotCacheIDs\",\n      f: parsenoop\n    },\n    0x0801: {\n      n: \"BrtEndDecoupledPivotCacheIDs\",\n      f: parsenoop\n    },\n    0x0802: {\n      n: \"BrtDecoupledPivotCacheID\",\n      f: parsenoop\n    },\n    0x0803: {\n      n: \"BrtBeginPivotTableRefs\",\n      f: parsenoop\n    },\n    0x0804: {\n      n: \"BrtEndPivotTableRefs\",\n      f: parsenoop\n    },\n    0x0805: {\n      n: \"BrtPivotTableRef\",\n      f: parsenoop\n    },\n    0x0806: {\n      n: \"BrtSlicerCacheBookPivotTables\",\n      f: parsenoop\n    },\n    0x0807: {\n      n: \"BrtBeginSxvcells\",\n      f: parsenoop\n    },\n    0x0808: {\n      n: \"BrtEndSxvcells\",\n      f: parsenoop\n    },\n    0x0809: {\n      n: \"BrtBeginSxRow\",\n      f: parsenoop\n    },\n    0x080A: {\n      n: \"BrtEndSxRow\",\n      f: parsenoop\n    },\n    0x080C: {\n      n: \"BrtPcdCalcMem15\",\n      f: parsenoop\n    },\n    0x0813: {\n      n: \"BrtQsi15\",\n      f: parsenoop\n    },\n    0x0814: {\n      n: \"BrtBeginWebExtensions\",\n      f: parsenoop\n    },\n    0x0815: {\n      n: \"BrtEndWebExtensions\",\n      f: parsenoop\n    },\n    0x0816: {\n      n: \"BrtWebExtension\",\n      f: parsenoop\n    },\n    0x0817: {\n      n: \"BrtAbsPath15\",\n      f: parsenoop\n    },\n    0x0818: {\n      n: \"BrtBeginPivotTableUISettings\",\n      f: parsenoop\n    },\n    0x0819: {\n      n: \"BrtEndPivotTableUISettings\",\n      f: parsenoop\n    },\n    0x081B: {\n      n: \"BrtTableSlicerCacheIDs\",\n      f: parsenoop\n    },\n    0x081C: {\n      n: \"BrtTableSlicerCacheID\",\n      f: parsenoop\n    },\n    0x081D: {\n      n: \"BrtBeginTableSlicerCache\",\n      f: parsenoop\n    },\n    0x081E: {\n      n: \"BrtEndTableSlicerCache\",\n      f: parsenoop\n    },\n    0x081F: {\n      n: \"BrtSxFilter15\",\n      f: parsenoop\n    },\n    0x0820: {\n      n: \"BrtBeginTimelineCachePivotCacheIDs\",\n      f: parsenoop\n    },\n    0x0821: {\n      n: \"BrtEndTimelineCachePivotCacheIDs\",\n      f: parsenoop\n    },\n    0x0822: {\n      n: \"BrtTimelineCachePivotCacheID\",\n      f: parsenoop\n    },\n    0x0823: {\n      n: \"BrtBeginTimelineCacheIDs\",\n      f: parsenoop\n    },\n    0x0824: {\n      n: \"BrtEndTimelineCacheIDs\",\n      f: parsenoop\n    },\n    0x0825: {\n      n: \"BrtBeginTimelineCacheID\",\n      f: parsenoop\n    },\n    0x0826: {\n      n: \"BrtEndTimelineCacheID\",\n      f: parsenoop\n    },\n    0x0827: {\n      n: \"BrtBeginTimelinesEx\",\n      f: parsenoop\n    },\n    0x0828: {\n      n: \"BrtEndTimelinesEx\",\n      f: parsenoop\n    },\n    0x0829: {\n      n: \"BrtBeginTimelineEx\",\n      f: parsenoop\n    },\n    0x082A: {\n      n: \"BrtEndTimelineEx\",\n      f: parsenoop\n    },\n    0x082B: {\n      n: \"BrtWorkBookPr15\",\n      f: parsenoop\n    },\n    0x082C: {\n      n: \"BrtPCDH15\",\n      f: parsenoop\n    },\n    0x082D: {\n      n: \"BrtBeginTimelineStyle\",\n      f: parsenoop\n    },\n    0x082E: {\n      n: \"BrtEndTimelineStyle\",\n      f: parsenoop\n    },\n    0x082F: {\n      n: \"BrtTimelineStyleElement\",\n      f: parsenoop\n    },\n    0x0830: {\n      n: \"BrtBeginTimelineStylesheetExt15\",\n      f: parsenoop\n    },\n    0x0831: {\n      n: \"BrtEndTimelineStylesheetExt15\",\n      f: parsenoop\n    },\n    0x0832: {\n      n: \"BrtBeginTimelineStyles\",\n      f: parsenoop\n    },\n    0x0833: {\n      n: \"BrtEndTimelineStyles\",\n      f: parsenoop\n    },\n    0x0834: {\n      n: \"BrtBeginTimelineStyleElements\",\n      f: parsenoop\n    },\n    0x0835: {\n      n: \"BrtEndTimelineStyleElements\",\n      f: parsenoop\n    },\n    0x0836: {\n      n: \"BrtDxf15\",\n      f: parsenoop\n    },\n    0x0837: {\n      n: \"BrtBeginDxfs15\",\n      f: parsenoop\n    },\n    0x0838: {\n      n: \"brtEndDxfs15\",\n      f: parsenoop\n    },\n    0x0839: {\n      n: \"BrtSlicerCacheHideItemsWithNoData\",\n      f: parsenoop\n    },\n    0x083A: {\n      n: \"BrtBeginItemUniqueNames\",\n      f: parsenoop\n    },\n    0x083B: {\n      n: \"BrtEndItemUniqueNames\",\n      f: parsenoop\n    },\n    0x083C: {\n      n: \"BrtItemUniqueName\",\n      f: parsenoop\n    },\n    0x083D: {\n      n: \"BrtBeginExtConn15\",\n      f: parsenoop\n    },\n    0x083E: {\n      n: \"BrtEndExtConn15\",\n      f: parsenoop\n    },\n    0x083F: {\n      n: \"BrtBeginOledbPr15\",\n      f: parsenoop\n    },\n    0x0840: {\n      n: \"BrtEndOledbPr15\",\n      f: parsenoop\n    },\n    0x0841: {\n      n: \"BrtBeginDataFeedPr15\",\n      f: parsenoop\n    },\n    0x0842: {\n      n: \"BrtEndDataFeedPr15\",\n      f: parsenoop\n    },\n    0x0843: {\n      n: \"BrtTextPr15\",\n      f: parsenoop\n    },\n    0x0844: {\n      n: \"BrtRangePr15\",\n      f: parsenoop\n    },\n    0x0845: {\n      n: \"BrtDbCommand15\",\n      f: parsenoop\n    },\n    0x0846: {\n      n: \"BrtBeginDbTables15\",\n      f: parsenoop\n    },\n    0x0847: {\n      n: \"BrtEndDbTables15\",\n      f: parsenoop\n    },\n    0x0848: {\n      n: \"BrtDbTable15\",\n      f: parsenoop\n    },\n    0x0849: {\n      n: \"BrtBeginDataModel\",\n      f: parsenoop\n    },\n    0x084A: {\n      n: \"BrtEndDataModel\",\n      f: parsenoop\n    },\n    0x084B: {\n      n: \"BrtBeginModelTables\",\n      f: parsenoop\n    },\n    0x084C: {\n      n: \"BrtEndModelTables\",\n      f: parsenoop\n    },\n    0x084D: {\n      n: \"BrtModelTable\",\n      f: parsenoop\n    },\n    0x084E: {\n      n: \"BrtBeginModelRelationships\",\n      f: parsenoop\n    },\n    0x084F: {\n      n: \"BrtEndModelRelationships\",\n      f: parsenoop\n    },\n    0x0850: {\n      n: \"BrtModelRelationship\",\n      f: parsenoop\n    },\n    0x0851: {\n      n: \"BrtBeginECTxtWiz15\",\n      f: parsenoop\n    },\n    0x0852: {\n      n: \"BrtEndECTxtWiz15\",\n      f: parsenoop\n    },\n    0x0853: {\n      n: \"BrtBeginECTWFldInfoLst15\",\n      f: parsenoop\n    },\n    0x0854: {\n      n: \"BrtEndECTWFldInfoLst15\",\n      f: parsenoop\n    },\n    0x0855: {\n      n: \"BrtBeginECTWFldInfo15\",\n      f: parsenoop\n    },\n    0x0856: {\n      n: \"BrtFieldListActiveItem\",\n      f: parsenoop\n    },\n    0x0857: {\n      n: \"BrtPivotCacheIdVersion\",\n      f: parsenoop\n    },\n    0x0858: {\n      n: \"BrtSXDI15\",\n      f: parsenoop\n    },\n    0xFFFF: {\n      n: \"\",\n      f: parsenoop\n    }\n  };\n  var evert_RE = evert_key(XLSBRecordEnum, 'n');\n  /* [MS-XLS] 2.3 Record Enumeration */\n\n  var XLSRecordEnum = {\n    0x0003: {\n      n: \"BIFF2NUM\",\n      f: parse_BIFF2NUM\n    },\n    0x0004: {\n      n: \"BIFF2STR\",\n      f: parse_BIFF2STR\n    },\n    0x0006: {\n      n: \"Formula\",\n      f: parse_Formula\n    },\n    0x0009: {\n      n: 'BOF',\n      f: parse_BOF\n    },\n    0x000a: {\n      n: 'EOF',\n      f: parse_EOF\n    },\n    0x000c: {\n      n: \"CalcCount\",\n      f: parse_CalcCount\n    },\n    0x000d: {\n      n: \"CalcMode\",\n      f: parse_CalcMode\n    },\n    0x000e: {\n      n: \"CalcPrecision\",\n      f: parse_CalcPrecision\n    },\n    0x000f: {\n      n: \"CalcRefMode\",\n      f: parse_CalcRefMode\n    },\n    0x0010: {\n      n: \"CalcDelta\",\n      f: parse_CalcDelta\n    },\n    0x0011: {\n      n: \"CalcIter\",\n      f: parse_CalcIter\n    },\n    0x0012: {\n      n: \"Protect\",\n      f: parse_Protect\n    },\n    0x0013: {\n      n: \"Password\",\n      f: parse_Password\n    },\n    0x0014: {\n      n: \"Header\",\n      f: parse_Header\n    },\n    0x0015: {\n      n: \"Footer\",\n      f: parse_Footer\n    },\n    0x0017: {\n      n: \"ExternSheet\",\n      f: parse_ExternSheet\n    },\n    0x0018: {\n      n: \"Lbl\",\n      f: parse_Lbl\n    },\n    0x0019: {\n      n: \"WinProtect\",\n      f: parse_WinProtect\n    },\n    0x001a: {\n      n: \"VerticalPageBreaks\",\n      f: parse_VerticalPageBreaks\n    },\n    0x001b: {\n      n: \"HorizontalPageBreaks\",\n      f: parse_HorizontalPageBreaks\n    },\n    0x001c: {\n      n: \"Note\",\n      f: parse_Note\n    },\n    0x001d: {\n      n: \"Selection\",\n      f: parse_Selection\n    },\n    0x0022: {\n      n: \"Date1904\",\n      f: parse_Date1904\n    },\n    0x0023: {\n      n: \"ExternName\",\n      f: parse_ExternName\n    },\n    0x0026: {\n      n: \"LeftMargin\",\n      f: parse_LeftMargin\n    },\n    0x0027: {\n      n: \"RightMargin\",\n      f: parse_RightMargin\n    },\n    0x0028: {\n      n: \"TopMargin\",\n      f: parse_TopMargin\n    },\n    0x0029: {\n      n: \"BottomMargin\",\n      f: parse_BottomMargin\n    },\n    0x002a: {\n      n: \"PrintRowCol\",\n      f: parse_PrintRowCol\n    },\n    0x002b: {\n      n: \"PrintGrid\",\n      f: parse_PrintGrid\n    },\n    0x002f: {\n      n: \"FilePass\",\n      f: parse_FilePass\n    },\n    0x0031: {\n      n: \"Font\",\n      f: parse_Font\n    },\n    0x0033: {\n      n: \"PrintSize\",\n      f: parse_PrintSize\n    },\n    0x003c: {\n      n: \"Continue\",\n      f: parse_Continue\n    },\n    0x003d: {\n      n: \"Window1\",\n      f: parse_Window1\n    },\n    0x0040: {\n      n: \"Backup\",\n      f: parse_Backup\n    },\n    0x0041: {\n      n: \"Pane\",\n      f: parse_Pane\n    },\n    0x0042: {\n      n: 'CodePage',\n      f: parse_CodePage\n    },\n    0x004d: {\n      n: \"Pls\",\n      f: parse_Pls\n    },\n    0x0050: {\n      n: \"DCon\",\n      f: parse_DCon\n    },\n    0x0051: {\n      n: \"DConRef\",\n      f: parse_DConRef\n    },\n    0x0052: {\n      n: \"DConName\",\n      f: parse_DConName\n    },\n    0x0055: {\n      n: \"DefColWidth\",\n      f: parse_DefColWidth\n    },\n    0x0059: {\n      n: \"XCT\",\n      f: parse_XCT\n    },\n    0x005a: {\n      n: \"CRN\",\n      f: parse_CRN\n    },\n    0x005b: {\n      n: \"FileSharing\",\n      f: parse_FileSharing\n    },\n    0x005c: {\n      n: 'WriteAccess',\n      f: parse_WriteAccess\n    },\n    0x005d: {\n      n: \"Obj\",\n      f: parse_Obj\n    },\n    0x005e: {\n      n: \"Uncalced\",\n      f: parse_Uncalced\n    },\n    0x005f: {\n      n: \"CalcSaveRecalc\",\n      f: parse_CalcSaveRecalc\n    },\n    0x0060: {\n      n: \"Template\",\n      f: parse_Template\n    },\n    0x0061: {\n      n: \"Intl\",\n      f: parse_Intl\n    },\n    0x0063: {\n      n: \"ObjProtect\",\n      f: parse_ObjProtect\n    },\n    0x007d: {\n      n: \"ColInfo\",\n      f: parse_ColInfo\n    },\n    0x0080: {\n      n: \"Guts\",\n      f: parse_Guts\n    },\n    0x0081: {\n      n: \"WsBool\",\n      f: parse_WsBool\n    },\n    0x0082: {\n      n: \"GridSet\",\n      f: parse_GridSet\n    },\n    0x0083: {\n      n: \"HCenter\",\n      f: parse_HCenter\n    },\n    0x0084: {\n      n: \"VCenter\",\n      f: parse_VCenter\n    },\n    0x0085: {\n      n: 'BoundSheet8',\n      f: parse_BoundSheet8\n    },\n    0x0086: {\n      n: \"WriteProtect\",\n      f: parse_WriteProtect\n    },\n    0x008c: {\n      n: \"Country\",\n      f: parse_Country\n    },\n    0x008d: {\n      n: \"HideObj\",\n      f: parse_HideObj\n    },\n    0x0090: {\n      n: \"Sort\",\n      f: parse_Sort\n    },\n    0x0092: {\n      n: \"Palette\",\n      f: parse_Palette\n    },\n    0x0097: {\n      n: \"Sync\",\n      f: parse_Sync\n    },\n    0x0098: {\n      n: \"LPr\",\n      f: parse_LPr\n    },\n    0x0099: {\n      n: \"DxGCol\",\n      f: parse_DxGCol\n    },\n    0x009a: {\n      n: \"FnGroupName\",\n      f: parse_FnGroupName\n    },\n    0x009b: {\n      n: \"FilterMode\",\n      f: parse_FilterMode\n    },\n    0x009c: {\n      n: \"BuiltInFnGroupCount\",\n      f: parse_BuiltInFnGroupCount\n    },\n    0x009d: {\n      n: \"AutoFilterInfo\",\n      f: parse_AutoFilterInfo\n    },\n    0x009e: {\n      n: \"AutoFilter\",\n      f: parse_AutoFilter\n    },\n    0x00a0: {\n      n: \"Scl\",\n      f: parse_Scl\n    },\n    0x00a1: {\n      n: \"Setup\",\n      f: parse_Setup\n    },\n    0x00ae: {\n      n: \"ScenMan\",\n      f: parse_ScenMan\n    },\n    0x00af: {\n      n: \"SCENARIO\",\n      f: parse_SCENARIO\n    },\n    0x00b0: {\n      n: \"SxView\",\n      f: parse_SxView\n    },\n    0x00b1: {\n      n: \"Sxvd\",\n      f: parse_Sxvd\n    },\n    0x00b2: {\n      n: \"SXVI\",\n      f: parse_SXVI\n    },\n    0x00b4: {\n      n: \"SxIvd\",\n      f: parse_SxIvd\n    },\n    0x00b5: {\n      n: \"SXLI\",\n      f: parse_SXLI\n    },\n    0x00b6: {\n      n: \"SXPI\",\n      f: parse_SXPI\n    },\n    0x00b8: {\n      n: \"DocRoute\",\n      f: parse_DocRoute\n    },\n    0x00b9: {\n      n: \"RecipName\",\n      f: parse_RecipName\n    },\n    0x00bd: {\n      n: \"MulRk\",\n      f: parse_MulRk\n    },\n    0x00be: {\n      n: \"MulBlank\",\n      f: parse_MulBlank\n    },\n    0x00c1: {\n      n: 'Mms',\n      f: parse_Mms\n    },\n    0x00c5: {\n      n: \"SXDI\",\n      f: parse_SXDI\n    },\n    0x00c6: {\n      n: \"SXDB\",\n      f: parse_SXDB\n    },\n    0x00c7: {\n      n: \"SXFDB\",\n      f: parse_SXFDB\n    },\n    0x00c8: {\n      n: \"SXDBB\",\n      f: parse_SXDBB\n    },\n    0x00c9: {\n      n: \"SXNum\",\n      f: parse_SXNum\n    },\n    0x00ca: {\n      n: \"SxBool\",\n      f: parse_SxBool\n    },\n    0x00cb: {\n      n: \"SxErr\",\n      f: parse_SxErr\n    },\n    0x00cc: {\n      n: \"SXInt\",\n      f: parse_SXInt\n    },\n    0x00cd: {\n      n: \"SXString\",\n      f: parse_SXString\n    },\n    0x00ce: {\n      n: \"SXDtr\",\n      f: parse_SXDtr\n    },\n    0x00cf: {\n      n: \"SxNil\",\n      f: parse_SxNil\n    },\n    0x00d0: {\n      n: \"SXTbl\",\n      f: parse_SXTbl\n    },\n    0x00d1: {\n      n: \"SXTBRGIITM\",\n      f: parse_SXTBRGIITM\n    },\n    0x00d2: {\n      n: \"SxTbpg\",\n      f: parse_SxTbpg\n    },\n    0x00d3: {\n      n: \"ObProj\",\n      f: parse_ObProj\n    },\n    0x00d5: {\n      n: \"SXStreamID\",\n      f: parse_SXStreamID\n    },\n    0x00d7: {\n      n: \"DBCell\",\n      f: parse_DBCell\n    },\n    0x00d8: {\n      n: \"SXRng\",\n      f: parse_SXRng\n    },\n    0x00d9: {\n      n: \"SxIsxoper\",\n      f: parse_SxIsxoper\n    },\n    0x00da: {\n      n: \"BookBool\",\n      f: parse_BookBool\n    },\n    0x00dc: {\n      n: \"DbOrParamQry\",\n      f: parse_DbOrParamQry\n    },\n    0x00dd: {\n      n: \"ScenarioProtect\",\n      f: parse_ScenarioProtect\n    },\n    0x00de: {\n      n: \"OleObjectSize\",\n      f: parse_OleObjectSize\n    },\n    0x00e0: {\n      n: \"XF\",\n      f: parse_XF\n    },\n    0x00e1: {\n      n: 'InterfaceHdr',\n      f: parse_InterfaceHdr\n    },\n    0x00e2: {\n      n: 'InterfaceEnd',\n      f: parse_InterfaceEnd\n    },\n    0x00e3: {\n      n: \"SXVS\",\n      f: parse_SXVS\n    },\n    0x00e5: {\n      n: \"MergeCells\",\n      f: parse_MergeCells\n    },\n    0x00e9: {\n      n: \"BkHim\",\n      f: parse_BkHim\n    },\n    0x00eb: {\n      n: \"MsoDrawingGroup\",\n      f: parse_MsoDrawingGroup\n    },\n    0x00ec: {\n      n: \"MsoDrawing\",\n      f: parse_MsoDrawing\n    },\n    0x00ed: {\n      n: \"MsoDrawingSelection\",\n      f: parse_MsoDrawingSelection\n    },\n    0x00ef: {\n      n: \"PhoneticInfo\",\n      f: parse_PhoneticInfo\n    },\n    0x00f0: {\n      n: \"SxRule\",\n      f: parse_SxRule\n    },\n    0x00f1: {\n      n: \"SXEx\",\n      f: parse_SXEx\n    },\n    0x00f2: {\n      n: \"SxFilt\",\n      f: parse_SxFilt\n    },\n    0x00f4: {\n      n: \"SxDXF\",\n      f: parse_SxDXF\n    },\n    0x00f5: {\n      n: \"SxItm\",\n      f: parse_SxItm\n    },\n    0x00f6: {\n      n: \"SxName\",\n      f: parse_SxName\n    },\n    0x00f7: {\n      n: \"SxSelect\",\n      f: parse_SxSelect\n    },\n    0x00f8: {\n      n: \"SXPair\",\n      f: parse_SXPair\n    },\n    0x00f9: {\n      n: \"SxFmla\",\n      f: parse_SxFmla\n    },\n    0x00fb: {\n      n: \"SxFormat\",\n      f: parse_SxFormat\n    },\n    0x00fc: {\n      n: \"SST\",\n      f: parse_SST\n    },\n    0x00fd: {\n      n: \"LabelSst\",\n      f: parse_LabelSst\n    },\n    0x00ff: {\n      n: \"ExtSST\",\n      f: parse_ExtSST\n    },\n    0x0100: {\n      n: \"SXVDEx\",\n      f: parse_SXVDEx\n    },\n    0x0103: {\n      n: \"SXFormula\",\n      f: parse_SXFormula\n    },\n    0x0122: {\n      n: \"SXDBEx\",\n      f: parse_SXDBEx\n    },\n    0x0137: {\n      n: \"RRDInsDel\",\n      f: parse_RRDInsDel\n    },\n    0x0138: {\n      n: \"RRDHead\",\n      f: parse_RRDHead\n    },\n    0x013b: {\n      n: \"RRDChgCell\",\n      f: parse_RRDChgCell\n    },\n    0x013d: {\n      n: \"RRTabId\",\n      f: parse_RRTabId\n    },\n    0x013e: {\n      n: \"RRDRenSheet\",\n      f: parse_RRDRenSheet\n    },\n    0x013f: {\n      n: \"RRSort\",\n      f: parse_RRSort\n    },\n    0x0140: {\n      n: \"RRDMove\",\n      f: parse_RRDMove\n    },\n    0x014a: {\n      n: \"RRFormat\",\n      f: parse_RRFormat\n    },\n    0x014b: {\n      n: \"RRAutoFmt\",\n      f: parse_RRAutoFmt\n    },\n    0x014d: {\n      n: \"RRInsertSh\",\n      f: parse_RRInsertSh\n    },\n    0x014e: {\n      n: \"RRDMoveBegin\",\n      f: parse_RRDMoveBegin\n    },\n    0x014f: {\n      n: \"RRDMoveEnd\",\n      f: parse_RRDMoveEnd\n    },\n    0x0150: {\n      n: \"RRDInsDelBegin\",\n      f: parse_RRDInsDelBegin\n    },\n    0x0151: {\n      n: \"RRDInsDelEnd\",\n      f: parse_RRDInsDelEnd\n    },\n    0x0152: {\n      n: \"RRDConflict\",\n      f: parse_RRDConflict\n    },\n    0x0153: {\n      n: \"RRDDefName\",\n      f: parse_RRDDefName\n    },\n    0x0154: {\n      n: \"RRDRstEtxp\",\n      f: parse_RRDRstEtxp\n    },\n    0x015f: {\n      n: \"LRng\",\n      f: parse_LRng\n    },\n    0x0160: {\n      n: \"UsesELFs\",\n      f: parse_UsesELFs\n    },\n    0x0161: {\n      n: \"DSF\",\n      f: parse_DSF\n    },\n    0x0191: {\n      n: \"CUsr\",\n      f: parse_CUsr\n    },\n    0x0192: {\n      n: \"CbUsr\",\n      f: parse_CbUsr\n    },\n    0x0193: {\n      n: \"UsrInfo\",\n      f: parse_UsrInfo\n    },\n    0x0194: {\n      n: \"UsrExcl\",\n      f: parse_UsrExcl\n    },\n    0x0195: {\n      n: \"FileLock\",\n      f: parse_FileLock\n    },\n    0x0196: {\n      n: \"RRDInfo\",\n      f: parse_RRDInfo\n    },\n    0x0197: {\n      n: \"BCUsrs\",\n      f: parse_BCUsrs\n    },\n    0x0198: {\n      n: \"UsrChk\",\n      f: parse_UsrChk\n    },\n    0x01a9: {\n      n: \"UserBView\",\n      f: parse_UserBView\n    },\n    0x01aa: {\n      n: \"UserSViewBegin\",\n      f: parse_UserSViewBegin\n    },\n    0x01ab: {\n      n: \"UserSViewEnd\",\n      f: parse_UserSViewEnd\n    },\n    0x01ac: {\n      n: \"RRDUserView\",\n      f: parse_RRDUserView\n    },\n    0x01ad: {\n      n: \"Qsi\",\n      f: parse_Qsi\n    },\n    0x01ae: {\n      n: \"SupBook\",\n      f: parse_SupBook\n    },\n    0x01af: {\n      n: \"Prot4Rev\",\n      f: parse_Prot4Rev\n    },\n    0x01b0: {\n      n: \"CondFmt\",\n      f: parse_CondFmt\n    },\n    0x01b1: {\n      n: \"CF\",\n      f: parse_CF\n    },\n    0x01b2: {\n      n: \"DVal\",\n      f: parse_DVal\n    },\n    0x01b5: {\n      n: \"DConBin\",\n      f: parse_DConBin\n    },\n    0x01b6: {\n      n: \"TxO\",\n      f: parse_TxO\n    },\n    0x01b7: {\n      n: \"RefreshAll\",\n      f: parse_RefreshAll\n    },\n    0x01b8: {\n      n: \"HLink\",\n      f: parse_HLink\n    },\n    0x01b9: {\n      n: \"Lel\",\n      f: parse_Lel\n    },\n    0x01ba: {\n      n: \"CodeName\",\n      f: parse_XLSCodeName\n    },\n    0x01bb: {\n      n: \"SXFDBType\",\n      f: parse_SXFDBType\n    },\n    0x01bc: {\n      n: \"Prot4RevPass\",\n      f: parse_Prot4RevPass\n    },\n    0x01bd: {\n      n: \"ObNoMacros\",\n      f: parse_ObNoMacros\n    },\n    0x01be: {\n      n: \"Dv\",\n      f: parse_Dv\n    },\n    0x01c0: {\n      n: \"Excel9File\",\n      f: parse_Excel9File\n    },\n    0x01c1: {\n      n: \"RecalcId\",\n      f: parse_RecalcId,\n      r: 2\n    },\n    0x01c2: {\n      n: \"EntExU2\",\n      f: parse_EntExU2\n    },\n    0x0200: {\n      n: \"Dimensions\",\n      f: parse_Dimensions\n    },\n    0x0201: {\n      n: \"Blank\",\n      f: parse_Blank\n    },\n    0x0203: {\n      n: \"Number\",\n      f: parse_Number\n    },\n    0x0204: {\n      n: \"Label\",\n      f: parse_Label\n    },\n    0x0205: {\n      n: \"BoolErr\",\n      f: parse_BoolErr\n    },\n    0x0207: {\n      n: \"String\",\n      f: parse_String\n    },\n    0x0208: {\n      n: 'Row',\n      f: parse_Row\n    },\n    0x020b: {\n      n: \"Index\",\n      f: parse_Index\n    },\n    0x0221: {\n      n: \"Array\",\n      f: parse_Array\n    },\n    0x0225: {\n      n: \"DefaultRowHeight\",\n      f: parse_DefaultRowHeight\n    },\n    0x0236: {\n      n: \"Table\",\n      f: parse_Table\n    },\n    0x023e: {\n      n: \"Window2\",\n      f: parse_Window2\n    },\n    0x027e: {\n      n: \"RK\",\n      f: parse_RK\n    },\n    0x0293: {\n      n: \"Style\",\n      f: parse_Style\n    },\n    0x0418: {\n      n: \"BigName\",\n      f: parse_BigName\n    },\n    0x041e: {\n      n: \"Format\",\n      f: parse_Format\n    },\n    0x043c: {\n      n: \"ContinueBigName\",\n      f: parse_ContinueBigName\n    },\n    0x04bc: {\n      n: \"ShrFmla\",\n      f: parse_ShrFmla\n    },\n    0x0800: {\n      n: \"HLinkTooltip\",\n      f: parse_HLinkTooltip\n    },\n    0x0801: {\n      n: \"WebPub\",\n      f: parse_WebPub\n    },\n    0x0802: {\n      n: \"QsiSXTag\",\n      f: parse_QsiSXTag\n    },\n    0x0803: {\n      n: \"DBQueryExt\",\n      f: parse_DBQueryExt\n    },\n    0x0804: {\n      n: \"ExtString\",\n      f: parse_ExtString\n    },\n    0x0805: {\n      n: \"TxtQry\",\n      f: parse_TxtQry\n    },\n    0x0806: {\n      n: \"Qsir\",\n      f: parse_Qsir\n    },\n    0x0807: {\n      n: \"Qsif\",\n      f: parse_Qsif\n    },\n    0x0808: {\n      n: \"RRDTQSIF\",\n      f: parse_RRDTQSIF\n    },\n    0x0809: {\n      n: 'BOF',\n      f: parse_BOF\n    },\n    0x080a: {\n      n: \"OleDbConn\",\n      f: parse_OleDbConn\n    },\n    0x080b: {\n      n: \"WOpt\",\n      f: parse_WOpt\n    },\n    0x080c: {\n      n: \"SXViewEx\",\n      f: parse_SXViewEx\n    },\n    0x080d: {\n      n: \"SXTH\",\n      f: parse_SXTH\n    },\n    0x080e: {\n      n: \"SXPIEx\",\n      f: parse_SXPIEx\n    },\n    0x080f: {\n      n: \"SXVDTEx\",\n      f: parse_SXVDTEx\n    },\n    0x0810: {\n      n: \"SXViewEx9\",\n      f: parse_SXViewEx9\n    },\n    0x0812: {\n      n: \"ContinueFrt\",\n      f: parse_ContinueFrt\n    },\n    0x0813: {\n      n: \"RealTimeData\",\n      f: parse_RealTimeData\n    },\n    0x0850: {\n      n: \"ChartFrtInfo\",\n      f: parse_ChartFrtInfo\n    },\n    0x0851: {\n      n: \"FrtWrapper\",\n      f: parse_FrtWrapper\n    },\n    0x0852: {\n      n: \"StartBlock\",\n      f: parse_StartBlock\n    },\n    0x0853: {\n      n: \"EndBlock\",\n      f: parse_EndBlock\n    },\n    0x0854: {\n      n: \"StartObject\",\n      f: parse_StartObject\n    },\n    0x0855: {\n      n: \"EndObject\",\n      f: parse_EndObject\n    },\n    0x0856: {\n      n: \"CatLab\",\n      f: parse_CatLab\n    },\n    0x0857: {\n      n: \"YMult\",\n      f: parse_YMult\n    },\n    0x0858: {\n      n: \"SXViewLink\",\n      f: parse_SXViewLink\n    },\n    0x0859: {\n      n: \"PivotChartBits\",\n      f: parse_PivotChartBits\n    },\n    0x085a: {\n      n: \"FrtFontList\",\n      f: parse_FrtFontList\n    },\n    0x0862: {\n      n: \"SheetExt\",\n      f: parse_SheetExt\n    },\n    0x0863: {\n      n: \"BookExt\",\n      f: parse_BookExt,\n      r: 12\n    },\n    0x0864: {\n      n: \"SXAddl\",\n      f: parse_SXAddl\n    },\n    0x0865: {\n      n: \"CrErr\",\n      f: parse_CrErr\n    },\n    0x0866: {\n      n: \"HFPicture\",\n      f: parse_HFPicture\n    },\n    0x0867: {\n      n: 'FeatHdr',\n      f: parse_FeatHdr\n    },\n    0x0868: {\n      n: \"Feat\",\n      f: parse_Feat\n    },\n    0x086a: {\n      n: \"DataLabExt\",\n      f: parse_DataLabExt\n    },\n    0x086b: {\n      n: \"DataLabExtContents\",\n      f: parse_DataLabExtContents\n    },\n    0x086c: {\n      n: \"CellWatch\",\n      f: parse_CellWatch\n    },\n    0x0871: {\n      n: \"FeatHdr11\",\n      f: parse_FeatHdr11\n    },\n    0x0872: {\n      n: \"Feature11\",\n      f: parse_Feature11\n    },\n    0x0874: {\n      n: \"DropDownObjIds\",\n      f: parse_DropDownObjIds\n    },\n    0x0875: {\n      n: \"ContinueFrt11\",\n      f: parse_ContinueFrt11\n    },\n    0x0876: {\n      n: \"DConn\",\n      f: parse_DConn\n    },\n    0x0877: {\n      n: \"List12\",\n      f: parse_List12\n    },\n    0x0878: {\n      n: \"Feature12\",\n      f: parse_Feature12\n    },\n    0x0879: {\n      n: \"CondFmt12\",\n      f: parse_CondFmt12\n    },\n    0x087a: {\n      n: \"CF12\",\n      f: parse_CF12\n    },\n    0x087b: {\n      n: \"CFEx\",\n      f: parse_CFEx\n    },\n    0x087c: {\n      n: \"XFCRC\",\n      f: parse_XFCRC,\n      r: 12\n    },\n    0x087d: {\n      n: \"XFExt\",\n      f: parse_XFExt,\n      r: 12\n    },\n    0x087e: {\n      n: \"AutoFilter12\",\n      f: parse_AutoFilter12\n    },\n    0x087f: {\n      n: \"ContinueFrt12\",\n      f: parse_ContinueFrt12\n    },\n    0x0884: {\n      n: \"MDTInfo\",\n      f: parse_MDTInfo\n    },\n    0x0885: {\n      n: \"MDXStr\",\n      f: parse_MDXStr\n    },\n    0x0886: {\n      n: \"MDXTuple\",\n      f: parse_MDXTuple\n    },\n    0x0887: {\n      n: \"MDXSet\",\n      f: parse_MDXSet\n    },\n    0x0888: {\n      n: \"MDXProp\",\n      f: parse_MDXProp\n    },\n    0x0889: {\n      n: \"MDXKPI\",\n      f: parse_MDXKPI\n    },\n    0x088a: {\n      n: \"MDB\",\n      f: parse_MDB\n    },\n    0x088b: {\n      n: \"PLV\",\n      f: parse_PLV\n    },\n    0x088c: {\n      n: \"Compat12\",\n      f: parse_Compat12,\n      r: 12\n    },\n    0x088d: {\n      n: \"DXF\",\n      f: parse_DXF\n    },\n    0x088e: {\n      n: \"TableStyles\",\n      f: parse_TableStyles,\n      r: 12\n    },\n    0x088f: {\n      n: \"TableStyle\",\n      f: parse_TableStyle\n    },\n    0x0890: {\n      n: \"TableStyleElement\",\n      f: parse_TableStyleElement\n    },\n    0x0892: {\n      n: \"StyleExt\",\n      f: parse_StyleExt\n    },\n    0x0893: {\n      n: \"NamePublish\",\n      f: parse_NamePublish\n    },\n    0x0894: {\n      n: \"NameCmt\",\n      f: parse_NameCmt\n    },\n    0x0895: {\n      n: \"SortData\",\n      f: parse_SortData\n    },\n    0x0896: {\n      n: \"Theme\",\n      f: parse_Theme,\n      r: 12\n    },\n    0x0897: {\n      n: \"GUIDTypeLib\",\n      f: parse_GUIDTypeLib\n    },\n    0x0898: {\n      n: \"FnGrp12\",\n      f: parse_FnGrp12\n    },\n    0x0899: {\n      n: \"NameFnGrp12\",\n      f: parse_NameFnGrp12\n    },\n    0x089a: {\n      n: \"MTRSettings\",\n      f: parse_MTRSettings,\n      r: 12\n    },\n    0x089b: {\n      n: \"CompressPictures\",\n      f: parse_CompressPictures\n    },\n    0x089c: {\n      n: \"HeaderFooter\",\n      f: parse_HeaderFooter\n    },\n    0x089d: {\n      n: \"CrtLayout12\",\n      f: parse_CrtLayout12\n    },\n    0x089e: {\n      n: \"CrtMlFrt\",\n      f: parse_CrtMlFrt\n    },\n    0x089f: {\n      n: \"CrtMlFrtContinue\",\n      f: parse_CrtMlFrtContinue\n    },\n    0x08a3: {\n      n: \"ForceFullCalculation\",\n      f: parse_ForceFullCalculation\n    },\n    0x08a4: {\n      n: \"ShapePropsStream\",\n      f: parse_ShapePropsStream\n    },\n    0x08a5: {\n      n: \"TextPropsStream\",\n      f: parse_TextPropsStream\n    },\n    0x08a6: {\n      n: \"RichTextStream\",\n      f: parse_RichTextStream\n    },\n    0x08a7: {\n      n: \"CrtLayout12A\",\n      f: parse_CrtLayout12A\n    },\n    0x1001: {\n      n: \"Units\",\n      f: parse_Units\n    },\n    0x1002: {\n      n: \"Chart\",\n      f: parse_Chart\n    },\n    0x1003: {\n      n: \"Series\",\n      f: parse_Series\n    },\n    0x1006: {\n      n: \"DataFormat\",\n      f: parse_DataFormat\n    },\n    0x1007: {\n      n: \"LineFormat\",\n      f: parse_LineFormat\n    },\n    0x1009: {\n      n: \"MarkerFormat\",\n      f: parse_MarkerFormat\n    },\n    0x100a: {\n      n: \"AreaFormat\",\n      f: parse_AreaFormat\n    },\n    0x100b: {\n      n: \"PieFormat\",\n      f: parse_PieFormat\n    },\n    0x100c: {\n      n: \"AttachedLabel\",\n      f: parse_AttachedLabel\n    },\n    0x100d: {\n      n: \"SeriesText\",\n      f: parse_SeriesText\n    },\n    0x1014: {\n      n: \"ChartFormat\",\n      f: parse_ChartFormat\n    },\n    0x1015: {\n      n: \"Legend\",\n      f: parse_Legend\n    },\n    0x1016: {\n      n: \"SeriesList\",\n      f: parse_SeriesList\n    },\n    0x1017: {\n      n: \"Bar\",\n      f: parse_Bar\n    },\n    0x1018: {\n      n: \"Line\",\n      f: parse_Line\n    },\n    0x1019: {\n      n: \"Pie\",\n      f: parse_Pie\n    },\n    0x101a: {\n      n: \"Area\",\n      f: parse_Area\n    },\n    0x101b: {\n      n: \"Scatter\",\n      f: parse_Scatter\n    },\n    0x101c: {\n      n: \"CrtLine\",\n      f: parse_CrtLine\n    },\n    0x101d: {\n      n: \"Axis\",\n      f: parse_Axis\n    },\n    0x101e: {\n      n: \"Tick\",\n      f: parse_Tick\n    },\n    0x101f: {\n      n: \"ValueRange\",\n      f: parse_ValueRange\n    },\n    0x1020: {\n      n: \"CatSerRange\",\n      f: parse_CatSerRange\n    },\n    0x1021: {\n      n: \"AxisLine\",\n      f: parse_AxisLine\n    },\n    0x1022: {\n      n: \"CrtLink\",\n      f: parse_CrtLink\n    },\n    0x1024: {\n      n: \"DefaultText\",\n      f: parse_DefaultText\n    },\n    0x1025: {\n      n: \"Text\",\n      f: parse_Text\n    },\n    0x1026: {\n      n: \"FontX\",\n      f: parse_FontX\n    },\n    0x1027: {\n      n: \"ObjectLink\",\n      f: parse_ObjectLink\n    },\n    0x1032: {\n      n: \"Frame\",\n      f: parse_Frame\n    },\n    0x1033: {\n      n: \"Begin\",\n      f: parse_Begin\n    },\n    0x1034: {\n      n: \"End\",\n      f: parse_End\n    },\n    0x1035: {\n      n: \"PlotArea\",\n      f: parse_PlotArea\n    },\n    0x103a: {\n      n: \"Chart3d\",\n      f: parse_Chart3d\n    },\n    0x103c: {\n      n: \"PicF\",\n      f: parse_PicF\n    },\n    0x103d: {\n      n: \"DropBar\",\n      f: parse_DropBar\n    },\n    0x103e: {\n      n: \"Radar\",\n      f: parse_Radar\n    },\n    0x103f: {\n      n: \"Surf\",\n      f: parse_Surf\n    },\n    0x1040: {\n      n: \"RadarArea\",\n      f: parse_RadarArea\n    },\n    0x1041: {\n      n: \"AxisParent\",\n      f: parse_AxisParent\n    },\n    0x1043: {\n      n: \"LegendException\",\n      f: parse_LegendException\n    },\n    0x1044: {\n      n: \"ShtProps\",\n      f: parse_ShtProps\n    },\n    0x1045: {\n      n: \"SerToCrt\",\n      f: parse_SerToCrt\n    },\n    0x1046: {\n      n: \"AxesUsed\",\n      f: parse_AxesUsed\n    },\n    0x1048: {\n      n: \"SBaseRef\",\n      f: parse_SBaseRef\n    },\n    0x104a: {\n      n: \"SerParent\",\n      f: parse_SerParent\n    },\n    0x104b: {\n      n: \"SerAuxTrend\",\n      f: parse_SerAuxTrend\n    },\n    0x104e: {\n      n: \"IFmtRecord\",\n      f: parse_IFmtRecord\n    },\n    0x104f: {\n      n: \"Pos\",\n      f: parse_Pos\n    },\n    0x1050: {\n      n: \"AlRuns\",\n      f: parse_AlRuns\n    },\n    0x1051: {\n      n: \"BRAI\",\n      f: parse_BRAI\n    },\n    0x105b: {\n      n: \"SerAuxErrBar\",\n      f: parse_SerAuxErrBar\n    },\n    0x105c: {\n      n: \"ClrtClient\",\n      f: parse_ClrtClient\n    },\n    0x105d: {\n      n: \"SerFmt\",\n      f: parse_SerFmt\n    },\n    0x105f: {\n      n: \"Chart3DBarShape\",\n      f: parse_Chart3DBarShape\n    },\n    0x1060: {\n      n: \"Fbi\",\n      f: parse_Fbi\n    },\n    0x1061: {\n      n: \"BopPop\",\n      f: parse_BopPop\n    },\n    0x1062: {\n      n: \"AxcExt\",\n      f: parse_AxcExt\n    },\n    0x1063: {\n      n: \"Dat\",\n      f: parse_Dat\n    },\n    0x1064: {\n      n: \"PlotGrowth\",\n      f: parse_PlotGrowth\n    },\n    0x1065: {\n      n: \"SIIndex\",\n      f: parse_SIIndex\n    },\n    0x1066: {\n      n: \"GelFrame\",\n      f: parse_GelFrame\n    },\n    0x1067: {\n      n: \"BopPopCustom\",\n      f: parse_BopPopCustom\n    },\n    0x1068: {\n      n: \"Fbi2\",\n      f: parse_Fbi2\n    },\n\n    /* These are specified in an older version of the spec */\n    0x0016: {\n      n: \"ExternCount\",\n      f: parsenoop\n    },\n    0x007e: {\n      n: \"RK\",\n      f: parsenoop\n    },\n\n    /* Not necessarily same as 0x027e */\n    0x007f: {\n      n: \"ImData\",\n      f: parsenoop\n    },\n    0x0087: {\n      n: \"Addin\",\n      f: parsenoop\n    },\n    0x0088: {\n      n: \"Edg\",\n      f: parsenoop\n    },\n    0x0089: {\n      n: \"Pub\",\n      f: parsenoop\n    },\n    0x0091: {\n      n: \"Sub\",\n      f: parsenoop\n    },\n    0x0094: {\n      n: \"LHRecord\",\n      f: parsenoop\n    },\n    0x0095: {\n      n: \"LHNGraph\",\n      f: parsenoop\n    },\n    0x0096: {\n      n: \"Sound\",\n      f: parsenoop\n    },\n    0x00a9: {\n      n: \"CoordList\",\n      f: parsenoop\n    },\n    0x00ab: {\n      n: \"GCW\",\n      f: parsenoop\n    },\n    0x00bc: {\n      n: \"ShrFmla\",\n      f: parsenoop\n    },\n\n    /* Not necessarily same as 0x04bc */\n    0x00c2: {\n      n: \"AddMenu\",\n      f: parsenoop\n    },\n    0x00c3: {\n      n: \"DelMenu\",\n      f: parsenoop\n    },\n    0x00d6: {\n      n: \"RString\",\n      f: parsenoop\n    },\n    0x00df: {\n      n: \"UDDesc\",\n      f: parsenoop\n    },\n    0x00ea: {\n      n: \"TabIdConf\",\n      f: parsenoop\n    },\n    0x0162: {\n      n: \"XL5Modify\",\n      f: parsenoop\n    },\n    0x01a5: {\n      n: \"FileSharing2\",\n      f: parsenoop\n    },\n    0x0218: {\n      n: \"Name\",\n      f: parsenoop\n    },\n    0x0223: {\n      n: \"ExternName\",\n      f: parse_ExternName\n    },\n    0x0231: {\n      n: \"Font\",\n      f: parsenoop\n    },\n    0x0406: {\n      n: \"Formula\",\n      f: parse_Formula\n    },\n    0x086d: {\n      n: \"FeatInfo\",\n      f: parsenoop\n    },\n    0x0873: {\n      n: \"FeatInfo11\",\n      f: parsenoop\n    },\n    0x0881: {\n      n: \"SXAddl12\",\n      f: parsenoop\n    },\n    0x08c0: {\n      n: \"AutoWebPub\",\n      f: parsenoop\n    },\n    0x08c1: {\n      n: \"ListObj\",\n      f: parsenoop\n    },\n    0x08c2: {\n      n: \"ListField\",\n      f: parsenoop\n    },\n    0x08c3: {\n      n: \"ListDV\",\n      f: parsenoop\n    },\n    0x08c4: {\n      n: \"ListCondFmt\",\n      f: parsenoop\n    },\n    0x08c5: {\n      n: \"ListCF\",\n      f: parsenoop\n    },\n    0x08c6: {\n      n: \"FMQry\",\n      f: parsenoop\n    },\n    0x08c7: {\n      n: \"FMSQry\",\n      f: parsenoop\n    },\n    0x08c8: {\n      n: \"PLV\",\n      f: parsenoop\n    },\n\n    /* supposedly PLV for Excel 11 */\n    0x08c9: {\n      n: \"LnExt\",\n      f: parsenoop\n    },\n    0x08ca: {\n      n: \"MkrExt\",\n      f: parsenoop\n    },\n    0x08cb: {\n      n: \"CrtCoopt\",\n      f: parsenoop\n    },\n    0x0000: {}\n  };\n  /* Helper function to call out to ODS parser */\n\n  function parse_ods(zip, opts) {\n    if (typeof module !== \"undefined\" && typeof require !== 'undefined' && typeof ODS === 'undefined') ODS = require('./od' + 's');\n    if (typeof ODS === 'undefined' || !ODS.parse_ods) throw new Error(\"Unsupported ODS\");\n    return ODS.parse_ods(zip, opts);\n  }\n\n  function fix_opts_func(defaults) {\n    return function fix_opts(opts) {\n      for (var i = 0; i != defaults.length; ++i) {\n        var d = defaults[i];\n        if (opts[d[0]] === undefined) opts[d[0]] = d[1];\n        if (d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);\n      }\n    };\n  }\n\n  var fix_read_opts = fix_opts_func([['cellNF', false],\n  /* emit cell number format string as .z */\n  ['cellHTML', true],\n  /* emit html string as .h */\n  ['cellFormula', true],\n  /* emit formulae as .f */\n  ['cellStyles', false],\n  /* emits style/theme as .s */\n  ['cellDates', false],\n  /* emit date cells with type `d` */\n  ['sheetStubs', false],\n  /* emit empty cells */\n  ['sheetRows', 0, 'n'],\n  /* read n rows (0 = read all rows) */\n  ['bookDeps', false],\n  /* parse calculation chains */\n  ['bookSheets', false],\n  /* only try to get sheet names (no Sheets) */\n  ['bookProps', false],\n  /* only try to get properties (no Sheets) */\n  ['bookFiles', false],\n  /* include raw file structure (keys, files, cfb) */\n  ['bookVBA', false],\n  /* include vba raw data (vbaraw) */\n  ['password', ''],\n  /* password */\n  ['WTF', false]\n  /* WTF mode (throws errors) */\n  ]);\n  var fix_write_opts = fix_opts_func([['cellDates', false],\n  /* write date cells with type `d` */\n  ['bookSST', false],\n  /* Generate Shared String Table */\n  ['bookType', 'xlsx'],\n  /* Type of workbook (xlsx/m/b) */\n  ['WTF', false]\n  /* WTF mode (throws errors) */\n  ]);\n\n  function safe_parse_wbrels(wbrels, sheets) {\n    if (!wbrels) return 0;\n\n    try {\n      wbrels = sheets.map(function pwbr(w) {\n        return [w.name, wbrels['!id'][w.id].Target];\n      });\n    } catch (e) {\n      return null;\n    }\n\n    return !wbrels || wbrels.length === 0 ? null : wbrels;\n  }\n\n  function safe_parse_ws(zip, path, relsPath, sheet, sheetRels, sheets, opts) {\n    try {\n      sheetRels[sheet] = parse_rels(getzipdata(zip, relsPath, true), path);\n      sheets[sheet] = parse_ws(getzipdata(zip, path), path, opts, sheetRels[sheet]);\n    } catch (e) {\n      if (opts.WTF) throw e;\n    }\n  }\n\n  var nodirs = function nodirs(x) {\n    return x.substr(-1) != '/';\n  };\n\n  function parse_zip(zip, opts) {\n    make_ssf(SSF);\n    opts = opts || {};\n    fix_read_opts(opts);\n    reset_cp();\n    /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */\n\n    if (safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);\n    var entries = keys(zip.files).filter(nodirs).sort();\n    var dir = parse_ct(getzipdata(zip, '[Content_Types].xml'), opts);\n    var xlsb = false;\n    var sheets, binname;\n\n    if (dir.workbooks.length === 0) {\n      binname = \"xl/workbook.xml\";\n      if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);\n    }\n\n    if (dir.workbooks.length === 0) {\n      binname = \"xl/workbook.bin\";\n      if (!getzipfile(zip, binname, true)) throw new Error(\"Could not find workbook\");\n      dir.workbooks.push(binname);\n      xlsb = true;\n    }\n\n    if (dir.workbooks[0].substr(-3) == \"bin\") xlsb = true;\n    if (xlsb) set_cp(1200);\n\n    if (!opts.bookSheets && !opts.bookProps) {\n      strs = [];\n      if (dir.sst) strs = parse_sst(getzipdata(zip, dir.sst.replace(/^\\//, '')), dir.sst, opts); // parse themes before styles so that we can reliably decode theme/tint into rgb when parsing styles\n\n      themes = {};\n      if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipdata(zip, dir.themes[0].replace(/^\\//, ''), true), dir.themes[0], opts);\n      styles = {};\n      if (dir.style) styles = parse_sty(getzipdata(zip, dir.style.replace(/^\\//, '')), dir.style, opts);\n    }\n\n    var wb = parse_wb(getzipdata(zip, dir.workbooks[0].replace(/^\\//, '')), dir.workbooks[0], opts);\n    var props = {},\n        propdata = \"\";\n\n    if (dir.coreprops.length !== 0) {\n      propdata = getzipdata(zip, dir.coreprops[0].replace(/^\\//, ''), true);\n      if (propdata) props = parse_core_props(propdata);\n\n      if (dir.extprops.length !== 0) {\n        propdata = getzipdata(zip, dir.extprops[0].replace(/^\\//, ''), true);\n        if (propdata) parse_ext_props(propdata, props);\n      }\n    }\n\n    var custprops = {};\n\n    if (!opts.bookSheets || opts.bookProps) {\n      if (dir.custprops.length !== 0) {\n        propdata = getzipdata(zip, dir.custprops[0].replace(/^\\//, ''), true);\n        if (propdata) custprops = parse_cust_props(propdata, opts);\n      }\n    }\n\n    var out = {};\n\n    if (opts.bookSheets || opts.bookProps) {\n      if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;else if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {\n        return x.name;\n      });\n\n      if (opts.bookProps) {\n        out.Props = props;\n        out.Custprops = custprops;\n      }\n\n      if (typeof sheets !== 'undefined') out.SheetNames = sheets;\n      if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;\n    }\n\n    sheets = {};\n    var deps = {};\n    if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, dir.calcchain.replace(/^\\//, '')), dir.calcchain, opts);\n    var i = 0;\n    var sheetRels = {};\n    var path, relsPath;\n\n    if (!props.Worksheets) {\n      var wbsheets = wb.Sheets;\n      props.Worksheets = wbsheets.length;\n      props.SheetNames = [];\n\n      for (var j = 0; j != wbsheets.length; ++j) {\n        props.SheetNames[j] = wbsheets[j].name;\n      }\n    }\n\n    var wbext = xlsb ? \"bin\" : \"xml\";\n    var wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';\n    var wbrels = parse_rels(getzipdata(zip, wbrelsfile, true), wbrelsfile);\n    if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);\n    /* Numbers iOS hack */\n\n    var nmode = getzipdata(zip, \"xl/worksheets/sheet.xml\", true) ? 1 : 0;\n\n    for (i = 0; i != props.Worksheets; ++i) {\n      if (wbrels) path = 'xl/' + wbrels[i][1].replace(/[\\/]?xl\\//, \"\");else {\n        path = 'xl/worksheets/sheet' + (i + 1 - nmode) + \".\" + wbext;\n        path = path.replace(/sheet0\\./, \"sheet.\");\n      }\n      relsPath = path.replace(/^(.*)(\\/)([^\\/]*)$/, \"$1/_rels/$3.rels\");\n      safe_parse_ws(zip, path, relsPath, props.SheetNames[i], sheetRels, sheets, opts);\n    }\n\n    if (dir.comments) parse_comments(zip, dir.comments, sheets, sheetRels, opts);\n    out = {\n      Directory: dir,\n      Workbook: wb,\n      Props: props,\n      Custprops: custprops,\n      Deps: deps,\n      Sheets: sheets,\n      SheetNames: props.SheetNames,\n      Strings: strs,\n      Styles: styles,\n      Themes: themes,\n      SSF: SSF.get_table()\n    };\n\n    if (opts.bookFiles) {\n      out.keys = entries;\n      out.files = zip.files;\n    }\n\n    if (opts.bookVBA) {\n      if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, dir.vba[0], true);else if (dir.defaults.bin === 'application/vnd.ms-office.vbaProject') out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin', true);\n    }\n\n    return out;\n  }\n\n  function add_rels(rels, rId, f, type, relobj) {\n    if (!relobj) relobj = {};\n    if (!rels['!id']) rels['!id'] = {};\n    relobj.Id = 'rId' + rId;\n    relobj.Type = type;\n    relobj.Target = f;\n    if (rels['!id'][relobj.Id]) throw new Error(\"Cannot rewrite rId \" + rId);\n    rels['!id'][relobj.Id] = relobj;\n    rels[('/' + relobj.Target).replace(\"//\", \"/\")] = relobj;\n  }\n\n  function write_zip(wb, opts) {\n    if (wb && !wb.SSF) {\n      wb.SSF = SSF.get_table();\n    }\n\n    if (wb && wb.SSF) {\n      make_ssf(SSF);\n      SSF.load_table(wb.SSF);\n      opts.revssf = evert_num(wb.SSF);\n      opts.revssf[wb.SSF[65535]] = 0;\n    }\n\n    opts.rels = {};\n    opts.wbrels = {};\n    opts.Strings = [];\n    opts.Strings.Count = 0;\n    opts.Strings.Unique = 0;\n    var wbext = opts.bookType == \"xlsb\" ? \"bin\" : \"xml\";\n    var ct = {\n      workbooks: [],\n      sheets: [],\n      calcchains: [],\n      themes: [],\n      styles: [],\n      coreprops: [],\n      extprops: [],\n      custprops: [],\n      strs: [],\n      comments: [],\n      vba: [],\n      TODO: [],\n      rels: [],\n      xmlns: \"\"\n    };\n    fix_write_opts(opts = opts || {});\n    var zip = new jszip();\n    var f = \"\",\n        rId = 0;\n    opts.cellXfs = [];\n    get_cell_style(opts.cellXfs, {}, {\n      revssf: {\n        \"General\": 0\n      }\n    });\n    f = \"docProps/core.xml\";\n    zip.file(f, write_core_props(wb.Props, opts));\n    ct.coreprops.push(f);\n    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n    f = \"docProps/app.xml\";\n    if (!wb.Props) wb.Props = {};\n    wb.Props.SheetNames = wb.SheetNames;\n    wb.Props.Worksheets = wb.SheetNames.length;\n    zip.file(f, write_ext_props(wb.Props, opts));\n    ct.extprops.push(f);\n    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n\n    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {\n      f = \"docProps/custom.xml\";\n      zip.file(f, write_cust_props(wb.Custprops, opts));\n      ct.custprops.push(f);\n      add_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n    }\n\n    f = \"xl/workbook.\" + wbext;\n    zip.file(f, write_wb(wb, f, opts));\n    ct.workbooks.push(f);\n    add_rels(opts.rels, 1, f, RELS.WB);\n\n    for (rId = 1; rId <= wb.SheetNames.length; ++rId) {\n      f = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n      zip.file(f, write_ws(rId - 1, f, opts, wb));\n      ct.sheets.push(f);\n      add_rels(opts.wbrels, rId, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS);\n    }\n\n    if (opts.Strings != null && opts.Strings.length > 0) {\n      f = \"xl/sharedStrings.\" + wbext;\n      zip.file(f, write_sst(opts.Strings, f, opts));\n      ct.strs.push(f);\n      add_rels(opts.wbrels, ++rId, \"sharedStrings.\" + wbext, RELS.SST);\n    }\n    /* TODO: something more intelligent with themes */\n\n\n    f = \"xl/theme/theme1.xml\";\n    zip.file(f, write_theme(opts));\n    ct.themes.push(f);\n    add_rels(opts.wbrels, ++rId, \"theme/theme1.xml\", RELS.THEME);\n    /* TODO: something more intelligent with styles */\n\n    f = \"xl/styles.\" + wbext;\n    zip.file(f, write_sty(wb, f, opts));\n    ct.styles.push(f);\n    add_rels(opts.wbrels, ++rId, \"styles.\" + wbext, RELS.STY);\n    zip.file(\"[Content_Types].xml\", write_ct(ct, opts));\n    zip.file('_rels/.rels', write_rels(opts.rels));\n    zip.file('xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));\n    return zip;\n  }\n\n  function firstbyte(f, o) {\n    switch ((o || {}).type || \"base64\") {\n      case 'buffer':\n        return f[0];\n\n      case 'base64':\n        return Base64.decode(f.substr(0, 12)).charCodeAt(0);\n\n      case 'binary':\n        return f.charCodeAt(0);\n\n      case 'array':\n        return f[0];\n\n      default:\n        throw new Error(\"Unrecognized type \" + o.type);\n    }\n  }\n\n  function read_zip(data, opts) {\n    var zip,\n        d = data;\n    var o = opts || {};\n    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? \"buffer\" : \"base64\";\n\n    switch (o.type) {\n      case \"base64\":\n        zip = new jszip(d, {\n          base64: true\n        });\n        break;\n\n      case \"binary\":\n      case \"array\":\n        zip = new jszip(d, {\n          base64: false\n        });\n        break;\n\n      case \"buffer\":\n        zip = new jszip(d);\n        break;\n\n      case \"file\":\n        zip = new jszip(d = _fs.readFileSync(data));\n        break;\n\n      default:\n        throw new Error(\"Unrecognized type \" + o.type);\n    }\n\n    return parse_zip(zip, o);\n  }\n\n  function readSync(data, opts) {\n    var zip,\n        d = data,\n        isfile = false,\n        n;\n    var o = opts || {};\n    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? \"buffer\" : \"base64\";\n\n    if (o.type == \"file\") {\n      isfile = true;\n      o.type = \"buffer\";\n      d = _fs.readFileSync(data);\n    }\n\n    switch (n = firstbyte(d, o)) {\n      case 0xD0:\n        if (isfile) o.type = \"file\";\n        return parse_xlscfb(CFB.read(data, o), o);\n\n      case 0x09:\n        return parse_xlscfb(s2a(o.type === 'base64' ? Base64.decode(data) : data), o);\n\n      case 0x3C:\n        return parse_xlml(d, o);\n\n      case 0x50:\n        if (isfile) o.type = \"file\";\n        return read_zip(data, opts);\n\n      default:\n        throw new Error(\"Unsupported file \" + n);\n    }\n  }\n\n  function readFileSync(data, opts) {\n    var o = opts || {};\n    o.type = 'file';\n    var wb = readSync(data, o);\n    wb.FILENAME = data;\n    return wb;\n  }\n\n  function write_zip_type(wb, opts) {\n    var o = opts || {};\n    style_builder = new StyleBuilder(opts);\n    var z = write_zip(wb, o);\n\n    switch (o.type) {\n      case \"base64\":\n        return z.generate({\n          type: \"base64\"\n        });\n\n      case \"binary\":\n        return z.generate({\n          type: \"string\"\n        });\n\n      case \"buffer\":\n        return z.generate({\n          type: \"nodebuffer\"\n        });\n\n      case \"file\":\n        return _fs.writeFileSync(o.file, z.generate({\n          type: \"nodebuffer\"\n        }));\n\n      default:\n        throw new Error(\"Unrecognized type \" + o.type);\n    }\n  }\n\n  function writeSync(wb, opts) {\n    var o = opts || {};\n\n    switch (o.bookType) {\n      case 'xml':\n        return write_xlml(wb, o);\n\n      default:\n        return write_zip_type(wb, o);\n    }\n  }\n\n  function writeFileSync(wb, filename, opts) {\n    var o = opts || {};\n    o.type = 'file';\n    o.file = filename;\n\n    switch (o.file.substr(-5).toLowerCase()) {\n      case '.xlsx':\n        o.bookType = 'xlsx';\n        break;\n\n      case '.xlsm':\n        o.bookType = 'xlsm';\n        break;\n\n      case '.xlsb':\n        o.bookType = 'xlsb';\n        break;\n\n      default:\n        switch (o.file.substr(-4).toLowerCase()) {\n          case '.xls':\n            o.bookType = 'xls';\n            break;\n\n          case '.xml':\n            o.bookType = 'xml';\n            break;\n        }\n\n    }\n\n    return writeSync(wb, o);\n  }\n\n  function decode_row(rowstr) {\n    return parseInt(unfix_row(rowstr), 10) - 1;\n  }\n\n  function encode_row(row) {\n    return \"\" + (row + 1);\n  }\n\n  function fix_row(cstr) {\n    return cstr.replace(/([A-Z]|^)(\\d+)$/, \"$1$$$2\");\n  }\n\n  function unfix_row(cstr) {\n    return cstr.replace(/\\$(\\d+)$/, \"$1\");\n  }\n\n  function decode_col(colstr) {\n    var c = unfix_col(colstr),\n        d = 0,\n        i = 0;\n\n    for (; i !== c.length; ++i) {\n      d = 26 * d + c.charCodeAt(i) - 64;\n    }\n\n    return d - 1;\n  }\n\n  function encode_col(col) {\n    var s = \"\";\n\n    for (++col; col; col = Math.floor((col - 1) / 26)) {\n      s = String.fromCharCode((col - 1) % 26 + 65) + s;\n    }\n\n    return s;\n  }\n\n  function fix_col(cstr) {\n    return cstr.replace(/^([A-Z])/, \"$$$1\");\n  }\n\n  function unfix_col(cstr) {\n    return cstr.replace(/^\\$([A-Z])/, \"$1\");\n  }\n\n  function split_cell(cstr) {\n    return cstr.replace(/(\\$?[A-Z]*)(\\$?\\d*)/, \"$1,$2\").split(\",\");\n  }\n\n  function decode_cell(cstr) {\n    var splt = split_cell(cstr);\n    return {\n      c: decode_col(splt[0]),\n      r: decode_row(splt[1])\n    };\n  }\n\n  function encode_cell(cell) {\n    return encode_col(cell.c) + encode_row(cell.r);\n  }\n\n  function fix_cell(cstr) {\n    return fix_col(fix_row(cstr));\n  }\n\n  function unfix_cell(cstr) {\n    return unfix_col(unfix_row(cstr));\n  }\n\n  function decode_range(range) {\n    var x = range.split(\":\").map(decode_cell);\n    return {\n      s: x[0],\n      e: x[x.length - 1]\n    };\n  }\n\n  function encode_range(cs, ce) {\n    if (ce === undefined || typeof ce === 'number') return encode_range(cs.s, cs.e);\n    if (typeof cs !== 'string') cs = encode_cell(cs);\n    if (typeof ce !== 'string') ce = encode_cell(ce);\n    return cs == ce ? cs : cs + \":\" + ce;\n  }\n\n  function safe_decode_range(range) {\n    var o = {\n      s: {\n        c: 0,\n        r: 0\n      },\n      e: {\n        c: 0,\n        r: 0\n      }\n    };\n    var idx = 0,\n        i = 0,\n        cc = 0;\n    var len = range.length;\n\n    for (idx = 0; i < len; ++i) {\n      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n      idx = 26 * idx + cc;\n    }\n\n    o.s.c = --idx;\n\n    for (idx = 0; i < len; ++i) {\n      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n      idx = 10 * idx + cc;\n    }\n\n    o.s.r = --idx;\n\n    if (i === len || range.charCodeAt(++i) === 58) {\n      o.e.c = o.s.c;\n      o.e.r = o.s.r;\n      return o;\n    }\n\n    for (idx = 0; i != len; ++i) {\n      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n      idx = 26 * idx + cc;\n    }\n\n    o.e.c = --idx;\n\n    for (idx = 0; i != len; ++i) {\n      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n      idx = 10 * idx + cc;\n    }\n\n    o.e.r = --idx;\n    return o;\n  }\n\n  function safe_format_cell(cell, v) {\n    if (cell.z !== undefined) try {\n      return cell.w = SSF.format(cell.z, v);\n    } catch (e) {}\n    if (!cell.XF) return v;\n\n    try {\n      return cell.w = SSF.format(cell.XF.ifmt || 0, v);\n    } catch (e) {\n      return '' + v;\n    }\n  }\n\n  function format_cell(cell, v) {\n    if (cell == null || cell.t == null) return \"\";\n    if (cell.w !== undefined) return cell.w;\n    if (v === undefined) return safe_format_cell(cell, cell.v);\n    return safe_format_cell(cell, v);\n  }\n\n  function sheet_to_json(sheet, opts) {\n    var val,\n        row,\n        range,\n        header = 0,\n        offset = 1,\n        r,\n        hdr = [],\n        isempty,\n        R,\n        C,\n        v;\n    var o = opts != null ? opts : {};\n    var raw = o.raw;\n    if (sheet == null || sheet[\"!ref\"] == null) return [];\n    range = o.range !== undefined ? o.range : sheet[\"!ref\"];\n    if (o.header === 1) header = 1;else if (o.header === \"A\") header = 2;else if (Array.isArray(o.header)) header = 3;\n\n    switch (typeof range) {\n      case 'string':\n        r = safe_decode_range(range);\n        break;\n\n      case 'number':\n        r = safe_decode_range(sheet[\"!ref\"]);\n        r.s.r = range;\n        break;\n\n      default:\n        r = range;\n    }\n\n    if (header > 0) offset = 0;\n    var rr = encode_row(r.s.r);\n    var cols = new Array(r.e.c - r.s.c + 1);\n    var out = new Array(r.e.r - r.s.r - offset + 1);\n    var outi = 0;\n\n    for (C = r.s.c; C <= r.e.c; ++C) {\n      cols[C] = encode_col(C);\n      val = sheet[cols[C] + rr];\n\n      switch (header) {\n        case 1:\n          hdr[C] = C;\n          break;\n\n        case 2:\n          hdr[C] = cols[C];\n          break;\n\n        case 3:\n          hdr[C] = o.header[C - r.s.c];\n          break;\n\n        default:\n          if (val === undefined) continue;\n          hdr[C] = format_cell(val);\n      }\n    }\n\n    for (R = r.s.r + offset; R <= r.e.r; ++R) {\n      rr = encode_row(R);\n      isempty = true;\n      if (header === 1) row = [];else {\n        row = {};\n        if (Object.defineProperty) Object.defineProperty(row, '__rowNum__', {\n          value: R,\n          enumerable: false\n        });else row.__rowNum__ = R;\n      }\n\n      for (C = r.s.c; C <= r.e.c; ++C) {\n        val = sheet[cols[C] + rr];\n        if (val === undefined || val.t === undefined) continue;\n        v = val.v;\n\n        switch (val.t) {\n          case 'e':\n            continue;\n\n          case 's':\n            break;\n\n          case 'b':\n          case 'n':\n            break;\n\n          default:\n            throw 'unrecognized type ' + val.t;\n        }\n\n        if (v !== undefined) {\n          row[hdr[C]] = raw ? v : format_cell(val, v);\n          isempty = false;\n        }\n      }\n\n      if (isempty === false || header === 1) out[outi++] = row;\n    }\n\n    out.length = outi;\n    return out;\n  }\n\n  function sheet_to_row_object_array(sheet, opts) {\n    return sheet_to_json(sheet, opts != null ? opts : {});\n  }\n\n  function sheet_to_csv(sheet, opts) {\n    var out = \"\",\n        txt = \"\",\n        qreg = /\"/g;\n    var o = opts == null ? {} : opts;\n    if (sheet == null || sheet[\"!ref\"] == null) return \"\";\n    var r = safe_decode_range(sheet[\"!ref\"]);\n    var FS = o.FS !== undefined ? o.FS : \",\",\n        fs = FS.charCodeAt(0);\n    var RS = o.RS !== undefined ? o.RS : \"\\n\",\n        rs = RS.charCodeAt(0);\n    var row = \"\",\n        rr = \"\",\n        cols = [];\n    var i = 0,\n        cc = 0,\n        val;\n    var R = 0,\n        C = 0;\n\n    for (C = r.s.c; C <= r.e.c; ++C) {\n      cols[C] = encode_col(C);\n    }\n\n    for (R = r.s.r; R <= r.e.r; ++R) {\n      row = \"\";\n      rr = encode_row(R);\n\n      for (C = r.s.c; C <= r.e.c; ++C) {\n        val = sheet[cols[C] + rr];\n        txt = val !== undefined ? '' + format_cell(val) : \"\";\n\n        for (i = 0, cc = 0; i !== txt.length; ++i) {\n          if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {\n            txt = \"\\\"\" + txt.replace(qreg, '\"\"') + \"\\\"\";\n            break;\n          }\n        }\n\n        row += (C === r.s.c ? \"\" : FS) + txt;\n      }\n\n      out += row + RS;\n    }\n\n    return out;\n  }\n\n  var make_csv = sheet_to_csv;\n\n  function sheet_to_formulae(sheet) {\n    var cmds,\n        y = \"\",\n        x,\n        val = \"\";\n    if (sheet == null || sheet[\"!ref\"] == null) return \"\";\n    var r = safe_decode_range(sheet['!ref']),\n        rr = \"\",\n        cols = [],\n        C;\n    cmds = new Array((r.e.r - r.s.r + 1) * (r.e.c - r.s.c + 1));\n    var i = 0;\n\n    for (C = r.s.c; C <= r.e.c; ++C) {\n      cols[C] = encode_col(C);\n    }\n\n    for (var R = r.s.r; R <= r.e.r; ++R) {\n      rr = encode_row(R);\n\n      for (C = r.s.c; C <= r.e.c; ++C) {\n        y = cols[C] + rr;\n        x = sheet[y];\n        val = \"\";\n        if (x === undefined) continue;\n        if (x.f != null) val = x.f;else if (x.w !== undefined) val = \"'\" + x.w;else if (x.v === undefined) continue;else val = \"\" + x.v;\n        cmds[i++] = y + \"=\" + val;\n      }\n    }\n\n    cmds.length = i;\n    return cmds;\n  }\n\n  var utils = {\n    encode_col: encode_col,\n    encode_row: encode_row,\n    encode_cell: encode_cell,\n    encode_range: encode_range,\n    decode_col: decode_col,\n    decode_row: decode_row,\n    split_cell: split_cell,\n    decode_cell: decode_cell,\n    decode_range: decode_range,\n    format_cell: format_cell,\n    get_formulae: sheet_to_formulae,\n    make_csv: sheet_to_csv,\n    make_json: sheet_to_json,\n    make_formulae: sheet_to_formulae,\n    sheet_to_csv: sheet_to_csv,\n    sheet_to_json: sheet_to_json,\n    sheet_to_formulae: sheet_to_formulae,\n    sheet_to_row_object_array: sheet_to_row_object_array\n  }; /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var XmlNode = function () {\n    function XmlNode(tagName, attributes, children) {\n      if (!(this instanceof XmlNode)) {\n        return new XmlNode(tagName, attributes, children);\n      }\n\n      this.tagName = tagName;\n      this._attributes = attributes || {};\n      this._children = children || [];\n      this._prefix = '';\n      return this;\n    }\n\n    XmlNode.prototype.createElement = function () {\n      return new XmlNode(arguments);\n    };\n\n    XmlNode.prototype.children = function () {\n      return this._children;\n    };\n\n    XmlNode.prototype.append = function (node) {\n      this._children.push(node);\n\n      return this;\n    };\n\n    XmlNode.prototype.prefix = function (prefix) {\n      if (arguments.length == 0) {\n        return this._prefix;\n      }\n\n      this._prefix = prefix;\n      return this;\n    };\n\n    XmlNode.prototype.attr = function (attr, value) {\n      if (value == undefined) {\n        delete this._attributes[attr];\n        return this;\n      }\n\n      if (arguments.length == 0) {\n        return this._attributes;\n      } else if (typeof attr == 'string' && arguments.length == 1) {\n        return this._attributes.attr[attr];\n      }\n\n      if (typeof attr == 'object' && arguments.length == 1) {\n        for (var key in attr) {\n          this._attributes[key] = attr[key];\n        }\n      } else if (arguments.length == 2 && typeof attr == 'string') {\n        this._attributes[attr] = value;\n      }\n\n      return this;\n    };\n\n    var APOS = \"'\";\n    QUOTE = '\"';\n    var ESCAPED_QUOTE = {};\n    ESCAPED_QUOTE[QUOTE] = '&quot;';\n    ESCAPED_QUOTE[APOS] = '&apos;';\n\n    XmlNode.prototype.escapeAttributeValue = function (att_value) {\n      return '\"' + att_value.replace(/\\\"/g, '&quot;') + '\"'; // TODO Extend with four other codes\n    };\n\n    XmlNode.prototype.toXml = function (node) {\n      if (!node) node = this;\n      var xml = node._prefix;\n      xml += '<' + node.tagName;\n\n      if (node._attributes) {\n        for (var key in node._attributes) {\n          xml += ' ' + key + '=' + this.escapeAttributeValue('' + node._attributes[key]) + '';\n        }\n      }\n\n      if (node._children && node._children.length > 0) {\n        xml += \">\";\n\n        for (var i = 0; i < node._children.length; i++) {\n          xml += this.toXml(node._children[i]);\n        }\n\n        xml += '</' + node.tagName + '>';\n      } else {\n        xml += '/>';\n      }\n\n      return xml;\n    };\n\n    return XmlNode;\n  }(); /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  var StyleBuilder = function StyleBuilder(options) {\n    var customNumFmtId = 164;\n    var table_fmt = {\n      0: 'General',\n      1: '0',\n      2: '0.00',\n      3: '#,##0',\n      4: '#,##0.00',\n      9: '0%',\n      10: '0.00%',\n      11: '0.00E+00',\n      12: '# ?/?',\n      13: '# ??/??',\n      14: 'm/d/yy',\n      15: 'd-mmm-yy',\n      16: 'd-mmm',\n      17: 'mmm-yy',\n      18: 'h:mm AM/PM',\n      19: 'h:mm:ss AM/PM',\n      20: 'h:mm',\n      21: 'h:mm:ss',\n      22: 'm/d/yy h:mm',\n      37: '#,##0 ;(#,##0)',\n      38: '#,##0 ;[Red](#,##0)',\n      39: '#,##0.00;(#,##0.00)',\n      40: '#,##0.00;[Red](#,##0.00)',\n      45: 'mm:ss',\n      46: '[h]:mm:ss',\n      47: 'mmss.0',\n      48: '##0.0E+0',\n      49: '@',\n      56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"'\n    };\n    var fmt_table = {};\n\n    for (var idx in table_fmt) {\n      fmt_table[table_fmt[idx]] = idx;\n    } // cache style specs to avoid excessive duplication\n\n\n    _hashIndex = {};\n    _listIndex = [];\n    return {\n      initialize: function initialize(options) {\n        this.$fonts = XmlNode('fonts').attr('count', 0).attr(\"x14ac:knownFonts\", \"1\");\n        this.$fills = XmlNode('fills').attr('count', 0);\n        this.$borders = XmlNode('borders').attr('count', 0);\n        this.$numFmts = XmlNode('numFmts').attr('count', 0);\n        this.$cellStyleXfs = XmlNode('cellStyleXfs');\n        this.$xf = XmlNode('xf').attr('numFmtId', 0).attr('fontId', 0).attr('fillId', 0).attr('borderId', 0);\n        this.$cellXfs = XmlNode('cellXfs').attr('count', 0);\n        this.$cellStyles = XmlNode('cellStyles').append(XmlNode('cellStyle').attr('name', 'Normal').attr('xfId', 0).attr('builtinId', 0));\n        this.$dxfs = XmlNode('dxfs').attr('count', \"0\");\n        this.$tableStyles = XmlNode('tableStyles').attr('count', '0').attr('defaultTableStyle', 'TableStyleMedium9').attr('defaultPivotStyle', 'PivotStyleMedium4');\n        this.$styles = XmlNode('styleSheet').attr('xmlns:mc', 'http://schemas.openxmlformats.org/markup-compatibility/2006').attr('xmlns:x14ac', 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac').attr('xmlns', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main').attr('mc:Ignorable', 'x14ac').prefix('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>').append(this.$numFmts).append(this.$fonts).append(this.$fills).append(this.$borders).append(this.$cellStyleXfs.append(this.$xf)).append(this.$cellXfs).append(this.$cellStyles).append(this.$dxfs).append(this.$tableStyles); // need to specify styles at index 0 and 1.\n        // the second style MUST be gray125 for some reason\n\n        var defaultStyle = options.defaultCellStyle || {};\n        if (!defaultStyle.font) defaultStyle.font = {\n          name: 'Calibri',\n          sz: '12'\n        };\n        if (!defaultStyle.font.name) defaultStyle.font.name = 'Calibri';\n        if (!defaultStyle.font.sz) defaultStyle.font.sz = 11;\n        if (!defaultStyle.fill) defaultStyle.fill = {\n          patternType: \"none\",\n          fgColor: {}\n        };\n        if (!defaultStyle.border) defaultStyle.border = {};\n        if (!defaultStyle.numFmt) defaultStyle.numFmt = 0;\n        this.defaultStyle = defaultStyle;\n        var gray125Style = JSON.parse(JSON.stringify(defaultStyle));\n        gray125Style.fill = {\n          patternType: \"gray125\",\n          fgColor: {}\n        };\n        this.addStyles([defaultStyle, gray125Style]);\n        return this;\n      },\n      // create a style entry and returns an integer index that can be used in the cell .s property\n      // these format of this object follows the emerging Common Spreadsheet Format\n      addStyle: function addStyle(attributes) {\n        var hashKey = JSON.stringify(attributes);\n        var index = _hashIndex[hashKey];\n\n        if (index == undefined) {\n          index = this._addXf(attributes); //_listIndex.push(attributes) -1;\n\n          _hashIndex[hashKey] = index;\n        } else {\n          index = _hashIndex[hashKey];\n        }\n\n        return index;\n      },\n      // create style entries and returns array of integer indexes that can be used in cell .s property\n      addStyles: function addStyles(styles) {\n        var self = this;\n        return styles.map(function (style) {\n          return self.addStyle(style);\n        });\n      },\n      _duckTypeStyle: function _duckTypeStyle(attributes) {\n        if (typeof attributes == 'object' && (attributes.patternFill || attributes.fgColor)) {\n          return {\n            fill: attributes\n          }; // this must be read via XLSX.parseFile(...)\n        } else if (attributes.font || attributes.numFmt || attributes.border || attributes.fill) {\n          return attributes;\n        } else {\n          return this._getStyleCSS(attributes);\n        }\n      },\n      _getStyleCSS: function _getStyleCSS(css) {\n        return css; //TODO\n      },\n      // Create an <xf> record for the style as well as corresponding <font>, <fill>, <border>, <numfmts>\n      // Right now this is simple and creates a <font>, <fill>, <border>, <numfmts> for every <xf>\n      // We could perhaps get fancier and avoid duplicating  auxiliary entries as Excel presumably intended, but bother.\n      _addXf: function _addXf(attributes) {\n        var fontId = this._addFont(attributes.font);\n\n        var fillId = this._addFill(attributes.fill);\n\n        var borderId = this._addBorder(attributes.border);\n\n        var numFmtId = this._addNumFmt(attributes.numFmt);\n\n        var $xf = XmlNode('xf').attr(\"numFmtId\", numFmtId).attr(\"fontId\", fontId).attr(\"fillId\", fillId).attr(\"borderId\", borderId).attr(\"xfId\", \"0\");\n\n        if (fontId > 0) {\n          $xf.attr('applyFont', \"1\");\n        }\n\n        if (fillId > 0) {\n          $xf.attr('applyFill', \"1\");\n        }\n\n        if (borderId > 0) {\n          $xf.attr('applyBorder', \"1\");\n        }\n\n        if (numFmtId > 0) {\n          $xf.attr('applyNumberFormat', \"1\");\n        }\n\n        if (attributes.alignment) {\n          var $alignment = XmlNode('alignment');\n\n          if (attributes.alignment.horizontal) {\n            $alignment.attr('horizontal', attributes.alignment.horizontal);\n          }\n\n          if (attributes.alignment.vertical) {\n            $alignment.attr('vertical', attributes.alignment.vertical);\n          }\n\n          if (attributes.alignment.indent) {\n            $alignment.attr('indent', attributes.alignment.indent);\n          }\n\n          if (attributes.alignment.readingOrder) {\n            $alignment.attr('readingOrder', attributes.alignment.readingOrder);\n          }\n\n          if (attributes.alignment.wrapText) {\n            $alignment.attr('wrapText', attributes.alignment.wrapText);\n          }\n\n          if (attributes.alignment.textRotation != undefined) {\n            $alignment.attr('textRotation', attributes.alignment.textRotation);\n          }\n\n          $xf.append($alignment).attr('applyAlignment', 1);\n        }\n\n        this.$cellXfs.append($xf);\n        var count = +this.$cellXfs.children().length;\n        this.$cellXfs.attr('count', count);\n        return count - 1;\n      },\n      _addFont: function _addFont(attributes) {\n        if (!attributes) {\n          return 0;\n        }\n\n        var $font = XmlNode('font').append(XmlNode('sz').attr('val', attributes.sz || this.defaultStyle.font.sz)).append(XmlNode('name').attr('val', attributes.name || this.defaultStyle.font.name));\n        if (attributes.bold) $font.append(XmlNode('b'));\n        if (attributes.underline) $font.append(XmlNode('u'));\n        if (attributes.italic) $font.append(XmlNode('i'));\n        if (attributes.strike) $font.append(XmlNode('strike'));\n        if (attributes.outline) $font.append(XmlNode('outline'));\n        if (attributes.shadow) $font.append(XmlNode('shadow'));\n\n        if (attributes.vertAlign) {\n          $font.append(XmlNode('vertAlign').attr('val', attributes.vertAlign));\n        }\n\n        if (attributes.color) {\n          if (attributes.color.theme) {\n            $font.append(XmlNode('color').attr('theme', attributes.color.theme));\n\n            if (attributes.color.tint) {\n              //tint only if theme\n              $font.append(XmlNode('tint').attr('theme', attributes.color.tint));\n            }\n          } else if (attributes.color.rgb) {\n            // not both rgb and theme\n            $font.append(XmlNode('color').attr('rgb', attributes.color.rgb));\n          }\n        }\n\n        this.$fonts.append($font);\n        var count = this.$fonts.children().length;\n        this.$fonts.attr('count', count);\n        return count - 1;\n      },\n      _addNumFmt: function _addNumFmt(numFmt) {\n        if (!numFmt) {\n          return 0;\n        }\n\n        if (typeof numFmt == 'string') {\n          var numFmtIdx = fmt_table[numFmt];\n\n          if (numFmtIdx >= 0) {\n            return numFmtIdx; // we found a match against built in formats\n          }\n        }\n\n        if (/^[0-9]+$/.exec(numFmt)) {\n          return numFmt; // we're matching an integer against some known code\n        }\n\n        numFmt = numFmt.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n        var $numFmt = XmlNode('numFmt').attr('numFmtId', ++customNumFmtId).attr('formatCode', numFmt);\n        this.$numFmts.append($numFmt);\n        var count = this.$numFmts.children().length;\n        this.$numFmts.attr('count', count);\n        return customNumFmtId;\n      },\n      _addFill: function _addFill(attributes) {\n        if (!attributes) {\n          return 0;\n        }\n\n        var $patternFill = XmlNode('patternFill').attr('patternType', attributes.patternType || 'solid');\n\n        if (attributes.fgColor) {\n          var $fgColor = XmlNode('fgColor'); //Excel doesn't like it when we set both rgb and theme+tint, but xlsx.parseFile() sets both\n          //var $fgColor = createElement('<fgColor/>', null, null, {xmlMode: true}).attr(attributes.fgColor)\n\n          if (attributes.fgColor.rgb) {\n            if (attributes.fgColor.rgb.length == 6) {\n              attributes.fgColor.rgb = \"FF\" + attributes.fgColor.rgb; /// add alpha to an RGB as Excel expects aRGB\n            }\n\n            $fgColor.attr('rgb', attributes.fgColor.rgb);\n            $patternFill.append($fgColor);\n          } else if (attributes.fgColor.theme) {\n            $fgColor.attr('theme', attributes.fgColor.theme);\n\n            if (attributes.fgColor.tint) {\n              $fgColor.attr('tint', attributes.fgColor.tint);\n            }\n\n            $patternFill.append($fgColor);\n          }\n\n          if (!attributes.bgColor) {\n            attributes.bgColor = {\n              \"indexed\": \"64\"\n            };\n          }\n        }\n\n        if (attributes.bgColor) {\n          var $bgColor = XmlNode('bgColor').attr(attributes.bgColor);\n          $patternFill.append($bgColor);\n        }\n\n        var $fill = XmlNode('fill').append($patternFill);\n        this.$fills.append($fill);\n        var count = this.$fills.children().length;\n        this.$fills.attr('count', count);\n        return count - 1;\n      },\n      _getSubBorder: function _getSubBorder(direction, spec) {\n        var $direction = XmlNode(direction);\n\n        if (spec) {\n          if (spec.style) $direction.attr('style', spec.style);\n\n          if (spec.color) {\n            var $color = XmlNode('color');\n\n            if (spec.color.auto) {\n              $color.attr('auto', spec.color.auto);\n            } else if (spec.color.rgb) {\n              $color.attr('rgb', spec.color.rgb);\n            } else if (spec.color.theme || spec.color.tint) {\n              $color.attr('theme', spec.color.theme || \"1\");\n              $color.attr('tint', spec.color.tint || \"0\");\n            }\n\n            $direction.append($color);\n          }\n        }\n\n        return $direction;\n      },\n      _addBorder: function _addBorder(attributes) {\n        if (!attributes) {\n          return 0;\n        }\n\n        var self = this;\n        var $border = XmlNode('border').attr(\"diagonalUp\", attributes.diagonalUp).attr(\"diagonalDown\", attributes.diagonalDown);\n        var directions = [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"];\n        directions.forEach(function (direction) {\n          $border.append(self._getSubBorder(direction, attributes[direction]));\n        });\n        this.$borders.append($border);\n        var count = this.$borders.children().length;\n        this.$borders.attr('count', count);\n        return count - 1;\n      },\n      toXml: function toXml() {\n        return this.$styles.toXml();\n      }\n    }.initialize(options || {});\n  };\n\n  XLSX.parse_xlscfb = parse_xlscfb;\n  XLSX.parse_zip = parse_zip;\n  XLSX.read = readSync; //xlsread\n\n  XLSX.readFile = readFileSync; //readFile\n\n  XLSX.readFileSync = readFileSync;\n  XLSX.write = writeSync;\n  XLSX.writeFile = writeFileSync;\n  XLSX.writeFileSync = writeFileSync;\n  XLSX.utils = utils;\n  XLSX.CFB = CFB;\n  XLSX.SSF = SSF;\n})(typeof exports !== 'undefined' ? exports : XLSX);\n\nvar XLS = XLSX;","map":null,"metadata":{},"sourceType":"script"}