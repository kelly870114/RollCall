{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.excelSheetFromDataSet = exports.excelSheetFromAoA = exports.dateToNumber = exports.strToArrBuffer = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _tempaXlsx = require('tempa-xlsx');\n\nvar _tempaXlsx2 = _interopRequireDefault(_tempaXlsx);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar strToArrBuffer = function strToArrBuffer(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n\n  for (var i = 0; i != s.length; ++i) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n\n  return buf;\n};\n\nvar dateToNumber = function dateToNumber(v, date1904) {\n  if (date1904) {\n    v += 1462;\n  }\n\n  var epoch = Date.parse(v);\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n};\n\nvar excelSheetFromDataSet = function excelSheetFromDataSet(dataSet) {\n  /*\n  Assuming the structure of dataset\n  {\n      xSteps?: number; //How many cells to skips from left\n      ySteps?: number; //How many rows to skips from last data\n      columns: [array | string]\n      data: [array_of_array | string|boolean|number | CellObject]\n      fill, font, numFmt, alignment, and border\n  }\n   */\n  if (dataSet === undefined || dataSet.length === 0) {\n    return {};\n  }\n\n  var ws = {};\n  var range = {\n    s: {\n      c: 10000000,\n      r: 10000000\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n  var rowCount = 0;\n  dataSet.forEach(function (dataSetItem) {\n    var columns = dataSetItem.columns;\n    var xSteps = typeof dataSetItem.xSteps === 'number' ? dataSetItem.xSteps : 0;\n    var ySteps = typeof dataSetItem.ySteps === 'number' ? dataSetItem.ySteps : 0;\n    var data = dataSetItem.data;\n\n    if (dataSet === undefined || dataSet.length === 0) {\n      return;\n    }\n\n    rowCount += ySteps;\n    var columnsWidth = [];\n\n    if (columns.length >= 0) {\n      columns.forEach(function (col, index) {\n        var cellRef = _tempaXlsx2.default.utils.encode_cell({\n          c: xSteps + index,\n          r: rowCount\n        });\n\n        fixRange(range, 0, 0, rowCount, xSteps, ySteps);\n        var colTitle = col;\n\n        if ((typeof col === 'undefined' ? 'undefined' : _typeof(col)) === 'object') {\n          colTitle = col.title;\n          columnsWidth.push(col.width || {\n            wpx: 80\n          });\n          /* wch (chars), wpx (pixels) - e.g. [{wch:6},{wpx:50}] */\n        }\n\n        getHeaderCell(colTitle, cellRef, ws);\n      });\n      rowCount += 1;\n    }\n\n    if (columnsWidth.length > 0) {\n      ws['!cols'] = columnsWidth;\n    }\n\n    for (var R = 0; R != data.length; ++R, rowCount++) {\n      for (var C = 0; C != data[R].length; ++C) {\n        var cellRef = _tempaXlsx2.default.utils.encode_cell({\n          c: C + xSteps,\n          r: rowCount\n        });\n\n        fixRange(range, R, C, rowCount, xSteps, ySteps);\n        getCell(data[R][C], cellRef, ws);\n      }\n    }\n  });\n\n  if (range.s.c < 10000000) {\n    ws['!ref'] = _tempaXlsx2.default.utils.encode_range(range);\n  }\n\n  return ws;\n};\n\nfunction getHeaderCell(v, cellRef, ws) {\n  var cell = {};\n  var headerCellStyle = {\n    font: {\n      bold: true\n    }\n  };\n  cell.v = v;\n  cell.t = 's';\n  cell.s = headerCellStyle;\n  ws[cellRef] = cell;\n}\n\nfunction getCell(v, cellRef, ws) {\n  //assume v is indeed the value. for other cases (object, date...) it will be overriden.\n  var cell = {\n    v: v\n  };\n\n  if (v === null) {\n    return;\n  }\n\n  var isDate = v instanceof Date;\n\n  if (!isDate && (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object') {\n    cell.s = v.style;\n    cell.v = v.value;\n    v = v.value;\n  }\n\n  if (typeof v === 'number') {\n    cell.t = 'n';\n  } else if (typeof v === 'boolean') {\n    cell.t = 'b';\n  } else if (isDate) {\n    cell.t = 'n';\n    cell.z = _tempaXlsx2.default.SSF._table[14];\n    cell.v = dateToNumber(cell.v);\n  } else {\n    cell.t = 's';\n  }\n\n  ws[cellRef] = cell;\n}\n\nfunction fixRange(range, R, C, rowCount, xSteps, ySteps) {\n  if (range.s.r > R + rowCount) {\n    range.s.r = R + rowCount;\n  }\n\n  if (range.s.c > C + xSteps) {\n    range.s.c = C + xSteps;\n  }\n\n  if (range.e.r < R + rowCount) {\n    range.e.r = R + rowCount;\n  }\n\n  if (range.e.c < C + xSteps) {\n    range.e.c = C + xSteps;\n  }\n}\n\nvar excelSheetFromAoA = function excelSheetFromAoA(data) {\n  var ws = {};\n  var range = {\n    s: {\n      c: 10000000,\n      r: 10000000\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n\n  for (var R = 0; R != data.length; ++R) {\n    for (var C = 0; C != data[R].length; ++C) {\n      if (range.s.r > R) {\n        range.s.r = R;\n      }\n\n      if (range.s.c > C) {\n        range.s.c = C;\n      }\n\n      if (range.e.r < R) {\n        range.e.r = R;\n      }\n\n      if (range.e.c < C) {\n        range.e.c = C;\n      }\n\n      var cell = {\n        v: data[R][C]\n      };\n\n      if (cell.v === null) {\n        continue;\n      }\n\n      var cellRef = _tempaXlsx2.default.utils.encode_cell({\n        c: C,\n        r: R\n      });\n\n      if (typeof cell.v === 'number') {\n        cell.t = 'n';\n      } else if (typeof cell.v === 'boolean') {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.z = _tempaXlsx2.default.SSF._table[14];\n        cell.v = dateToNumber(cell.v);\n      } else {\n        cell.t = 's';\n      }\n\n      ws[cellRef] = cell;\n    }\n  }\n\n  if (range.s.c < 10000000) {\n    ws['!ref'] = _tempaXlsx2.default.utils.encode_range(range);\n  }\n\n  return ws;\n};\n\nexports.strToArrBuffer = strToArrBuffer;\nexports.dateToNumber = dateToNumber;\nexports.excelSheetFromAoA = excelSheetFromAoA;\nexports.excelSheetFromDataSet = excelSheetFromDataSet;","map":null,"metadata":{},"sourceType":"script"}