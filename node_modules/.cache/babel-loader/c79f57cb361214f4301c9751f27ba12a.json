{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u800D\\u5EE2\\u793E\\\\Desktop\\\\MyProject\\\\src\\\\components\\\\Classpage\\\\Grade.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Upload from '@material-ui/icons/CreateNewFolderRounded';\nimport { withStyles } from '@material-ui/core/styles'; // import { fromJS, List, Map } from 'immutable'\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport XLSX from 'xlsx';\nimport Appbar from '../AppBar/Appbar'; //import { fetchPostSchedule } from '../../api';\n\nimport Airtable from 'airtable';\nvar TABLE_NAME = 'TestScore';\nvar STU_TABLE_NAME = 'Student';\nvar base = new Airtable({\n  apiKey: 'keyA7EKdngjou4Dgy'\n}).base('appcXtOTPnE4QWIIt');\nvar table = base(TABLE_NAME);\nvar studentTable = base(STU_TABLE_NAME);\n\nvar styles = function styles(theme) {\n  return {\n    card: {\n      backgroundColor: '#212832',\n      border: '0.8px #FFBF5F solid',\n      borderRadius: '2px',\n      width: '80%',\n      minWidth: '1000px',\n      marginTop: theme.spacing.unit * 5,\n      margin: '0 auto',\n      padding: '3%'\n    },\n    button: {\n      backgroundColor: '#111B24',\n      color: 'white'\n    },\n    UploadIcon: {\n      margin: '0 auto'\n    },\n    input: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      left: 0,\n      outline: 'none',\n      opacity: 0\n    },\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n      overflowX: 'auto',\n      backgroundColor: '#212832',\n      border: 'white 1px solid'\n    },\n    head: {\n      fontSize: '14pt',\n      color: '#FFBF5F'\n    },\n    content: {\n      fontSize: '14pt'\n    },\n    editButton: {\n      border: '#FFBF5F 1px solid',\n      float: 'right',\n      marginLeft: theme.spacing.unit * 2\n    }\n  };\n};\n\nvar id = 0;\n\nfunction createData(grade_studentName, grade_studentId, grade_studentGrade, grade_studentRank) {\n  id += 1;\n  return {\n    id: id,\n    grade_studentName: grade_studentName,\n    grade_studentId: grade_studentId,\n    grade_studentGrade: grade_studentGrade,\n    grade_studentRank: grade_studentRank\n  };\n}\n\nvar Grade =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Grade, _Component);\n\n  function Grade() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Grade);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Grade)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      rows: [],\n      rowsInit: [] //class_id:'',\n      // componentWillReceiveProps(nextProps) {\n      //     if (nextProps.class_id !== this.state.class_id) {\n      //         var count = this.state.rowsInit.length;\n      //         var temp = [];\n      //         for (var index = 0; index < count; index++) {\n      //             if (nextProps.class_id === this.state.rowsInit[index].class_id) {\n      //                 temp.push(this.state.rowsInit[index]);\n      //                 this.setState({ rows: temp });\n      //             }\n      //         }\n      //         this.setState({ class_id: nextProps.class_id });\n      //     }\n      // }\n      //airtable\n\n    };\n\n    _this.onImportExcel = function (file) {\n      // 獲取上傳的文件對象\n      var files = file.target.files; // 通過FileReader讀取文件\n\n      var fileReader = new FileReader();\n\n      fileReader.onload = function (event) {\n        try {\n          var result = event.target.result; // 以二進制方式讀取得到整份excel表格\n\n          var workbook = XLSX.read(result, {\n            type: 'binary'\n          }); // 儲存獲取到的數據\n\n          var data = []; // 對每張工作表行行讀取（預設只讀取第一張表）\n\n          for (var sheet in workbook.Sheets) {\n            // esline-disable-next-line\n            if (workbook.Sheets.hasOwnProperty(sheet)) {\n              // 利用 sheet_to_json 方法將 excel 轉成 json 數據\n              data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet])); // break;\n            }\n          } // 最終獲取到且格式化的 json 數據\n\n\n          _this.setState({\n            data: data\n          });\n\n          var grade_studentName = _this.state.data.map(function (data, index) {\n            return data['grade_studentName'];\n          });\n\n          var grade_studentId = _this.state.data.map(function (data, index) {\n            return data['grade_studentId'];\n          });\n\n          var grade_studentGrade = _this.state.data.map(function (data, index) {\n            return data['grade_studentGrade'];\n          });\n\n          var grade_studentRank = _this.state.data.map(function (data, index) {\n            return data['grade_studentRank'];\n          }); // for (var index = 0; index < id; index++) {\n          //     data.push(createData(grade_studentName[index], grade_studentId[index], grade_studentGrade[index], grade_studentRank[index]));\n          // }\n\n\n          _this.setState({\n            rows: data\n          }); // console.log(data);\n          // console.log(data[0]);\n          // console.log(data[0].grade_studentName);\n          // console.log(data[0].grade_studentId);\n\n        } catch (e) {// message.error('文件類型不正确！');\n        }\n      };\n\n      fileReader.readAsBinaryString(files[0]);\n    };\n\n    return _this;\n  }\n\n  _createClass(Grade, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // const fileterSentence = 'AND(test_date=\"' + this.props.location.aboutProps.name.split(\" \")[0] + \n      // '\"),AND(test_name=\"'+ this.props.location.aboutProps.name.split(\" \")[1] + '\")';\n      var fileterSentence = 'AND(test_name=\"' + this.props.location.aboutProps.name.split(\" \")[1] + '\")';\n      table.select({\n        filterByFormula: fileterSentence,\n        view: \"Grid view\" //maxRecords: 1\n\n      }).eachPage(function (records, fetchNextPage) {\n        _this2.setState({\n          records: records\n        }); //const class_id = this.state.records.map((record, index) => record.fields['class_id']);\n\n\n        var student_id = _this2.state.records.map(function (record, index) {\n          return record.fields['student_id'];\n        });\n\n        var test_score = _this2.state.records.map(function (record, index) {\n          return record.fields['test_score'];\n        });\n\n        var test_rank = _this2.state.records.map(function (record, index) {\n          return record.fields['test_rank'];\n        }); //for stu name\n\n\n        var temp = [];\n\n        var _loop = function _loop() {\n          var student_idR = student_id[index];\n          var test_scoreR = test_score[index];\n          var test_rankR = test_rank[index];\n          studentTable.select({\n            filterByFormula: 'AND(student_id=\"' + student_idR + '\")',\n            view: \"Grid view\" //maxRecords: 1\n\n          }).eachPage(function (records, fetchNextPage) {\n            _this2.setState({\n              records: records\n            });\n\n            var student_name = _this2.state.records.map(function (record, index) {\n              return record.fields['student_name'];\n            });\n\n            temp.push(createData(student_name[0], student_idR, test_scoreR, test_rankR));\n          });\n        };\n\n        for (var index = 0; index < student_id.length; index++) {\n          _loop();\n        } // var temp = [];\n        // for(var index = 0; index < student_id.length; index++) {\n        //     temp.push(createData(\"namee\",student_id[index],test_score[index],\"rank\"));  \n        // }\n\n\n        _this2.setState({\n          rows: temp\n        });\n\n        console.log(_this2.state.rows);\n\n        _this2.setState({\n          rowsInit: temp\n        }); // fetchNextPage();\n\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props.location.aboutProps.name);\n      var classes = this.props.classes;\n      var rows = this.state.rows;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(Appbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: classes.card,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          borderColor: '#FFBF5F'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: classes.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(Upload, {\n        type: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: classes.input,\n        type: \"file\",\n        accept: \".xlsx, .xls\",\n        onChange: this.onImportExcel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"\\u6210\\u7E3E\\u4E0A\\u50B3\")), React.createElement(Paper, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: classes.head,\n        style: {\n          width: '25%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"\\u5B78\\u751F\\u59D3\\u540D\"), React.createElement(TableCell, {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"\\u5B78\\u865F\"), React.createElement(TableCell, {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"\\u5206\\u6578\"), React.createElement(TableCell, {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"\\u6392\\u540D\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, rows.map(function (row) {\n        return React.createElement(TableRow, {\n          hover: true,\n          key: row.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          className: classes.content,\n          style: {\n            width: '25%'\n          },\n          component: \"th\",\n          scope: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, row.grade_studentName), React.createElement(TableCell, {\n          className: classes.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, row.grade_studentId), React.createElement(TableCell, {\n          className: classes.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, row.grade_studentGrade), React.createElement(TableCell, {\n          className: classes.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, row.grade_studentRank));\n      }))))))));\n    }\n  }]);\n\n  return Grade;\n}(Component);\n\nexport default withStyles(styles)(Grade);","map":{"version":3,"sources":["C:\\Users\\耍廢社\\Desktop\\MyProject\\src\\components\\Classpage\\Grade.js"],"names":["React","Component","Button","Card","Upload","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","XLSX","Appbar","Airtable","TABLE_NAME","STU_TABLE_NAME","base","apiKey","table","studentTable","styles","theme","card","backgroundColor","border","borderRadius","width","minWidth","marginTop","spacing","unit","margin","padding","button","color","UploadIcon","input","position","height","top","left","outline","opacity","root","overflowX","head","fontSize","content","editButton","float","marginLeft","id","createData","grade_studentName","grade_studentId","grade_studentGrade","grade_studentRank","Grade","state","rows","rowsInit","onImportExcel","file","files","target","fileReader","FileReader","onload","event","result","workbook","read","type","data","sheet","Sheets","hasOwnProperty","concat","utils","sheet_to_json","setState","map","index","e","readAsBinaryString","fileterSentence","props","location","aboutProps","name","split","select","filterByFormula","view","eachPage","records","fetchNextPage","student_id","record","fields","test_score","test_rank","temp","student_idR","test_scoreR","test_rankR","student_name","push","length","console","log","classes","borderColor","row"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport Upload from '@material-ui/icons/CreateNewFolderRounded';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { fromJS, List, Map } from 'immutable'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport XLSX from 'xlsx';\r\nimport Appbar from '../AppBar/Appbar';\r\n//import { fetchPostSchedule } from '../../api';\r\nimport Airtable from 'airtable';\r\n\r\nconst TABLE_NAME = 'TestScore';\r\nconst STU_TABLE_NAME = 'Student';\r\nconst base = new Airtable({ apiKey: 'keyA7EKdngjou4Dgy' }).base('appcXtOTPnE4QWIIt');\r\nconst table = base(TABLE_NAME);\r\nconst studentTable = base(STU_TABLE_NAME);\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        backgroundColor: '#212832',\r\n        border: '0.8px #FFBF5F solid',\r\n        borderRadius: '2px',\r\n        width: '80%',\r\n        minWidth: '1000px',\r\n        marginTop: theme.spacing.unit * 5,\r\n        margin: '0 auto',\r\n        padding: '3%'\r\n    },\r\n    button: {\r\n        backgroundColor: '#111B24',\r\n        color: 'white',\r\n    },\r\n    UploadIcon: {\r\n        margin: '0 auto',\r\n    },\r\n    input: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        top: 0,\r\n        left: 0,\r\n        outline: 'none',\r\n        opacity: 0,\r\n    },\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing.unit * 3,\r\n        overflowX: 'auto',\r\n        backgroundColor: '#212832',\r\n        border: 'white 1px solid',\r\n    },\r\n    head: {\r\n        fontSize: '14pt',\r\n        color: '#FFBF5F',\r\n    },\r\n    content: {\r\n        fontSize: '14pt',\r\n    },\r\n    editButton: {\r\n        border: '#FFBF5F 1px solid',\r\n        float: 'right',\r\n        marginLeft: theme.spacing.unit * 2,\r\n    }\r\n});\r\n\r\nlet id = 0;\r\nfunction createData(grade_studentName, grade_studentId, grade_studentGrade, grade_studentRank) {\r\n    id += 1;\r\n    return { id, grade_studentName, grade_studentId, grade_studentGrade, grade_studentRank };\r\n}\r\n\r\nclass Grade extends Component {\r\n    state = {\r\n        rows: [],\r\n        rowsInit:[],\r\n        //class_id:'',\r\n    }\r\n    // componentWillReceiveProps(nextProps) {\r\n    //     if (nextProps.class_id !== this.state.class_id) {\r\n    //         var count = this.state.rowsInit.length;\r\n    //         var temp = [];\r\n    //         for (var index = 0; index < count; index++) {\r\n    //             if (nextProps.class_id === this.state.rowsInit[index].class_id) {\r\n    //                 temp.push(this.state.rowsInit[index]);\r\n    //                 this.setState({ rows: temp });\r\n    //             }\r\n    //         }\r\n    //         this.setState({ class_id: nextProps.class_id });\r\n    //     }\r\n    // }\r\n\r\n    //airtable\r\n    componentDidMount() {\r\n        // const fileterSentence = 'AND(test_date=\"' + this.props.location.aboutProps.name.split(\" \")[0] + \r\n        // '\"),AND(test_name=\"'+ this.props.location.aboutProps.name.split(\" \")[1] + '\")';\r\n        const fileterSentence = 'AND(test_name=\"'+ this.props.location.aboutProps.name.split(\" \")[1] + '\")'\r\n\r\n        table.select({\r\n            filterByFormula: fileterSentence,\r\n            view: \"Grid view\",\r\n            //maxRecords: 1\r\n        }).eachPage((records, fetchNextPage) => {\r\n            this.setState({ records });\r\n            //const class_id = this.state.records.map((record, index) => record.fields['class_id']);\r\n            const student_id = this.state.records.map((record, index) => record.fields['student_id']);\r\n            const test_score = this.state.records.map((record, index) => record.fields['test_score']);\r\n            const test_rank = this.state.records.map((record, index) => record.fields['test_rank']);\r\n\r\n            //for stu name\r\n            var temp = [];\r\n            for (var index = 0; index < student_id.length; index++) {\r\n                const student_idR = student_id[index];\r\n                const test_scoreR = test_score[index];\r\n                const test_rankR = test_rank[index];\r\n\r\n                studentTable.select({\r\n                    filterByFormula: 'AND(student_id=\"'+ student_idR + '\")',\r\n                    view: \"Grid view\",\r\n                    //maxRecords: 1\r\n                }).eachPage((records, fetchNextPage) => {\r\n                    this.setState({ records });\r\n                    const student_name = this.state.records.map((record, index) => record.fields['student_name']);\r\n                    temp.push(createData(student_name[0], student_idR, test_scoreR, test_rankR));  \r\n                }\r\n                );\r\n            }\r\n            // var temp = [];\r\n            // for(var index = 0; index < student_id.length; index++) {\r\n            //     temp.push(createData(\"namee\",student_id[index],test_score[index],\"rank\"));  \r\n            // }\r\n            this.setState({ rows : temp });\r\n            console.log(this.state.rows);\r\n            this.setState({ rowsInit : temp });\r\n           // fetchNextPage();\r\n        }\r\n        );\r\n    }\r\n\r\n\r\n    onImportExcel = file => {\r\n        // 獲取上傳的文件對象\r\n        const { files } = file.target;\r\n        // 通過FileReader讀取文件\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = event => {\r\n            try {\r\n                const { result } = event.target;\r\n                // 以二進制方式讀取得到整份excel表格\r\n                const workbook = XLSX.read(result, { type: 'binary' });\r\n                // 儲存獲取到的數據\r\n                let data = [];\r\n                // 對每張工作表行行讀取（預設只讀取第一張表）\r\n                for (const sheet in workbook.Sheets) {\r\n                    // esline-disable-next-line\r\n                    if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n                        // 利用 sheet_to_json 方法將 excel 轉成 json 數據\r\n                        data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\r\n                        // break;\r\n                    }\r\n                }\r\n                // 最終獲取到且格式化的 json 數據\r\n                this.setState({ data });\r\n                const grade_studentName = this.state.data.map((data, index) => data['grade_studentName']);\r\n                const grade_studentId = this.state.data.map((data, index) => data['grade_studentId']);\r\n                const grade_studentGrade = this.state.data.map((data, index) => data['grade_studentGrade']);\r\n                const grade_studentRank = this.state.data.map((data, index) => data['grade_studentRank']);\r\n\r\n                // for (var index = 0; index < id; index++) {\r\n                //     data.push(createData(grade_studentName[index], grade_studentId[index], grade_studentGrade[index], grade_studentRank[index]));\r\n\r\n                // }\r\n\r\n                this.setState({ rows: data });\r\n                // console.log(data);\r\n                // console.log(data[0]);\r\n                // console.log(data[0].grade_studentName);\r\n                // console.log(data[0].grade_studentId);\r\n            } catch (e) {\r\n                // message.error('文件類型不正确！');\r\n            }\r\n        };\r\n        fileReader.readAsBinaryString(files[0]);\r\n    }\r\n    render() {\r\n        //console.log(this.props.location.aboutProps.name);\r\n        const { classes } = this.props;\r\n        const { rows } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Appbar />\r\n                <div>\r\n                    <Card className={classes.card} >\r\n                        <div style={{ borderColor: '#FFBF5F' }}>\r\n                            <Button className={classes.button}>\r\n                                <Upload type='upload' />\r\n                                <input className={classes.input} type='file' accept='.xlsx, .xls' onChange={this.onImportExcel} />\r\n                                <span>成績上傳</span>\r\n                            </Button>\r\n                            <Paper className={classes.root}>\r\n                                <Table className={classes.table}>\r\n                                    <TableHead >\r\n                                        <TableRow>\r\n                                            <TableCell className={classes.head} style={{ width: '25%' }}>學生姓名</TableCell>\r\n                                            <TableCell className={classes.head} >學號</TableCell>\r\n                                            <TableCell className={classes.head} >分數</TableCell>\r\n                                            <TableCell className={classes.head} >排名</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {rows.map(row => (\r\n                                            <TableRow hover key={row.id}>\r\n                                                <TableCell className={classes.content} style={{ width: '25%' }} component=\"th\" scope=\"row\">{row.grade_studentName}</TableCell>\r\n                                                <TableCell className={classes.content}>{row.grade_studentId}</TableCell>\r\n                                                <TableCell className={classes.content}>{row.grade_studentGrade}</TableCell>\r\n                                                <TableCell className={classes.content}>{row.grade_studentRank}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Paper>\r\n\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Grade);\r\n"]},"metadata":{},"sourceType":"module"}